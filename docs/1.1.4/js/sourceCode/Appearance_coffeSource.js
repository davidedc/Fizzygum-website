// Generated by CoffeeScript 1.12.7
window.Appearance_coffeSource = '# REQUIRES DeepCopierMixin\n\nclass Appearance\n\n  @augmentWith DeepCopierMixin\n\n  morph: nil\n  # the ownColorInsteadOfWidgetColor is used for buttons\n  # with icons on a glass bottom: the glass bottom has\n  # to change the color on hover, so the icon_button on it\n  # stain it, but they have to retain their color otherwise\n  # they are not visible anymore.\n  ownColorInsteadOfWidgetColor: nil\n\n  constructor: (@morph, @ownColorInsteadOfWidgetColor) ->\n\n  isTransparentAt: (aPoint) ->\n\n  # paintHighlight can work in two patterns:\n  #  * passing actual pixels, when used\n  #    outside the effect of the scope of\n  #    "scale pixelRatio, pixelRatio", or\n  #  * passing logical pixels, when used\n  #    inside the effect of the scope of\n  #    "scale pixelRatio, pixelRatio", or\n  # Mostly, the first pattern is used.\n  #\n  # useful for example when hovering over references\n  # to morphs. Can only modify the rendering of a morph,\n  # so any highlighting is only visible in the measure that\n  # the morph is visible (as opposed to HighlighterMorph being\n  # used to highlight a morph)\n  paintHighlight: (aContext, al, at, w, h) ->\n\n\n  # This method only paints this very morph\n  # i.e. it doesn\'t descend the children\n  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer,\n  # which eventually invokes paintIntoAreaOrBlitFromBackBuffer.\n  # Note that this morph might paint something on the screen even if\n  # it\'s not a "leaf".\n  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle, appliedShadow) ->\n';
