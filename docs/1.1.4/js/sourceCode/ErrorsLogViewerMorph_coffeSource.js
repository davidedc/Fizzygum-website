// Generated by CoffeeScript 1.12.7
window.ErrorsLogViewerMorph_coffeSource = '# REQUIRES SimplePlainTextScrollPanelWdgt\n# REQUIRES SimpleButtonMorph\n# REQUIRES ToggleButtonMorph\n\n# to make this error log viewer come up, edit any code\n# in the inspector so to get a compilation error\n# (e.g. unmatched parens) and click "save"\n\nclass ErrorsLogViewerMorph extends Widget\n\n  tempPromptEntryField: nil\n  defaultContents: ""\n  textMorph: nil\n\n  clearButton: nil\n  pauseToggle: nil\n  okButton: nil\n\n  externalPadding: 0\n  internalPadding: 5\n\n  paused: false\n\n  constructor: (@msg, @target, @callback, @defaultContents) ->\n    debugger\n    super new Point 200,400\n    @buildAndConnectChildren()\n\n  colloquialName: ->\n    "Error log"\n\n  closeFromContainerWindow: (containerWindow) ->\n    @parent.hide()\n\n  addText: (newLog) ->\n    if @textMorph.text.length != 0\n      existingLog = @textMorph.text\n    else\n      existingLog = ""\n\n    @textMorph.setText existingLog + "\\n\\n-----------------------------------------\\n\\n" + newLog\n\n\n  showUpWithError: (err) ->\n    unless @paused\n      toBeAddedToLog = ""\n\n      if world.widgetsGivingErrorWhileRepainting.length != 0\n        toBeAddedToLog += "Some widgets crashed while painting themselves and\\n"\n        toBeAddedToLog += "hence have been banned from re-painting themseves.\\n"\n        toBeAddedToLog += "Edit/save any source code to give them another chance.\\n\\n"\n\n      toBeAddedToLog += err\n      if err.stack?\n        toBeAddedToLog += "\\n\\nStack:\\n" + err.stack\n      @addText toBeAddedToLog\n\n    if !@parent.isVisible\n      @parent.show()\n      @parent.bringToForeground()\n\n\n  buildAndConnectChildren: ->\n    debugger\n    if AutomatorRecorderAndPlayer? and\n     AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and\n     AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @tempPromptEntryField = new SimplePlainTextScrollPanelWdgt @defaultContents, false, 5\n    @tempPromptEntryField.disableDrops()\n    @tempPromptEntryField.contents.disableDrops()\n    @tempPromptEntryField.color = new Color 255, 255, 255\n\n    @textMorph = @tempPromptEntryField.textWdgt\n    @textMorph.backgroundColor = new Color 0,0,0,0\n    @textMorph.setFontName nil, nil, @textMorph.monoFontStack\n    @textMorph.isEditable = true\n    @textMorph.enableSelecting()\n\n    @add @tempPromptEntryField\n\n    # buttons -------------------------------\n    @clearButton = new SimpleButtonMorph true, @, "clearTextPane", "clear"\n    @add @clearButton\n\n\n    pauseButton = new SimpleButtonMorph true, @, "pauseErrors", "pause"\n    unpauseButton = new SimpleButtonMorph true, @, "unpauseErrors", "un-pause"\n    @pauseToggle = new ToggleButtonMorph pauseButton, unpauseButton, if @paused then 1 else 0\n    @add @pauseToggle\n\n    @okButton = new SimpleButtonMorph true, @, "closeFromContainerWindow", "ok"\n    @add @okButton\n\n    @invalidateLayout()\n\n  pauseErrors: ->\n    @paused = true\n\n  unpauseErrors: ->\n    @paused = false\n\n  clearTextPane: ->\n    @textMorph.setText ""    \n\n  informTarget: ->\n    @target[@callback].call @target, nil, @textMorph\n\n  notifyTargetAndClose: ->\n    @informTarget()\n    @close()\n\n  doLayout: (newBoundsForThisLayout) ->\n    debugger\n    if !window.recalculatingLayouts\n      debugger\n\n    if !newBoundsForThisLayout?\n      if @desiredExtent?\n        newBoundsForThisLayout = @desiredExtent\n        @desiredExtent = nil\n      else\n        newBoundsForThisLayout = @extent()\n\n      if @desiredPosition?\n        newBoundsForThisLayout = (new Rectangle @desiredPosition).setBoundsWidthAndHeight newBoundsForThisLayout\n        @desiredPosition = nil\n      else\n        newBoundsForThisLayout = (new Rectangle @position()).setBoundsWidthAndHeight newBoundsForThisLayout\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    @rawSetBounds newBoundsForThisLayout\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n\n    mainCanvasHeight = @height() - 2 * @externalPadding - @internalPadding - WorldMorph.preferencesAndSettings.handleSize\n    mainCanvasBottom = @top() + @externalPadding + mainCanvasHeight\n\n    if @tempPromptEntryField.parent == @\n      @tempPromptEntryField.fullRawMoveTo new Point @left() + @externalPadding, @top() + @externalPadding\n      @tempPromptEntryField.rawSetExtent new Point @width() - 2 * @externalPadding, mainCanvasHeight\n\n\n    # buttons -------------------------------\n    \n\n    eachButtonWidth = (@width() - 2* @externalPadding - 3 * @internalPadding - WorldMorph.preferencesAndSettings.handleSize) / 3\n\n    if @clearButton.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding + 0*(eachButtonWidth + @internalPadding), mainCanvasBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight eachButtonWidth, 15\n      @clearButton.doLayout buttonBounds\n\n    if @pauseToggle.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding + 1*(eachButtonWidth + @internalPadding), mainCanvasBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight eachButtonWidth, 15\n      @pauseToggle.doLayout buttonBounds\n\n    if @okButton.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding + 2*(eachButtonWidth + @internalPadding), mainCanvasBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight eachButtonWidth, 15\n      @okButton.doLayout buttonBounds\n\n    # ----------------------------------------------\n\n\n    trackChanges.pop()\n    if AutomatorRecorderAndPlayer? and\n     AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and\n     AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n\n';
