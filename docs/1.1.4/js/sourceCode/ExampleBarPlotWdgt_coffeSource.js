// Generated by CoffeeScript 1.12.7
window.ExampleBarPlotWdgt_coffeSource = 'class ExampleBarPlotWdgt extends GraphsPlotsChartsWdgt\n\n  graphNumber: 1\n  drawOnlyPartOfBoundingRect: false\n\n  constructor: (@drawOnlyPartOfBoundingRect)->\n    super()\n    @fps = 0.5\n    world.addSteppingMorph @\n\n  colloquialName: ->\n    "Bar plot"\n\n\n  # This method only paints this very morph\'s "image",\n  # it doesn\'t descend the children\n  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which\n  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.\n  # Note that this morph might paint something on the screen even if\n  # it\'s not a "leaf".\n  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle, appliedShadow) ->\n\n    if @preliminaryCheckNothingToDraw clippingRectangle, aContext\n      return\n\n    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle\n    if area.isNotEmpty()\n      if w < 1 or h < 1\n        return nil\n\n      aContext.save()\n\n      # clip out the dirty rectangle as we are\n      # going to paint the whole of the box\n      aContext.clipToRectangle al,at,w,h\n\n      aContext.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @backgroundTransparency\n\n      # paintRectangle here is made to work with\n      # al, at, w, h which are actual pixels\n      # rather than logical pixels, this is why\n      # it\'s called before the scaling.\n      @paintRectangle aContext, al, at, w, h, @backgroundColor\n      aContext.scale pixelRatio, pixelRatio\n\n      morphPosition = @position()\n      aContext.translate morphPosition.x, morphPosition.y\n\n      @renderingHelper aContext, new Color(255, 255, 255), appliedShadow\n\n      aContext.restore()\n\n      # paintHighlight here is made to work with\n      # al, at, w, h which are actual pixels\n      # rather than logical pixels, this is why\n      # it\'s called outside the effect of the scaling\n      # (after the restore).\n      @paintHighlight aContext, al, at, w, h\n\n\n  step: ->\n    @graphNumber++\n    @changed()\n\n  renderingHelper: (context, color, appliedShadow) ->\n\n    @seed = @graphNumber\n    circleRadius = 5\n    height = @height()\n    width = @width()\n\n    if appliedShadow?\n      @simpleShadow context, color, appliedShadow\n      return\n\n    context.fillStyle = WorldMorph.preferencesAndSettings.editableItemBackgroundColor.toString()\n    context.fillRect 0, 0, width, height\n\n    availableHeight = height\n    availableWidth = width - 2 * circleRadius\n\n    context.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @alpha\n\n    for i in [0..20]\n      xPos = (i/21)*width\n      heightPerc = 0.2 + Math.sin(i/100)*3 - i/10000 + @seeded_randn_bm() / 20\n      if @seededRandom() > 0.5\n        context.fillStyle = \'#325FA2\'\n      else\n        context.fillStyle = \'#FF0000\'\n      context.fillRect Math.round(xPos), Math.round(availableHeight - (availableHeight * heightPerc)), Math.round((1/20)*width - 2), Math.round(availableHeight * heightPerc)\n\n    @drawBoundingBox context, color, appliedShadow\n';
