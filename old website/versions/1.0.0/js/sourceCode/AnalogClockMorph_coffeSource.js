// Generated by CoffeeScript 1.10.0
window.AnalogClockMorph_coffeSource = '# AnalogClockMorph //////////////////////////////////////////////////////\n\n# this comment below is needed to figure out dependencies between classes\n# REQUIRES Morph\n\nclass AnalogClockMorph extends Morph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  hoursHandAngle: 0\n  minutesHandAngle: 0\n  secondsHandAngle: 0\n\n  constructor: ->\n\n    @fps = 1\n    world.addSteppingMorph @\n\n    super()\n    @setColor new Color 255, 125, 125\n    @silentRawSetExtent new Point 200, 200\n    return\n\n    #@setMinAndMaxBoundsAndSpreadability (new Point 15,15) , (new Point 15,15), LayoutSpec.SPREADABILITY_HANDLES\n\n  # This method only paints this very morph\'s "image",\n  # it doesn\'t descend the children\n  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which\n  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.\n  # Note that this morph might paint something on the screen even if\n  # it\'s not a "leaf".\n  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle) ->\n\n    if @preliminaryCheckNothingToDraw false, clippingRectangle, aContext\n      return\n\n    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle\n    if area.isNotEmpty()\n      if w < 1 or h < 1\n        return null\n\n      aContext.save()\n\n      # clip out the dirty rectangle as we are\n      # going to paint the whole of the box\n      aContext.clipToRectangle al,at,w,h\n\n      aContext.globalAlpha = @backgroundTransparency\n\n      # paintRectangle here is made to work with\n      # al, at, w, h which are actual pixels\n      # rather than logical pixels, this is why\n      # it\'s called before the scaling.\n      @paintRectangle aContext, al, at, w, h, @backgroundColor\n      aContext.scale pixelRatio, pixelRatio\n\n      morphPosition = @position()\n      aContext.translate morphPosition.x, morphPosition.y\n\n      @renderingHelper aContext, new Color(255, 255, 255), new Color(200, 200, 255)\n\n      aContext.restore()\n\n      # paintHighlight here is made to work with\n      # al, at, w, h which are actual pixels\n      # rather than logical pixels, this is why\n      # it\'s called outside the effect of the scaling\n      # (after the restore).\n      @paintHighlight aContext, al, at, w, h\n\n  # BlinkerMorph stepping:\n  step: ->\n    @changed()\n\n  calculateHandsAngles: ->\n    now = new Date()\n    #sec = now.getSeconds()\n    sec = now.getSeconds() + now.getMilliseconds()/1000\n    min = now.getMinutes()\n    hr = now.getHours()\n    hr = if hr >= 12 then hr - 12 else hr\n    @hoursHandAngle = hr * Math.PI / 6 + Math.PI / 360 * min + Math.PI / 21600 * sec\n    @minutesHandAngle = Math.PI / 30 * min + Math.PI / 1800 * sec\n    @secondsHandAngle = sec * Math.PI / 30\n\n  renderingHelper: (context, color, shadowColor) ->\n    context.lineWidth = 1\n    context.lineCap = "round"\n\n    context.save()\n    context.globalAlpha = @alpha\n\n    height = @height()\n    width = @width()\n\n    squareDim = Math.min width/2, height/2\n\n    context.translate width/2, height/2\n    context.scale 0.9, 0.9\n\n    context.rotate -Math.PI / 2\n    context.strokeStyle = \'black\'\n    context.fillStyle = \'white\'\n    context.lineWidth = 6\n    context.lineCap = \'round\'\n\n    # hour face ticks\n    context.save()\n    i = 0\n    while i < 12\n      context.beginPath()\n      context.rotate Math.PI / 6\n      context.moveTo squareDim*2.4/3, 0\n      context.lineTo squareDim, 0\n      context.stroke()\n      i++\n    context.restore()\n\n    # minute face ticks\n    context.save()\n    context.lineWidth = 5\n    i = 0\n    while i < 60\n      if i % 5 != 0\n        context.beginPath()\n        context.moveTo squareDim*2.7/3, 0\n        context.lineTo squareDim, 0\n        context.stroke()\n      context.rotate Math.PI / 30\n      i++\n    context.restore()\n\n    context.fillStyle = \'black\'\n\n    @calculateHandsAngles()\n\n    # hour hand\n    @drawHoursHand context, squareDim\n    @drawMinutesHand context, squareDim\n    @drawSecondsHand context, squareDim\n\n\n    context.beginPath()\n    context.lineWidth = 10\n    context.strokeStyle = \'#325FA2\'\n    context.arc 0, 0, squareDim, 0, Math.PI * 2, true\n    context.stroke()\n\n\n    context.restore()\n\n    context.strokeStyle = color.toString()\n\n\n  drawHoursHand: (context, squareDim) ->\n    context.save()\n    context.rotate @hoursHandAngle\n    context.lineWidth = 8\n    context.beginPath()\n    context.moveTo -squareDim/7, 0\n    context.lineTo squareDim/2, 0\n    context.stroke()\n    context.restore()\n\n\n  drawMinutesHand: (context, squareDim) ->\n    context.save()\n    context.rotate @minutesHandAngle\n    context.lineWidth = 5\n    context.beginPath()\n    context.moveTo -squareDim/5, 0\n    context.lineTo squareDim/1.3, 0\n    context.stroke()\n    context.restore()\n\n  drawSecondsHand: (context, squareDim) ->\n    context.save()\n    context.rotate @secondsHandAngle\n    context.strokeStyle = \'#D40000\'\n    context.fillStyle = \'#D40000\'\n    context.lineWidth = 6\n    context.beginPath()\n    context.moveTo -squareDim/5, 0\n    context.lineTo squareDim/1.3, 0\n    context.stroke()\n\n    # the dot in the middle of the face\n    context.beginPath()\n    context.arc(0, 0, 7, 0, Math.PI * 2, true)\n    context.fill()\n    context.restore()\n\n';
