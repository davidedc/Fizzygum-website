// Generated by CoffeeScript 1.10.0
window.BouncerMorph_coffeSource = '# BouncerMorph ////////////////////////////////////////////////////////\n# fishy constructor\n# I am a Demo of a stepping custom Morph\n# Bounces vertically or horizontally within the parent\n\nclass BouncerMorph extends Morph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  isStopped: false\n  type: null\n  direction: null\n  speed: null\n\n  constructor: (@type = "vertical", @speed = 1) ->\n    super()\n    @fps = 50\n    world.addSteppingMorph @\n\n    @appearance = new RectangularAppearance @\n\n    # additional properties:\n    if @type is "vertical"\n      @direction = "down"\n    else\n      @direction = "right"\n\n    #  not needed, probably\n    # because it\'s repainted in the\n    # next frame since it\'s an animation?\n    #\n\n  resetPosition: ->\n    if @type is "vertical"\n      @direction = "down"\n    else\n      @direction = "right"\n    @fullRawMoveTo new Point @parent.position().x, @parent.position().y\n  \n  \n  # BouncerMorph moving.\n  # We need the silent option because\n  # we might move the bouncer many times\n  # consecutively in the case we tie\n  # the animation to the test step.\n  # The silent option avoids too many\n  # broken rectangles being pushed\n  # so it makes the whole thing smooth\n  # even with many movements at once.\n  moveUp: (silently) ->\n    if silently\n      @silentFullRawMoveBy new Point 0, -@speed\n    else\n      @fullRawMoveBy new Point 0, -@speed\n  \n  moveDown: (silently) ->\n    if silently\n      @silentFullRawMoveBy new Point 0, @speed\n    else\n      @fullRawMoveBy new Point 0, @speed\n  \n  moveRight: (silently) ->\n    if silently\n      @silentFullRawMoveBy new Point @speed, 0\n    else\n      @fullRawMoveBy new Point @speed, 0\n  \n  moveLeft: (silently) ->\n    if silently\n      @silentFullRawMoveBy new Point -@speed, 0\n    else\n      @fullRawMoveBy new Point -@speed, 0\n\n  moveAccordingToBounce: (silently) ->\n    switch @type\n      when "vertical"\n        if @direction is "down"\n          @moveDown silently\n        else\n          @moveUp silently\n        @direction = "down"  if @fullBounds().top() < @parent.top() and @direction is "up"\n        @direction = "up"  if @fullBounds().bottom() > @parent.bottom() and @direction is "down"\n      when "horizontal"\n        if @direction is "right"\n          @moveRight silently\n        else\n          @moveLeft silently\n        @direction = "right"  if @fullBounds().left() < @parent.left() and @direction is "left"\n        @direction = "left"  if @fullBounds().right() > @parent.right() and @direction is "right"\n  \n  \n  # BouncerMorph stepping:\n  step: ->\n    unless @isStopped\n      # if we are recording or playing a test\n      # then there is a flag we need to check that allows\n      # the world to control all the animations.\n      # This is so there is a consistent check\n      # when taking/comparing\n      # screenshots.\n      # So we check here that flag, and make the\n      # animation is exactly controlled\n      # by the test step count only.\n      #console.log "AutomatorRecorderAndPlayer.animationsPacingControl: " + AutomatorRecorderAndPlayer.animationsPacingControl\n      #console.log "state: " + AutomatorRecorderAndPlayer.state\n      if AutomatorRecorderAndPlayer.animationsPacingControl\n        if AutomatorRecorderAndPlayer.state == AutomatorRecorderAndPlayer.RECORDING\n          @resetPosition()\n          for i in [0... window.world.automatorRecorderAndPlayer.automatorCommandsSequence.length]\n            @moveAccordingToBounce true\n          @parent.changed()\n          return\n        if AutomatorRecorderAndPlayer.state == AutomatorRecorderAndPlayer.PLAYING\n          @resetPosition()\n          for i in [0... window.world.automatorRecorderAndPlayer.indexOfTestCommandBeingPlayedFromSequence]\n            @moveAccordingToBounce true\n          @parent.changed()\n          return\n\n      @moveAccordingToBounce false\n';
