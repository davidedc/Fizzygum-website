// Generated by CoffeeScript 1.10.0
window.BoxMorph_coffeSource = '# BoxMorph ////////////////////////////////////////////////////////////\n\n# I can have an optionally rounded border\n\nclass BoxMorph extends Morph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  cornerRadius: null\n\n  constructor: (@cornerRadius = 4) ->\n    super()\n    @appearance = new BoxyAppearance @\n\n  insetPosition: ->\n    return @position().add(@cornerRadius - Math.round(@cornerRadius/Math.sqrt(2)))\n\n  insetSpaceExtent: ->\n    return @extent().subtract(2*(@cornerRadius - Math.round(@cornerRadius/Math.sqrt(2))))\n\n  extentBasedOnInsetExtent: (insetMorph) ->\n    return insetMorph.extent().add(2*(@cornerRadius - Math.round(@cornerRadius/Math.sqrt(2))))\n\n  # there is another method almost equal to this\n  # todo refactor\n  choiceOfMorphToBePicked: (ignored, morphPickingUp) ->\n    # this is what happens when "each" is\n    # selected: we attach the selected morph\n    morphPickingUp.addInset @\n    if @ instanceof ScrollFrameMorph\n      @adjustContentsBounds()\n      @adjustScrollBars()\n\n\n  setCornerRadius: (radiusOrMorphGivingRadius, morphGivingRadius) ->\n    if morphGivingRadius?.getValue?\n      radius = morphGivingRadius.getValue()\n    else\n      radius = radiusOrMorphGivingRadius\n\n    # for context menu demo purposes\n    if typeof radius is "number"\n      @cornerRadius = Math.max radius, 0\n    else\n      newRadius = parseFloat radius\n      if !isNaN newRadius\n        @cornerRadius = Math.max newRadius, 0\n    @layoutInset()\n    @changed()\n\n  \n  # there is another method almost equal to this\n  # todo refactor\n  pickInset: ->\n    choices = world.plausibleTargetAndDestinationMorphs @\n\n    # my direct parent might be in the\n    # options which is silly, leave that one out\n    choicesExcludingParent = []\n    choices.forEach (each) =>\n      if each != @parent\n        choicesExcludingParent.push each\n\n    if choicesExcludingParent.length > 0\n      menu = new MenuMorph false, @, true, true, "choose Morph to put as inset:"\n      choicesExcludingParent.forEach (each) =>\n        menu.addItem each.toString().slice(0, 50), true, each, "choiceOfMorphToBePicked"\n    else\n      # the ideal would be to not show the\n      # "attach" menu entry at all but for the\n      # time being it\'s quite costly to\n      # find the eligible morphs to attach\n      # to, so for now let\'s just calculate\n      # this list if the user invokes the\n      # command, and if there are no good\n      # morphs then show some kind of message.\n      menu = new MenuMorph false, @, true, true, "no morphs to pick"\n    menu.popUpAtHand @firstContainerMenu()\n\n';
