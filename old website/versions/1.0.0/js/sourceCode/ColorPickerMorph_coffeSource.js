// Generated by CoffeeScript 1.10.0
window.ColorPickerMorph_coffeSource = '# ColorPickerMorph ///////////////////////////////////////////////////\n\nclass ColorPickerMorph extends Morph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  # pattern: all the children should be declared here\n  # the reason is that when you duplicate a morph\n  # , the duplicated morph needs to have the handles\n  # that will be duplicated. If you don\'t list them\n  # here, then they need to be initialised in the\n  # constructor. But actually they might not be\n  # initialised in the constructor if a "lazy initialisation"\n  # approach is taken. So it\'s good practice\n  # to list them here so they can be duplicated either way.\n  feedback: null\n  choice: null\n  colorPalette: null\n  grayPalette: null\n\n  constructor: (\n    @choice = (new Color 255, 255, 255)\n    ) ->    \n    super()\n    @appearance = new RectangularAppearance @\n    @color = new Color 255, 255, 255\n    @rawSetExtent new Point 80, 80\n\n  reLayout: ->\n    super()\n    @buildSubmorphs()\n    @notifyChildrenThatParentHasReLayouted()\n\n  buildSubmorphs: ->\n    @fullDestroyChildren()\n    @feedback = new RectangleMorph new Point(20, 20), @choice\n    @colorPalette = new ColorPaletteMorph @feedback, new Point @width(), 50\n    @grayPalette = new GrayPaletteMorph @feedback, new Point @width(), 5\n    @colorPalette.fullRawMoveTo @position()\n    @add @colorPalette\n    @grayPalette.fullRawMoveTo @colorPalette.bottomLeft()\n    @add @grayPalette\n    x = @grayPalette.left() + Math.floor((@grayPalette.width() - @feedback.width()) / 2)\n    y = @grayPalette.bottom() + Math.floor((@bottom() - @grayPalette.bottom() - @feedback.height()) / 2)\n    @feedback.fullRawMoveTo new Point x, y\n    @add @feedback\n\n  imBeingAddedTo: (newParentMorph) ->\n  \n  getColor: ->\n    @feedback.color\n  \n  rootForGrab: ->\n    @\n';
