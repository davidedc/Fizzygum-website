// Generated by CoffeeScript 1.10.0
window.Color_coffeSource = '# Colors //////////////////////////////////////////////////////////////\n\n# REQUIRES DeepCopierMixin\n\nclass Color\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  @augmentWith DeepCopierMixin\n\n  # This "colourNamesValues" data\n  # structure is only used to create\n  # all the CSS color literals, like\n  #   Color.red\n  # This creation of constants\n  # is done in WoldMorph, since\n  # it\'s the first morph to be\n  # created.\n  # In pure theory we\'d like these\n  # constants to be created by a piece\n  # of code at the end of the file, just\n  # after the class definition,\n  # unfortunately we can\'t add it there\n  # as the source in this file is\n  # appended as a further static variable\n  # in this class, so we can\'t\n  # "close" the class by adding code\n  # that it\'s supposed to be outside its\n  # definition.\n  @colourNamesValues =\n    aliceblue:            [0xf0,0xf8,0xff]\n    antiquewhite:         [0xfa,0xeb,0xd7]\n    aqua:                 [0x00,0xff,0xff]\n    aquamarine:           [0x7f,0xff,0xd4]\n    azure:                [0xf0,0xff,0xff]\n    beige:                [0xf5,0xf5,0xdc]\n    bisque:               [0xff,0xe4,0xc4]\n    black:                [0x00,0x00,0x00]\n    blanchedalmond:       [0xff,0xeb,0xcd]\n    blue:                 [0x00,0x00,0xff]\n    blueviolet:           [0x8a,0x2b,0xe2]\n    brown:                [0xa5,0x2a,0x2a]\n    burlywood:            [0xde,0xb8,0x87]\n    cadetblue:            [0x5f,0x9e,0xa0]\n    chartreuse:           [0x7f,0xff,0x00]\n    chocolate:            [0xd2,0x69,0x1e]\n    coral:                [0xff,0x7f,0x50]\n    cornflowerblue:       [0x64,0x95,0xed]\n    cornsilk:             [0xff,0xf8,0xdc]\n    crimson:              [0xdc,0x14,0x3c]\n    cyan:                 [0x00,0xff,0xff]\n    darkblue:             [0x00,0x00,0x8b]\n    darkcyan:             [0x00,0x8b,0x8b]\n    darkgoldenrod:        [0xb8,0x86,0x0b]\n    darkgray:             [0xa9,0xa9,0xa9]\n    darkgrey:             [0xa9,0xa9,0xa9]\n    darkgreen:            [0x00,0x64,0x00]\n    darkkhaki:            [0xbd,0xb7,0x6b]\n    darkmagenta:          [0x8b,0x00,0x8b]\n    darkolivegreen:       [0x55,0x6b,0x2f]\n    darkorange:           [0xff,0x8c,0x00]\n    darkorchid:           [0x99,0x32,0xcc]\n    darkred:              [0x8b,0x00,0x00]\n    darksalmon:           [0xe9,0x96,0x7a]\n    darkseagreen:         [0x8f,0xbc,0x8f]\n    darkslateblue:        [0x48,0x3d,0x8b]\n    darkslategray:        [0x2f,0x4f,0x4f]\n    darkslategrey:        [0x2f,0x4f,0x4f]\n    darkturquoise:        [0x00,0xce,0xd1]\n    darkviolet:           [0x94,0x00,0xd3]\n    deeppink:             [0xff,0x14,0x93]\n    deepskyblue:          [0x00,0xbf,0xff]\n    dimgray:              [0x69,0x69,0x69]\n    dimgrey:              [0x69,0x69,0x69]\n    dodgerblue:           [0x1e,0x90,0xff]\n    firebrick:            [0xb2,0x22,0x22]\n    floralwhite:          [0xff,0xfa,0xf0]\n    forestgreen:          [0x22,0x8b,0x22]\n    fuchsia:              [0xff,0x00,0xff]\n    gainsboro:            [0xdc,0xdc,0xdc]\n    ghostwhite:           [0xf8,0xf8,0xff]\n    gold:                 [0xff,0xd7,0x00]\n    goldenrod:            [0xda,0xa5,0x20]\n    gray:                 [0x80,0x80,0x80]\n    grey:                 [0x80,0x80,0x80]\n    green:                [0x00,0x80,0x00]\n    greenyellow:          [0xad,0xff,0x2f]\n    honeydew:             [0xf0,0xff,0xf0]\n    hotpink:              [0xff,0x69,0xb4]\n    indianred:            [0xcd,0x5c,0x5c]\n    indigo:               [0x4b,0x00,0x82]\n    ivory:                [0xff,0xff,0xf0]\n    khaki:                [0xf0,0xe6,0x8c]\n    lavender:             [0xe6,0xe6,0xfa]\n    lavenderblush:        [0xff,0xf0,0xf5]\n    lawngreen:            [0x7c,0xfc,0x00]\n    lemonchiffon:         [0xff,0xfa,0xcd]\n    lightblue:            [0xad,0xd8,0xe6]\n    lightcoral:           [0xf0,0x80,0x80]\n    lightcyan:            [0xe0,0xff,0xff]\n    lightgoldenrodyellow: [0xfa,0xfa,0xd2]\n    lightgrey:            [0xd3,0xd3,0xd3]\n    lightgray:            [0xd3,0xd3,0xd3]\n    lightgreen:           [0x90,0xee,0x90]\n    lightpink:            [0xff,0xb6,0xc1]\n    lightsalmon:          [0xff,0xa0,0x7a]\n    lightseagreen:        [0x20,0xb2,0xaa]\n    lightskyblue:         [0x87,0xce,0xfa]\n    lightslategray:       [0x77,0x88,0x99]\n    lightslategrey:       [0x77,0x88,0x99]\n    lightsteelblue:       [0xb0,0xc4,0xde]\n    lightyellow:          [0xff,0xff,0xe0]\n    lime:                 [0x00,0xff,0x00]\n    limegreen:            [0x32,0xcd,0x32]\n    linen:                [0xfa,0xf0,0xe6]\n    mintcream:            [0xf5,0xff,0xfa]\n    mistyrose:            [0xff,0xe4,0xe1]\n    moccasin:             [0xff,0xe4,0xb5]\n    navajowhite:          [0xff,0xde,0xad]\n    navy:                 [0x00,0x00,0x80]\n    oldlace:              [0xfd,0xf5,0xe6]\n    olive:                [0x80,0x80,0x00]\n    olivedrab:            [0x6b,0x8e,0x23]\n    orange:               [0xff,0xa5,0x00]\n    orangered:            [0xff,0x45,0x00]\n    orchid:               [0xda,0x70,0xd6]\n    palegoldenrod:        [0xee,0xe8,0xaa]\n    palegreen:            [0x98,0xfb,0x98]\n    paleturquoise:        [0xaf,0xee,0xee]\n    palevioletred:        [0xd8,0x70,0x93]\n    papayawhip:           [0xff,0xef,0xd5]\n    peachpuff:            [0xff,0xda,0xb9]\n    peru:                 [0xcd,0x85,0x3f]\n    pink:                 [0xff,0xc0,0xcb]\n    plum:                 [0xdd,0xa0,0xdd]\n    powderblue:           [0xb0,0xe0,0xe6]\n    purple:               [0x80,0x00,0x80]\n    red:                  [0xff,0x00,0x00]\n    rosybrown:            [0xbc,0x8f,0x8f]\n    royalblue:            [0x41,0x69,0xe1]\n    saddlebrown:          [0x8b,0x45,0x13]\n    salmon:               [0xfa,0x80,0x72]\n    sandybrown:           [0xf4,0xa4,0x60]\n    seagreen:             [0x2e,0x8b,0x57]\n    seashell:             [0xff,0xf5,0xee]\n    sienna:               [0xa0,0x52,0x2d]\n    silver:               [0xc0,0xc0,0xc0]\n    skyblue:              [0x87,0xce,0xeb]\n    slateblue:            [0x6a,0x5a,0xcd]\n    slategray:            [0x70,0x80,0x90]\n    slategrey:            [0x70,0x80,0x90]\n    snow:                 [0xff,0xfa,0xfa]\n    springgreen:          [0x00,0xff,0x7f]\n    steelblue:            [0x46,0x82,0xb4]\n    tan:                  [0xd2,0xb4,0x8c]\n    teal:                 [0x00,0x80,0x80]\n    thistle:              [0xd8,0xbf,0xd8]\n    tomato:               [0xff,0x63,0x47]\n    turquoise:            [0x40,0xe0,0xd0]\n    violet:               [0xee,0x82,0xee]\n    wheat:                [0xf5,0xde,0xb3]\n    white:                [0xff,0xff,0xff]\n    whitesmoke:           [0xf5,0xf5,0xf5]\n    yellow:               [0xff,0xff,0x00]\n    yellowgreen:          [0x9a,0xcd,0x32]\n\n  a: null\n  r: null\n  g: null\n  b: null\n\n  constructor: (@r = 0, @g = 0, @b = 0, a) ->\n    # all values are optional, just (r, g, b) is fine\n    @a = a or ((if (a is 0) then 0 else 1))\n  \n  # Color string representation: e.g. \'rgba(255,165,0,1)\'\n  toString: ->\n    "rgba(" + Math.round(@r) + "," + Math.round(@g) + "," + Math.round(@b) + "," + @a + ")"\n\n\n  prepareBeforeSerialization: ->\n    @className = @constructor.name\n    @classVersion = "0.0.1"\n    @serializerVersion = "0.0.1"\n    for property of @\n      if @[property]?\n        if typeof @[property] == \'object\'\n          if !@[property].className?\n            if @[property].prepareBeforeSerialization?\n              @[property].prepareBeforeSerialization()\n  \n  # Color copying:\n  copy: ->\n    new @constructor @r, @g, @b, @a\n  \n  # Color comparison:\n  eq: (aColor) ->\n    # ==\n    aColor and @r is aColor.r and @g is aColor.g and @b is aColor.b\n  \n  \n  # Color conversion (hsv):\n  hsv: ->\n    # ignore alpha\n    rr = @r / 255\n    gg = @g / 255\n    bb = @b / 255\n    max = Math.max rr, gg, bb\n    min = Math.min rr, gg, bb\n    h = max\n    s = max\n    v = max\n    d = max - min\n    s = (if max is 0 then 0 else d / max)\n    if max is min\n      h = 0\n    else\n      switch max\n        when rr\n          h = (gg - bb) / d + (if gg < bb then 6 else 0)\n        when gg\n          h = (bb - rr) / d + 2\n        when bb\n          h = (rr - gg) / d + 4\n      h /= 6\n    [h, s, v]\n  \n  set_hsv: (h, s, v) ->\n    # ignore alpha\n    # h, s and v are to be within [0, 1]\n    i = Math.floor(h * 6)\n    f = h * 6 - i\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    switch i % 6\n      when 0\n        @r = v\n        @g = t\n        @b = p\n      when 1\n        @r = q\n        @g = v\n        @b = p\n      when 2\n        @r = p\n        @g = v\n        @b = t\n      when 3\n        @r = p\n        @g = q\n        @b = v\n      when 4\n        @r = t\n        @g = p\n        @b = v\n      when 5\n        @r = v\n        @g = p\n        @b = q\n    @r *= 255\n    @g *= 255\n    @b *= 255\n  \n  \n  # Color mixing:\n  mixed: (proportion, otherColor) ->\n    # answer a copy of this color mixed with another color, ignore alpha\n    frac1 = Math.min Math.max(proportion, 0), 1\n    frac2 = 1 - frac1\n    new @constructor(\n      @r * frac1 + otherColor.r * frac2,\n      @g * frac1 + otherColor.g * frac2,\n      @b * frac1 + otherColor.b * frac2)\n  \n  darker: (percent) ->\n    # return an rgb-interpolated darker copy of me, ignore alpha\n    fract = 0.8333\n    fract = (100 - percent) / 100  if percent\n    @mixed fract, new @constructor 0, 0, 0\n  \n  lighter: (percent) ->\n    # return an rgb-interpolated lighter copy of me, ignore alpha\n    fract = 0.8333\n    fract = (100 - percent) / 100  if percent\n    @mixed fract, new @constructor 255, 255, 255\n  \n  dansDarker: ->\n    # return an hsv-interpolated darker copy of me, ignore alpha\n    hsv = @hsv()\n    result = new @constructor()\n    vv = Math.max hsv[2] - 0.16, 0\n    result.set_hsv hsv[0], hsv[1], vv\n    result\n\n  @transparent: ->\n    return new @ 0,0,0,0\n\n';
