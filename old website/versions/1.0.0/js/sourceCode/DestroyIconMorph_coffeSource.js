// Generated by CoffeeScript 1.10.0
window.DestroyIconMorph_coffeSource = '# DestroyIconMorph //////////////////////////////////////////////////////\n\n\nclass DestroyIconMorph extends Morph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  #constructor: ->\n  #  super()\n  #  @setColor new Color 0, 0, 0\n\n\n  # This method only paints this very morph\'s "image",\n  # it doesn\'t descend the children\n  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which\n  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.\n  # Note that this morph might paint something on the screen even if\n  # it\'s not a "leaf".\n  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle) ->\n\n    if @preliminaryCheckNothingToDraw false, clippingRectangle, aContext\n      return\n\n    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle\n    if area.isNotEmpty()\n      if w < 1 or h < 1\n        return null\n\n      aContext.save()\n\n      # clip out the dirty rectangle as we are\n      # going to paint the whole of the box\n      aContext.clipToRectangle al,at,w,h\n\n      aContext.globalAlpha = @alpha\n\n      aContext.scale pixelRatio, pixelRatio\n\n      morphPosition = @position()\n      aContext.translate morphPosition.x, morphPosition.y\n\n      height = @height()\n      width = @width()\n\n      squareDim = Math.min width, height\n\n      if width > height\n        aContext.translate (width-squareDim)/2,0\n      else\n        aContext.translate 0,(height-squareDim)/2\n\n      squareSize = 100\n      aContext.scale squareDim/squareSize, squareDim/squareSize\n\n      ## at this point, you draw in a squareSize x squareSize\n      ## canvas, and it gets painted in a square that fits\n      ## the morph, right in the middle.\n      @drawingIconInSquare aContext\n\n      aContext.restore()\n\n      # paintHighlight is usually made to work with\n      # al, at, w, h which are actual pixels\n      # rather than logical pixels, so it\'s generally used\n      # outside the effect of the scaling because\n      # of the pixelRatio (i.e. after the restore)\n      @paintHighlight aContext, al, at, w, h\n\n  drawingIconInSquare: (context) ->\n\n    # colors\n    blackColor = \'rgba(0, 0, 0, 1)\'\n    color = \'rgba(0, 0, 0, 1)\'\n\n    # the drawing\n    # icon adapted from\n    # https://thenounproject.com/term/explosion/1255/\n\n    context.beginPath()\n    context.moveTo 42.5, 4.5\n    context.lineTo 53.5, 29.5\n    context.lineTo 72.5, 9.5\n    context.lineTo 65.5, 35.5\n    context.lineTo 94.5, 34.5\n    context.lineTo 70.5, 51.5\n    context.lineTo 96.5, 72.5\n    context.lineTo 65.5, 66.5\n    context.lineTo 73.5, 87.5\n    context.lineTo 55.5, 73.5\n    context.lineTo 43.5, 96.5\n    context.lineTo 36.5, 67.5\n    context.lineTo 9.5, 77.5\n    context.lineTo 24.5, 59.5\n    context.lineTo 3.5, 56.5\n    context.lineTo 25.5, 48.5\n    context.lineTo 5.5, 25.5\n    context.lineTo 37.5, 32.5\n    context.lineTo 42.5, 4.5\n    context.closePath()\n    context.fillStyle = color\n    context.fill()\n    context.strokeStyle = blackColor\n    context.lineWidth = 1\n    context.stroke()\n\n\n';
