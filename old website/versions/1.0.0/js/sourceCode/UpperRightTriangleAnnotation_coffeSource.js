// Generated by CoffeeScript 1.10.0
window.UpperRightTriangleAnnotation_coffeSource = '# UpperRightTriangleAnnotation ////////////////////////////////////////////////////////\n\n# like an UpperRightTriangle, but it adds an icon on the top-right\n# note that this should all be done with actual layouts but this\n# will do for the moment.\n\n# this comment below is needed to figure out dependencies between classes\n# REQUIRES globalFunctions\n#\n# to test this:\n# create a canvas. then:\n# new UpperRightTriangleAnnotation(world.children[0])\n\nclass UpperRightTriangleAnnotation extends UpperRightTriangle\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  pencilIconMorph = null\n\n  constructor: (parent = null) ->\n    super\n    @pencilIconMorph = new PencilIconMorph new Color 0,0,0\n\n    @pencilIconMorph.parentHasReLayouted = ->\n      @updateResizerPosition()\n      @moveInFrontOfSiblings()\n\n    @pencilIconMorph.updateResizerPosition = ->\n      if @parent\n        @silentUpdateResizerPosition()\n        @changed()\n\n    @pencilIconMorph.silentUpdateResizerPosition = ->\n      if @parent\n        xDim = @parent.width()\n        yDim = @parent.height()\n        minDim = Math.min(xDim, yDim) / 2\n\n        @silentRawSetExtent new Point minDim, minDim\n        @silentFullRawMoveTo new Point @parent.right() - minDim, @parent.top()\n\n    @pencilIconMorph.isFloatDraggable = ->\n      if @parent?\n\n        # an instance of ScrollFrameMorph is also an instance of FrameMorph\n        # so gotta do this check first ahead of next paragraph.\n        #if @parentThatIsA(ScrollFrameMorph)?\n        #  return false\n\n        if @parent instanceof WorldMorph\n          return true\n      return false\n\n    @add @pencilIconMorph\n    @pencilIconMorph.updateResizerPosition()\n\n\n  parentHasReLayouted: ->\n    @updateResizerPosition()\n    @moveInFrontOfSiblings()\n    super\n\n  updateResizerPosition: ->\n    if @parent\n      @silentUpdateResizerPosition()\n      @changed()\n\n  silentUpdateResizerPosition: ->\n    if @parent\n      xDim = @parent.width()\n      yDim = @parent.height()\n      minDim = Math.min(xDim, yDim) * 4/8\n\n      @silentRawSetExtent new Point minDim, minDim\n      @silentFullRawMoveTo new Point @parent.right() - minDim, @parent.top()\n  \n';
