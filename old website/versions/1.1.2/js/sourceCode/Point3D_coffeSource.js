// Generated by CoffeeScript 1.12.7
window.Point3D_coffeSource = '# REQUIRES DeepCopierMixin\n\n# adapted from thomasdarimont/spinning-cube.html\n# https://gist.github.com/thomasdarimont/8c694b4522c6cb10d85c\n\nclass Point3D\n\n  @augmentWith DeepCopierMixin\n\n  x: nil\n  y: nil\n  z: nil\n\n  constructor: (@x = 0, @y = 0, @z = 0) ->\n\n  # the order of the rotations does matter\n  # and there is no reason to assume\n  # a specific order, so we leave the\n  # three rotations separate\n\n  rotateX: (angle) ->\n    rad = angle * Math.PI / 180\n    cosa = Math.cos rad\n    sina = Math.sin rad\n    y = @y * cosa - @z * sina\n    z = @y * sina + @z * cosa\n    new @constructor @x, y, z\n\n  rotateY: (angle) ->\n    rad = angle * Math.PI / 180\n    cosa = Math.cos rad\n    sina = Math.sin rad\n    z = @z * cosa - @x * sina\n    x = @z * sina + @x * cosa\n    new @constructor x, @y, z\n\n  rotateZ: (angle) ->\n    rad = angle * Math.PI / 180\n    cosa = Math.cos rad\n    sina = Math.sin rad\n    x = @x * cosa - @y * sina\n    y = @x * sina + @y * cosa\n    new @constructor x, y, @z\n\n  # the order of the translations doesn\'t matter\n  # so one can do them all together\n\n  translateXYZ: (dx,dy,dz) ->\n    new @constructor @x+dx, @y+dy, @z+dz\n\n  project: (viewWidth, viewHeight, fieldOfView, viewDistance) ->\n    factor = fieldOfView / (viewDistance + @z)\n    x = @x * factor + viewWidth / 2\n    y = @y * factor + viewHeight / 2\n    new Point x, y\n';
