// Generated by CoffeeScript 1.12.7
window.ToolTipWdgt_coffeSource = '# when invoked using...\n#    createInAWhileIfHandStillContainedInMorph / openAt\n#	... I can temporarily display any widget.\n# (is you just use the default constructor it will just sit there\n# and basically _not_ behave like a tool tip)\n# Note that I\'m not a PopUp, for example I can\'t be pinned.\n# I\'m always attached to the world, without any layout constraints.\n\nclass ToolTipWdgt extends Widget\n\n  @ongoingTimeouts: []\n\n  contents: nil\n  padding: nil # additional vertical pixels\n  morphInvokingThis: nil\n\n  constructor: (\n   @contents="text here",\n   @morphInvokingThis,\n   @color = WorldMorph.preferencesAndSettings.menuBackgroundColor,\n   cornerRadius,\n   @padding = 0) ->\n    debugger\n    # console.log "bubble super"\n    super()\n    @strokeColor = WorldMorph.preferencesAndSettings.menuStrokeColor\n    @cornerRadius = cornerRadius or 6\n    @appearance = new BubblyAppearance @\n    # console.log @color\n  \n  @createBubbleHelpIfHandStillOnMorph: (contents, morphInvokingThis) ->\n    # console.log "bubble createBubbleHelpIfHandStillOnMorph"\n    # let\'s check that the item that the\n    # bubble is about is still actually there\n    # and the mouse is still over it, otherwise\n    # do nothing.\n    if morphInvokingThis.root() == world and morphInvokingThis.boundsContainPoint world.hand.position()\n      theBubble = new @ contents, morphInvokingThis\n      theBubble.openAt morphInvokingThis.topRight()\n\n  @cancelAllScheduledToolTips: ->\n    for eachTimeout in @ongoingTimeouts\n      clearTimeout eachTimeout\n    @eachTimeout = []\n\n  @createInAWhileIfHandStillContainedInMorph: (morphInvokingThis, contents, delay = 500) ->\n    # console.log "bubble createInAWhileIfHandStillContainedInMorph"\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.animationsPacingControl and\n     AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE\n        @createBubbleHelpIfHandStillOnMorph contents, morphInvokingThis\n    else\n      @ongoingTimeouts.push setTimeout (=>\n        @createBubbleHelpIfHandStillOnMorph contents, morphInvokingThis\n        )\n        , delay\n  \n  # ToolTipWdgt invoking:\n  openAt: (pos) ->\n    @buildAndConnectChildren()\n    @fullRawMoveTo pos.subtract new Point 8, @height()\n    @fullRawMoveWithin world\n    world.add @\n    @addShadow()\n    @fullChanged()\n    world.hand.destroyToolTips()\n    world.hand.toolTipsList.push @\n    \n  buildAndConnectChildren: ->\n    # console.log "bubble buildAndConnectChildren"\n    # re-build my contents\n    if @contentsMorph\n      @contentsMorph = @contentsMorph.destroy()\n    if @contents instanceof Widget\n      @contentsMorph = @contents\n    else if isString @contents\n      @contentsMorph = new TextMorph(\n        @contents,\n        WorldMorph.preferencesAndSettings.bubbleHelpFontSize,\n        nil,\n        false,\n        true,\n        "center")\n    else if @contents instanceof HTMLCanvasElement\n      @contentsMorph = new Widget()\n      @contentsMorph.silentRawSetWidth @contents.width\n      @contentsMorph.silentRawSetHeight @contents.height\n      @contentsMorph.backBuffer = @contents\n      @contentsMorph.backBufferContext = @contentsMorph.backBuffer.getContext "2d"\n    else\n      @contentsMorph = new TextMorph(\n        @contents.toString(),\n        WorldMorph.preferencesAndSettings.bubbleHelpFontSize,\n        nil,\n        false,\n        true,\n        "center")\n    @add @contentsMorph\n\n    # adjust my layout\n    @silentRawSetWidth @contentsMorph.width() + ((if @padding then @padding * 2 else @cornerRadius * 2))\n    @silentRawSetHeight @contentsMorph.height() + @cornerRadius + @padding * 2 + 2\n\n    # position my contents\n    @contentsMorph.fullRawMoveTo @position().add(\n      new Point(@padding or @cornerRadius, @padding + 1))\n\n\n';
