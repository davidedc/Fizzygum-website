// Generated by CoffeeScript 1.12.7
window.ClassInspectorMorph_coffeSource = 'class ClassInspectorMorph extends InspectorMorph2\n\n  notifyInstancesOfSourceChange: (propertiesArray)->\n    @target.constructor.class.notifyInstancesOfSourceChange propertiesArray\n\n  buildAndConnectChildren: ->\n    super\n    @lastLabelInHierarchy.setText "this class"\n    #@label.setText "class " + @target.constructor.name   \n\n  colloquialName: ->\n    "Class Inspector (" + @target.constructor.name.replace("Morph", "").replace("Wdgt", "") + ")"\n\n  layoutOwnPropsOnlyToggle: (height) ->\n\n\n    toggleBounds = new Rectangle new Point @left() + @externalPadding , height\n    toggleBounds = toggleBounds.setBoundsWidthAndHeight (new Point (@width() - 2*@externalPadding - 2*@internalPadding)/4,15).round()\n    @showMethodsToggle.doLayout toggleBounds\n\n    toggleBounds = new Rectangle new Point @showMethodsToggle.right() + @internalPadding, height\n    toggleBounds = toggleBounds.setBoundsWidthAndHeight (new Point (@width() - 2*@externalPadding - 2*@internalPadding)/4,15).round()\n    @showFieldsToggle.doLayout toggleBounds\n\n    toggleBounds = new Rectangle new Point @showFieldsToggle.right() + @internalPadding, height\n    toggleBounds = toggleBounds.setBoundsWidthAndHeight (new Point 2*(@width() - 2*@externalPadding - 2*@internalPadding)/4,15).round()\n    @showInheritedToggle.doLayout toggleBounds\n\n\n  buildAndConnectObjOwnPropsButton: ->\n\n  # TODO: when inspecting objects, we added the functionality to\n  # inject code in the objects themselves.\n  # We\'d have to do the same here, add a way to inject code in\n  # object classes.\n  save: ->\n    txt = @detail.contents.children[0].text.toString()\n    propertyName = @list.selected.labelString\n\n    # this.target[propertyName] = evaluate txt\n    @target.evaluateString "@" + propertyName + " = " + txt\n    # if we are saving a function, we\'d like to\n    # keep the source code so we can edit Coffeescript\n    # again.\n    if isFunction @target[propertyName]\n      @target[propertyName + "_source"] = txt\n    @notifyInstancesOfSourceChange([propertyName])\n\n    @detail.textWdgt.considerCurrentTextAsReferenceText()\n    @detail.checkIfTextContentWasModifiedFromTextAtStart()\n\n    # it\'s possible that the user might have fixed\n    # a "painting" error, so give another chance to all\n    # "banned" widgets (banned from repainting)\n    for eachWidget in world.widgetsGivingErrorWhileRepainting\n      eachWidget.show()\n    world.widgetsGivingErrorWhileRepainting = []\n';
