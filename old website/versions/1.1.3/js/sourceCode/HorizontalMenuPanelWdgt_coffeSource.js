// Generated by CoffeeScript 1.12.7
window.HorizontalMenuPanelWdgt_coffeSource = '\n# This is meant to be used as a horizontal menu bar at the top or\n# bottom of widgets. As such, it doesn\'t scroll its contents and\n# it just hides entries that are "beyond" its width, tough\n# luck for the content that doesn\'t fit...\n\nclass HorizontalMenuPanelWdgt extends PanelWdgt\n\n  # TODO pretty sure that we don\'t need numberOfIconsOnPanel\n  numberOfIconsOnPanel: 0\n  internalPadding: 5\n  thumbnailSize: 30\n\n  constructor: ->\n    super\n    @rawSetExtent new Point 300,15\n\n  add: (aMorph, position = nil, layoutSpec = LayoutSpec.ATTACHEDAS_FREEFLOATING, beingDropped, unused, positionOnScreen) ->\n\n    if (aMorph instanceof ModifiedTextTriangleAnnotationWdgt) or\n     (aMorph instanceof HandleMorph)\n      super\n    else\n      aMorph.isTemplate = true\n      if !aMorph.extentToGetWhenDraggedFromGlassBox?\n        aMorph.extentToGetWhenDraggedFromGlassBox = aMorph.extent()\n\n      if !(aMorph instanceof GlassBoxBottomWdgt)\n        glassBoxBottom = new GlassBoxBottomWdgt()\n        glassBoxBottom.add aMorph\n\n        if !aMorph.actionableAsThumbnail\n          glassBoxTop = new GlassBoxTopWdgt()\n          glassBoxBottom.add glassBoxTop\n          glassBoxTop.toolTipMessage = aMorph.toolTipMessage\n\n        glassBoxBottom.fullRawMoveTo @topLeft().add new Point @internalPadding, @internalPadding\n        if (aMorph instanceof MenuItemMorph)\n          aMorph.shrinkToTextSize()\n          glassBoxBottom.rawSetExtent new Point aMorph.width(), @thumbnailSize\n        else\n          glassBoxBottom.rawSetExtent new Point @thumbnailSize, @thumbnailSize\n        glassBoxBottom.reLayout()\n\n        aMorph = glassBoxBottom\n\n\n      childrenNotHandlesNorCarets = @children.filter (m) ->\n        !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n      foundDrop = false\n\n      if positionOnScreen? and childrenNotHandlesNorCarets.length > 0\n        positionNumberAmongSiblings = 0\n\n        for eachChild in childrenNotHandlesNorCarets\n          if eachChild.bounds.growBy(@internalPadding).containsPoint positionOnScreen\n            foundDrop = true\n            if eachChild.bounds.growBy(@internalPadding).rightHalf().containsPoint positionOnScreen\n              positionNumberAmongSiblings++\n            break\n          positionNumberAmongSiblings++\n      \n      if foundDrop\n        super aMorph, positionNumberAmongSiblings, layoutSpec, beingDropped\n      else\n        super aMorph, @numberOfIconsOnPanel, layoutSpec, beingDropped\n\n      @numberOfIconsOnPanel++\n      @reLayout()\n\n\n  rawSetExtent: (aPoint) ->\n    super\n    @reLayout()\n\n  reLayout: ->\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    childrenNotHandlesNorCarets = @children.filter (m) ->\n      !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n    widthOfContentsSoFar = @internalPadding\n    countOfItems = 0\n\n    for eachChild in childrenNotHandlesNorCarets\n      if widthOfContentsSoFar + @internalPadding  + eachChild.width() > @width()\n        break\n\n      widthOfContentsSoFar += @internalPadding  + eachChild.width()\n      countOfItems++\n\n    widthLayingDown = @internalPadding\n    for i in [0...countOfItems]\n      childrenNotHandlesNorCarets[i].unCollapse()\n      startingPoint = @position().add new Point (@width() - widthOfContentsSoFar)/2, 0\n      childrenNotHandlesNorCarets[i].fullRawMoveTo (startingPoint.add new Point widthLayingDown, (@height()-childrenNotHandlesNorCarets[i].height())/2).round()\n      widthLayingDown += childrenNotHandlesNorCarets[i].width() + @internalPadding\n\n    for i in [countOfItems...childrenNotHandlesNorCarets.length]\n      childrenNotHandlesNorCarets[i].collapse()\n\n    trackChanges.pop()\n    @fullChanged()\n\n';
