// Generated by CoffeeScript 1.12.7
window.PromptMorph_coffeSource = 'class PromptMorph extends MenuMorph\n\n  # pattern: all the children should be declared here\n  # the reason is that when you duplicate a morph\n  # , the duplicated morph needs to have the handles\n  # that will be duplicated. If you don\'t list them\n  # here, then they need to be initialised in the\n  # constructor. But actually they might not be\n  # initialised in the constructor if a "lazy initialisation"\n  # approach is taken. So it\'s good practice\n  # to list them here so they can be duplicated either way.\n  #feedback: nil\n  #choice: nil\n  #colorPalette: nil\n  #grayPalette: nil\n\n  tempPromptEntryField: nil\n\n  constructor: (morphOpeningThePopUp, @msg, @target, @callback, @defaultContents, @intendedWidth, @floorNum,\n    @ceilingNum, @isRounded) ->\n\n    isNumeric = true  if @ceilingNum\n    @tempPromptEntryField = new StringFieldMorph(\n      @defaultContents or "",\n      @intendedWidth or 100,\n      WorldMorph.preferencesAndSettings.prompterFontSize,\n      WorldMorph.preferencesAndSettings.prompterFontName,\n      false,\n      false,\n      isNumeric)\n\n    super morphOpeningThePopUp, false, @target, true, true, @msg or "", @tempPromptEntryField\n\n\n    @silentAdd @tempPromptEntryField\n    if @ceilingNum or WorldMorph.preferencesAndSettings.useSliderForInput\n      slider = new SliderMorph(\n        @floorNum or 0,\n        @ceilingNum,\n        parseFloat(@defaultContents),\n        Math.floor((@ceilingNum - @floorNum) / 4))\n      slider.alpha = 1\n      slider.color = new Color 225, 225, 225\n      slider.button.color = new Color 60,60,60\n      slider.button.highlightColor = slider.button.color.copy()\n      slider.button.highlightColor.b += 100\n      slider.button.pressColor = slider.button.color.copy()\n      slider.button.pressColor.b += 150\n      slider.silentRawSetHeight WorldMorph.preferencesAndSettings.prompterSliderSize\n      slider.target = @\n      slider.argumentToAction = @\n      slider.action = "reactToSliderAction"\n      @silentAdd slider\n    @addLine 2\n\n    @addMenuItem "Ok", true, @target, @callback\n    # we name the button "Close" instead of "Cancel"\n    # because we are not undoing any change we made\n    # that would be rather difficult in case of\n    # multiple prompts being pinned down and changing\n    # the property concurrently\n    @addMenuItem "Close", true, @, "close"\n\n    @reLayout()\n\n  reactToSliderAction: (num) ->\n    @tempPromptEntryField.changed()\n    @tempPromptEntryField.text.text = Math.round(num).toString()\n    @tempPromptEntryField.text.reLayout()\n    \n    @tempPromptEntryField.text.changed()\n    @tempPromptEntryField.text.edit()\n\n  reLayout: ->\n    super()\n    @buildSubmorphs()\n    @notifyChildrenThatParentHasReLayouted()\n\n  buildSubmorphs: ->\n\n  iHaveBeenAddedTo: (whereTo, beingDropped) ->\n  \n';
