// Generated by CoffeeScript 1.12.7
window.SimplePlainTextScrollPanelWdgt_coffeSource = '# this comment below is needed to figure out dependencies between classes\n# REQUIRES globalFunctions\n\n# The SimplePlainTextScrollPanelWdgt allows you show/edit ONE\n# text blurb only.\n# It doesn\'t allow you to view/edit multiple text blurbs or\n# other Widgets like the SimpleVerticalStackPanelWdgt/DocumentViewerOrEditor do.\n#\n# However, what the SimplePlainTextScrollPanelWdgt DOES\n# in respect to the SimpleVerticalStackPanelWdgt/DocumentViewerOrEditor is to\n# view/edit UNWRAPPED text, which is quite important for\n# code, since really code must have the option of an\n# unwrapped view.\n\nclass SimplePlainTextScrollPanelWdgt extends ScrollPanelWdgt\n\n  textWdgt: nil\n  modifiedTextTriangleAnnotation: nil\n  widgetToBeNotifiedOfTextModificationChange: nil\n\n  constructor: (\n    textAsString,\n    wraps,\n    padding\n    ) ->\n\n    super()\n    @takesOverAndCoalescesChildrensMenus = true\n    @disableDrops()\n    @contents.disableDrops()\n    @isTextLineWrapping = wraps\n    @color = new Color 255, 255, 255\n    @textWdgt = new SimplePlainTextWdgt(\n      textAsString,nil,nil,nil,nil,nil,new Color(230, 230, 130), 1)\n    @textWdgt.isEditable = true\n    if !wraps\n      @textWdgt.maxTextWidth = 0\n    @textWdgt.enableSelecting()\n    @setContents @textWdgt, padding\n    @textWdgt.lockToPanels()\n    \n\n  colloquialName: ->\n    return "text"\n\n  initialiseDefaultWindowContentLayoutSpec: ->\n    @layoutSpecDetails = new WindowContentLayoutSpec PreferredSize.DONT_MIND , PreferredSize.DONT_MIND, 1\n\n  checkIfTextContentWasModifiedFromTextAtStart: ->\n    @textWdgt.checkIfTextContentWasModifiedFromTextAtStart()\n\n  addModifiedContentIndicator: ->\n    @modifiedTextTriangleAnnotation = new ModifiedTextTriangleAnnotationWdgt @\n    @textWdgt.widgetToBeNotifiedOfTextModificationChange = @\n\n    # just because we add the modified content indicator it\n    # doesn\'t mean that we automatically "save" the content,\n    # so removing this.\n    # @textWdgt.considerCurrentTextAsReferenceText()\n\n    @textWdgt.checkIfTextContentWasModifiedFromTextAtStart()\n\n  textContentModified: ->\n    @modifiedTextTriangleAnnotation?.show()\n    @widgetToBeNotifiedOfTextModificationChange?.textContentModified()\n\n  textContentUnmodified: ->\n    @modifiedTextTriangleAnnotation?.hide()\n    @widgetToBeNotifiedOfTextModificationChange?.textContentUnmodified()\n';
