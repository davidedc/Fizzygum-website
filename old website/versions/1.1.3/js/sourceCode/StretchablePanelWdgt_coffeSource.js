// Generated by CoffeeScript 1.12.7
window.StretchablePanelWdgt_coffeSource = '# this is made to go inside the StretchablePanelContainer,\n# it probably makes no sense on its own\n\nclass StretchablePanelWdgt extends PanelWdgt\n\n  childRemoved: (child) ->\n    super\n    if @parent?.setRatio? and @parent.ratio?\n      childrenNotHandlesNorCarets = @children.filter (m) ->\n        !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n      if childrenNotHandlesNorCarets.length == 0\n        @parent.resetRatio()\n\n  childAdded: (child) ->\n    super\n    # only set ratio with the first added child\n    # the following ones don\'t change it\n    if @parent?.setRatio? and !@parent.ratio?\n      childrenNotHandlesNorCarets = @children.filter (m) ->\n        !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n      if childrenNotHandlesNorCarets.length != 0\n        @parent.setRatio @width() / @height()\n\n\n  rawSetExtent: (extent) ->\n    if extent.eq @extent()\n      return\n\n    super\n    @doLayout @bounds\n\n\n  doLayout: (newBoundsForThisLayout) ->\n    if !window.recalculatingLayouts\n      debugger\n\n    if !newBoundsForThisLayout?\n      if @desiredExtent?\n        newBoundsForThisLayout = @desiredExtent\n        @desiredExtent = nil\n      else\n        newBoundsForThisLayout = @extent()\n\n      if @desiredPosition?\n        newBoundsForThisLayout = (new Rectangle @desiredPosition).setBoundsWidthAndHeight newBoundsForThisLayout\n        @desiredPosition = nil\n      else\n        newBoundsForThisLayout = (new Rectangle @position()).setBoundsWidthAndHeight newBoundsForThisLayout\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    debugger\n\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    childrenNotHandlesNorCarets = @children.filter (m) ->\n      !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n    for eachChild in childrenNotHandlesNorCarets\n      eachChild.fullRawMoveInStretchablePanelToFractionalPosition newBoundsForThisLayout\n      eachChild.rawSetExtentToFractionalExtentInPaneUserHasSet newBoundsForThisLayout      \n\n    @rawSetBounds newBoundsForThisLayout\n\n\n\n\n    trackChanges.pop()\n    @fullChanged()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n  addMorphSpecificMenuEntries: (morphOpeningThePopUp, menu) ->\n    debugger\n    super\n\n    childrenNotHandlesNorCarets = @children.filter (m) ->\n      !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n    if childrenNotHandlesNorCarets? and childrenNotHandlesNorCarets.length > 0\n      menu.addLine()\n      if !@dragsDropsAndEditingEnabled\n        menu.addMenuItem "enable editing", true, @, "enableDragsDropsAndEditing", "lets you drag content in and out"\n      else\n        menu.addMenuItem "disable editing", true, @, "disableDragsDropsAndEditing", "prevents dragging content in and out"\n\n    menu.removeConsecutiveLines()\n\n  enableDragsDropsAndEditing: (triggeringWidget) ->\n    debugger\n    if !triggeringWidget? then triggeringWidget = @\n    if @dragsDropsAndEditingEnabled\n      return\n    @parent?.makePencilYellow?()\n    if @parent? and @parent != triggeringWidget and @parent instanceof StretchableWidgetContainerWdgt\n      @parent.enableDragsDropsAndEditing @\n    else\n      super @\n\n  disableDragsDropsAndEditing: (triggeringWidget) ->\n    debugger\n    if !triggeringWidget? then triggeringWidget = @\n    if !@dragsDropsAndEditingEnabled\n      return\n    @parent?.makePencilClear?()\n    if @parent? and @parent != triggeringWidget and @parent instanceof StretchableWidgetContainerWdgt\n      @parent.disableDragsDropsAndEditing @\n    else\n      super @\n';
