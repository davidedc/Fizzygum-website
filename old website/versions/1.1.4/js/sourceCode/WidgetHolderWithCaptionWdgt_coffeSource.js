// Generated by CoffeeScript 1.12.7
window.WidgetHolderWithCaptionWdgt_coffeSource = '# This is what typically people refer to as "icons", however that\'s not\n# quite precise. An icon is just a symbol, it doesn\'t have a caption per se.\n# This widget has a caption instead. Also, since it can hold any widget, the\n# final name is WidgetHolderWithCaptionWdgt.\n\nclass WidgetHolderWithCaptionWdgt extends Widget\n\n  labl: nil\n\n  constructor: (@labelContent, @icon) ->\n    super()\n    if !@icon?\n      @icon = new SimpleDropletWdgt "icon"\n    @rawSetExtent new Point 95, 95\n    @add @icon\n    @label = new StringMorph2 @labelContent, WorldMorph.preferencesAndSettings.shortcutsFontSize\n    @label.fittingSpecWhenBoundsTooLarge = FittingSpecTextInLargerBounds.SCALEUP\n    @label.color = new Color 255, 255, 255\n    @label.hasDarkOutline = true\n    @add @label, nil, nil, true\n    @label.alignCenter()\n    @label.alignMiddle()\n    @label.isEditable = true\n    # update layout\n    @invalidateLayout()\n\n\n  setColor: (theColor, ignored, connectionsCalculationToken, superCall) ->\n    if !superCall and connectionsCalculationToken == @connectionsCalculationToken then return else if !connectionsCalculationToken? then @connectionsCalculationToken = getRandomInt -20000, 20000 else @connectionsCalculationToken = connectionsCalculationToken\n\n    @icon.setColor theColor\n\n  widthWithoutSpacing: ->\n    Math.min @width(), @height()\n\n  rawResizeToWithoutSpacing: ->\n    @rawSetExtent new Point @widthWithoutSpacing(), @widthWithoutSpacing()\n    @invalidateLayout()\n\n  initialiseDefaultWindowContentLayoutSpec: ->\n    super\n    @layoutSpecDetails.canSetHeightFreely = false\n\n  rawSetWidthSizeHeightAccordingly: (newWidth) ->\n    @rawResizeToWithoutSpacing()\n    @rawSetExtent new Point newWidth, newWidth\n    @invalidateLayout()\n\n  doLayout: (newBoundsForThisLayout) ->\n    if !window.recalculatingLayouts\n      debugger\n\n    if !newBoundsForThisLayout?\n      if @desiredExtent?\n        newBoundsForThisLayout = @desiredExtent\n        @desiredExtent = nil\n      else\n        newBoundsForThisLayout = @extent()\n\n      if @desiredPosition?\n        newBoundsForThisLayout = (new Rectangle @desiredPosition).setBoundsWidthAndHeight newBoundsForThisLayout\n        @desiredPosition = nil\n      else\n        newBoundsForThisLayout = (new Rectangle @position()).setBoundsWidthAndHeight newBoundsForThisLayout\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    @rawSetBounds newBoundsForThisLayout\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    height = @height()\n    width = @width()\n\n    squareDim = Math.min width, height\n\n     # p0 is the origin, the origin being in the bottom-left corner\n    p0 = @topLeft()\n\n    # now the origin if on the left edge, in the middle height of the morph\n    p0 = p0.add new Point width/2, height/2\n    \n    # now the origin is in the middle height of the morph,\n    # on the left edge of the square incribed in the morph\n    p0 = p0.subtract new Point squareDim/2, squareDim/2\n\n    @icon.setExtent (new Point squareDim, squareDim*8/10).round()\n    @icon.fullRawMoveTo p0.round()\n    @label.setExtent (new Point squareDim, squareDim*2/10).round()\n    @label.fullRawMoveTo (p0.add new Point 0, squareDim*8/10).round()\n\n\n    trackChanges.pop()\n    @fullChanged()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()';
