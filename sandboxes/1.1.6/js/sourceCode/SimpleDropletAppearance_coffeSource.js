// Generated by CoffeeScript 1.12.7
window.SimpleDropletAppearance_coffeSource = 'class SimpleDropletAppearance extends RectangularAppearance\n\n  # the "alreadyUsingCanvasClipping" flag is needed because when\n  # drawing some fundamental shapes\n  # (read: plain simple rectangles) we "clip by hand" the rectangle\n  # (i.e. we clip the rectangle mathematically) rather\n  # than using the actual canvas clipping functionality\n  # (because we think it\'s just faster)\n  # So, since such "by hand" clipping might not be\n  # simple/feasible for arbitrary shapes, we pass here whether\n  # the canvas clipping is in use (in which case we don\'t need\n  # to do it here) or not (in which case we do need to do the\n  # additional canvas clipping)\n  #\n  # similarly, the "alreadyUsingCanvasScaling" flag is needed because when\n  # drawing some fundamental shapes\n  # (read: plain simple rectangles) we "scale by hand" the rectangle\n  # (i.e. we scale the rectangle mathematically) rather\n  # than using the actual canvas scaling functionality\n  # (because we think it\'s just faster)\n  # So, since such "by hand" scaling might not be\n  # simple/feasible for arbitrary shapes, we pass here whether\n  # the canvas scaling is in use (in which case we don\'t need\n  # to do it here) or not (in which case we do need to do the\n  # additional canvas scaling)\n\n  drawAdditionalPartsOnBaseShape: (alreadyUsingCanvasClipping, alreadyUsingCanvasScaling, appliedShadow, context, al, at, w, h) ->\n\n    # we refuse to paint the shadow of the plus sign\n    # in the middle of a black rectangle. Just, no.\n    if appliedShadow?\n      return\n\n    height = @morph.height()\n    width = @morph.width()\n\n    squareDim = Math.min width/2, height/2\n\n    # p0 is the origin, the origin being in the bottom-left corner\n    p0 = @morph.bottomLeft()\n\n    # now the origin if on the left edge, in the middle height of the morph\n    p0 = p0.subtract new Point 0, Math.ceil height/2\n    \n    # now the origin is in the middle height of the morph,\n    # on the left edge of the square incribed in the morph\n    p0 = p0.add new Point (width -  squareDim)/2, 0\n\n    \n    plusSignLeft = p0.add new Point Math.ceil(squareDim/15), 0\n    plusSignRight = p0.add new Point squareDim - Math.ceil(squareDim/15), 0\n    plusSignTop = p0.add new Point Math.ceil(squareDim/2), -Math.ceil(squareDim/3)\n    plusSignBottom = p0.add new Point Math.ceil(squareDim/2), Math.ceil(squareDim/3)\n\n    color = new Color 255, 255, 255\n\n    context.save()\n\n    context.lineWidth = 1\n    context.lineCap = "round"\n    context.strokeStyle = color.toString()\n\n\n    if !alreadyUsingCanvasClipping\n      context.clipToRectangle al,at,w,h\n\n    if !alreadyUsingCanvasScaling\n      context.scale pixelRatio, pixelRatio\n\n    context.beginPath()\n    context.moveTo 0.5 + plusSignLeft.x, 0.5 + plusSignLeft.y\n    context.lineTo 0.5 + plusSignRight.x, 0.5 + plusSignRight.y\n    context.moveTo 0.5 + plusSignTop.x, 0.5 + plusSignTop.y\n    context.lineTo 0.5 + plusSignBottom.x, 0.5 + plusSignBottom.y\n\n\n    context.closePath()\n    context.stroke()\n\n    context.restore()\n\n';
