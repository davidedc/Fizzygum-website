// Generated by CoffeeScript 1.12.7
window.SimpleLinkWdgt_coffeSource = 'class SimpleLinkWdgt extends Widget\n\n\n  tempPromptEntryField: nil\n  textMorph: nil\n\n  outputTextArea: nil\n  outputTextAreaText: nil\n\n  externalLinkIcon: nil\n\n  externalPadding: 5\n  # the internal padding is the space between the internal\n  # components. It doesn\'t necessarily need to be equal to the\n  # external padding\n  internalPadding: 5\n\n  descriptionString: nil\n  linkString: nil\n\n  constructor: (@descriptionString = "insert link caption here", @linkString = "http://www.google.com") ->\n    super new Point 405, 50\n    @buildAndConnectChildren()\n\n  colloquialName: ->\n    "Simple link"\n\n  buildAndConnectChildren: ->\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @tempPromptEntryField = new StringMorph2 @descriptionString\n    @tempPromptEntryField.isEditable = true\n    @tempPromptEntryField.fittingSpecWhenBoundsTooLarge = FittingSpecTextInLargerBounds.SCALEUP\n    @tempPromptEntryField.fittingSpecWhenBoundsTooSmall = FittingSpecTextInSmallerBounds.SCALEDOWN\n    @tempPromptEntryField.alignMiddle()\n    @tempPromptEntryField.alignRight()\n    @add @tempPromptEntryField\n\n    @outputTextArea = new StringMorph2 @linkString\n    @outputTextArea.isEditable = true\n    @outputTextArea.fittingSpecWhenBoundsTooLarge = FittingSpecTextInLargerBounds.SCALEUP\n    @outputTextArea.fittingSpecWhenBoundsTooSmall = FittingSpecTextInSmallerBounds.SCALEDOWN\n    @outputTextArea.alignMiddle()\n    @outputTextArea.alignRight()\n    @add @outputTextArea\n    @createLinkIcon()\n    @add @externalLinkIcon\n\n    @invalidateLayout()\n\n  createLinkIcon: ->\n    @externalLinkIcon = new ExternalLinkButtonWdgt()\n\n  rawSetExtent: (aPoint) ->\n    super\n    @invalidateLayout()\n\n  doLayout: (newBoundsForThisLayout) ->\n    #if !window.recalculatingLayouts\n    #  debugger\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    super\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    availableHeight = @height() - 2 * @externalPadding - @internalPadding\n    text1Height = Math.round availableHeight * 50/100\n    text2Height = availableHeight - text1Height - @externalPadding\n\n    squareSize = Math.min @width(), @height() - 2 * @externalPadding\n\n    if @tempPromptEntryField.parent == @\n      @tempPromptEntryField.fullRawMoveTo new Point @left() + @externalPadding, @top() + @externalPadding\n      @tempPromptEntryField.rawSetExtent new Point @width() - 2 * @externalPadding - @internalPadding - squareSize, text1Height\n\n    if @outputTextArea.parent == @\n      @outputTextArea.fullRawMoveTo new Point @left() + @externalPadding, @tempPromptEntryField.bottom() + @internalPadding\n      @outputTextArea.rawSetExtent new Point @width() - 2 * @externalPadding - @internalPadding - squareSize, text2Height\n\n    if @externalLinkIcon.parent == @\n      @externalLinkIcon.fullRawMoveTo new Point @right() - @externalPadding - squareSize, @top() + @externalPadding\n      @externalLinkIcon.rawSetExtent new Point squareSize, squareSize\n\n\n    trackChanges.pop()\n    @fullChanged()\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n';
