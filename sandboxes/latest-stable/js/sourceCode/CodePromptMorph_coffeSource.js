// Generated by CoffeeScript 1.12.7
window.CodePromptMorph_coffeSource = 'class CodePromptMorph extends Widget\n\n  tempPromptEntryField: nil\n  defaultContents: ""\n  textMorph: nil\n\n  cancelButton: nil\n  saveButton: nil\n  okButton: nil\n  saveTextWdgt: nil\n\n  # the external padding is the space between the edges\n  # of the container and all of its internals. The reason\n  # you often set this to zero is because windows already put\n  # contents inside themselves with a little padding, so this\n  # external padding is not needed. Useful to keep it\n  # separate and know that it\'s working though.\n  externalPadding: 0\n  # the internal padding is the space between the internal\n  # components. It doesn\'t necessarily need to be equal to the\n  # external padding\n  internalPadding: 5\n\n  constructor: (@msg, @target, @callback, @defaultContents) ->\n    super new Point 200,400\n    @buildAndConnectChildren()\n\n  colloquialName: ->\n    "Edit tool code"\n\n  buildAndConnectChildren: ->\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @tempPromptEntryField = new SimplePlainTextScrollPanelWdgt @defaultContents, false, 5\n    @tempPromptEntryField.disableDrops()\n    @tempPromptEntryField.contents.disableDrops()\n    @tempPromptEntryField.color = new Color 255, 255, 255\n    @tempPromptEntryField.addModifiedContentIndicator()\n\n    # register this wdgt as one to be notified when the text\n    # changes/unchanges from "reference" content\n    # so we can enable/disable the "save" button\n    @tempPromptEntryField.widgetToBeNotifiedOfTextModificationChange = @\n\n    @textMorph = @tempPromptEntryField.textWdgt\n    @textMorph.backgroundColor = new Color 0,0,0,0\n    @textMorph.setFontName nil, nil, @textMorph.monoFontStack\n    @textMorph.isEditable = true\n    @textMorph.enableSelecting()\n\n    @add @tempPromptEntryField\n\n    # buttons -------------------------------\n    @cancelButton = new SimpleButtonMorph true, @, "close", "cancel"\n    @add @cancelButton\n\n    \n    @saveTextWdgt = new StringMorph2 "save", WorldMorph.preferencesAndSettings.textInButtonsFontSize\n    @saveTextWdgt.alignCenter()\n    @saveButton = new SimpleButtonMorph true, @, "informTarget", @saveTextWdgt\n    @add @saveButton\n\n    @okButton = new SimpleButtonMorph true, @, "notifyTargetAndClose", "ok"\n    @add @okButton\n    # ---------------------------------------\n\n    # now that we added the buttons there is a "save" button\n    # to disable (because the reference text has not been\n    # changed yet), so trigger the content check now\n    @tempPromptEntryField.checkIfTextContentWasModifiedFromTextAtStart()\n\n    @invalidateLayout()\n\n  textContentModified: ->\n    @saveTextWdgt.setColor new Color 0,0,0\n\n  textContentUnmodified: ->\n    @saveTextWdgt.setColor new Color 200, 200, 200\n\n\n  informTarget: ->\n    @target[@callback].call @target, nil, @textMorph\n    @textMorph.considerCurrentTextAsReferenceText()\n    @tempPromptEntryField.checkIfTextContentWasModifiedFromTextAtStart()\n\n  notifyTargetAndClose: ->\n    @informTarget()\n    @close()\n\n  doLayout: (newBoundsForThisLayout) ->\n    #if !window.recalculatingLayouts\n    #  debugger\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    super\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    textHeight = @height() - 2 * @externalPadding - @internalPadding - 15\n    textBottom = @top() + @externalPadding + textHeight\n\n    if @tempPromptEntryField.parent == @\n      @tempPromptEntryField.fullRawMoveTo new Point @left() + @externalPadding, @top() + @externalPadding\n      @tempPromptEntryField.rawSetExtent new Point @width() - 2 * @externalPadding, textHeight\n\n\n    # buttons -------------------------------\n    \n\n    eachButtonWidth = (@width() - 2 * @externalPadding - 3 * @internalPadding - WorldMorph.preferencesAndSettings.handleSize) / 3\n\n    if @cancelButton.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding + 0*(eachButtonWidth + @internalPadding), textBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight eachButtonWidth, 15\n      @cancelButton.doLayout buttonBounds \n\n    if @saveButton.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding + 1*(eachButtonWidth + @internalPadding), textBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight eachButtonWidth, 15\n      @saveButton.doLayout buttonBounds \n\n    if @okButton.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding + 2*(eachButtonWidth + @internalPadding), textBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight eachButtonWidth, 15\n      @okButton.doLayout buttonBounds \n\n    # ----------------------------------------------\n\n\n    trackChanges.pop()\n    @fullChanged()\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n';
