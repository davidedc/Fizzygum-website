// Generated by CoffeeScript 1.12.7
window.ConsoleWdgt_coffeSource = 'class ConsoleWdgt extends Widget\n\n  tempPromptEntryField: nil\n  textMorph: nil\n\n  runSelectionButton: nil\n  runAllButton: nil\n\n  functionFromCompiledCode: nil\n\n  # the external padding is the space between the edges\n  # of the container and all of its internals. The reason\n  # you often set this to zero is because windows already put\n  # contents inside themselves with a little padding, so this\n  # external padding is not needed. Useful to keep it\n  # separate and know that it\'s working though.\n  externalPadding: 0\n  # the internal padding is the space between the internal\n  # components. It doesn\'t necessarily need to be equal to the\n  # external padding\n  internalPadding: 5\n\n  constructor: (@target) ->\n    super new Point 200,400\n    @buildAndConnectChildren()\n\n  colloquialName: ->\n    "Console for: " + @target.colloquialName().toLowerCase()\n\n  buildAndConnectChildren: ->\n    debugger\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @tempPromptEntryField = new SimplePlainTextScrollPanelWdgt "", false, 5\n    @tempPromptEntryField.disableDrops()\n    @tempPromptEntryField.contents.disableDrops()\n    @tempPromptEntryField.color = new Color 255, 255, 255\n\n    @textMorph = @tempPromptEntryField.textWdgt\n    @textMorph.backgroundColor = new Color 0,0,0,0\n    @textMorph.setFontName nil, nil, @textMorph.monoFontStack\n    @textMorph.isEditable = true\n    @textMorph.enableSelecting()\n\n    @add @tempPromptEntryField\n\n    # "do" buttons -------------------------------\n    # NOTE that you can also "doAll" or "doSelection" via\n    # the context menu entries in the text panel!\n    @runSelectionButton = new SimpleButtonMorph true, @, "doSelection", "run selection"\n    @runSelectionButton.editorContentPropertyChangerButton = true\n    @add @runSelectionButton\n\n    @runAllButton = new SimpleButtonMorph true, @, "doAll", "run all"\n    @add @runAllButton\n    # ---------------------------------------\n\n    @invalidateLayout()\n\n  doSelection: ->\n    debugger\n    savedScript = @textMorph.selection()\n    compiled = compileFGCode savedScript, true\n    functionFromCompiledCode = new Function compiled\n    functionFromCompiledCode?.call @target\n\n\n  doAll: ->\n    savedScript = @textMorph.text\n    compiled = compileFGCode savedScript, true\n    functionFromCompiledCode = new Function compiled\n    functionFromCompiledCode?.call @target\n\n  doLayout: (newBoundsForThisLayout) ->\n    if !window.recalculatingLayouts\n      debugger\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    super\n    debugger\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    textHeight = @height() - 2 * @externalPadding - @internalPadding - 15\n    textBottom = @top() + @externalPadding + textHeight\n    textWidth = @width() - 2 * @externalPadding\n    buttonsWidth = (textWidth - 2 * @internalPadding - WorldMorph.preferencesAndSettings.handleSize)/2\n\n    if @tempPromptEntryField.parent == @\n      @tempPromptEntryField.fullRawMoveTo new Point @left() + @externalPadding, @top() + @externalPadding\n      @tempPromptEntryField.rawSetExtent new Point textWidth, textHeight\n\n\n    # buttons -------------------------------\n    \n\n    if @runSelectionButton.parent == @\n      buttonBounds = new Rectangle new Point @left() + @externalPadding, textBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight buttonsWidth, 15\n      @runSelectionButton.doLayout buttonBounds \n\n    if @runAllButton.parent == @\n      buttonBounds = new Rectangle new Point buttonBounds.right() + @internalPadding, textBottom + @internalPadding\n      buttonBounds = buttonBounds.setBoundsWidthAndHeight buttonsWidth, 15\n      @runAllButton.doLayout buttonBounds \n\n\n    # ----------------------------------------------\n\n\n    trackChanges.pop()\n    @fullChanged()\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n';
