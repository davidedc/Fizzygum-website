// Generated by CoffeeScript 1.12.7
window.SimpleDocumentScrollPanelWdgt_coffeSource = '# this comment below is needed to figure out dependencies between classes\n# REQUIRES globalFunctions\n\n# this wraps the functionality of the\n# SimpleVerticalStackScrollPanelWdgt into something that has\n# a more human name. Also provides additional document-oriented\n# features such as for addind divider lines, bullets etc.\n\nclass SimpleDocumentScrollPanelWdgt extends SimpleVerticalStackScrollPanelWdgt\n\n  colloquialName: ->\n    "document"\n\n  getNormalParagraph: (text) ->\n    paragraph = new SimplePlainTextWdgt(\n      text,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    paragraph.isEditable = true\n    paragraph.enableSelecting()\n    return paragraph\n\n  makeAllContentIntoTemplates: ->\n    childrenNotHandlesNorCarets = @contents.children.filter (m) ->\n      !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n    for eachChild in childrenNotHandlesNorCarets\n      eachChild.isTemplate = true\n\n  addNormalParagraph: (text) ->\n    paragraph = @getNormalParagraph text\n    @add paragraph\n    return paragraph\n\n  addDivider: ->\n    divider = @getNormalParagraph ""\n    divider.toggleHeaderLine()\n    @add divider\n    return divider\n\n  addIndentedText: (text)->\n    indentedText = @getNormalParagraph text\n    indentedText.rawSetExtent new Point Math.round(92*@width()/100), 335\n    @add indentedText\n    indentedText.layoutSpecDetails.setAlignmentToRight()\n    return indentedText\n\n  addBulletPoint: (text) ->\n    bulletPoint = @addIndentedText "â€¢ " + text\n    return bulletPoint\n\n  addCodeBlock: (text) ->\n    codeBlock = @addIndentedText "a code block with\\n  some example\\n    code in here"\n    codeBlock.setFontName nil, nil, codeBlock.monoFontStack\n    @add codeBlock\n    return codeBlock\n\n  addSpacer: (numberOfLines = 1) ->\n\n    # TODO it\'s 2018 now, if you see this in 2019\n    # consider replacing this with ES6 repeat() method\n    repeatStringNumTimes = (string, times) ->\n      repeatedString = \'\'\n      while times > 0\n        repeatedString += string\n        times--\n      repeatedString\n\n    spacer = @getNormalParagraph repeatStringNumTimes("\\n",numberOfLines-1)\n    spacer.isEditable = true\n    spacer.enableSelecting()\n    @add spacer\n    return spacer';
