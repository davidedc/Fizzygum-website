// Generated by CoffeeScript 1.12.7
window.SimpleDocumentWdgt_coffeSource = '# This simple-named widget is a user facing widget that\n# provides viewing and editing capabilities for "documents"...\n# where documents are stacks of items that must stay within\n# a certain width, but can stretch for any height.\n\nclass SimpleDocumentWdgt extends Widget\n\n\n  toolsPanel: nil\n  defaultContents: nil\n  textMorph: nil\n\n  simpleDocumentScrollPanel: nil\n  simpleDocumentScrollPanelText: nil\n\n  # the external padding is the space between the edges\n  # of the container and all of its internals. The reason\n  # you often set this to zero is because windows already put\n  # contents inside themselves with a little padding, so this\n  # external padding is not needed. Useful to keep it\n  # separate and know that it\'s working though.\n  externalPadding: 0\n  # the internal padding is the space between the internal\n  # components. It doesn\'t necessarily need to be equal to the\n  # external padding\n  internalPadding: 5\n\n  providesAmenitiesForEditing: true\n\n  startingText: "Your text here."\n\n\n  constructor: (@defaultContents = "") ->\n    super new Point 368, 335\n    @buildAndConnectChildren()\n\n  colloquialName: ->\n    "Docs Maker"\n\n  representativeIcon: ->\n    new TypewriterIconWdgt()\n\n  hasStartingContentBeenChangedByUser: ->\n    debugger\n    !(\n      @simpleDocumentScrollPanel.contents.children.length == 1 and\n      @simpleDocumentScrollPanel.contents.children[0] instanceof SimplePlainTextWdgt and\n      @simpleDocumentScrollPanel.contents.children[0].text == @startingText\n    )\n\n  closeFromContainerWindow: (containerWindow) ->\n\n    if !@hasStartingContentBeenChangedByUser() and !world.anyReferenceToWdgt containerWindow\n      # there is no real contents to save\n      containerWindow.fullDestroy()\n    else if !world.anyReferenceToWdgt containerWindow\n      prompt = new SaveShortcutPromptWdgt @, containerWindow\n      prompt.popUpAtHand()\n    else\n      containerWindow.close()\n\n\n  buildAndConnectChildren: ->\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n\n    @createToolsPanel()\n    @simpleDocumentScrollPanel = new SimpleDocumentScrollPanelWdgt()\n\n    startingContent = new SimplePlainTextWdgt(\n      @startingText,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    @simpleDocumentScrollPanel.setContents startingContent, 5\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n\n    @add @simpleDocumentScrollPanel\n\n    @invalidateLayout()\n\n  createToolsPanel: ->\n    @toolsPanel = new HorizontalMenuPanelWdgt()\n    @toolsPanel.strokeColor = nil\n    @toolsPanel.rawSetExtent new Point 300,10\n\n\n    @toolsPanel.add new ChangeFontButtonWdgt @\n    @toolsPanel.add new BoldButtonWdgt()\n    @toolsPanel.add new ItalicButtonWdgt()\n    @toolsPanel.add new FormatAsCodeButtonWdgt()\n    @toolsPanel.add new IncreaseFontSizeButtonWdgt()\n    @toolsPanel.add new DecreaseFontSizeButtonWdgt()\n\n    @toolsPanel.add new AlignLeftButtonWdgt()\n    @toolsPanel.add new AlignCenterButtonWdgt()\n    @toolsPanel.add new AlignRightButtonWdgt()\n\n    @toolsPanel.add new TemplatesButtonWdgt()\n\n    @add @toolsPanel\n    @toolsPanel.disableDragsDropsAndEditing()\n\n    @dragsDropsAndEditingEnabled = true\n    @invalidateLayout()\n\n  editButtonPressedFromWindowBar: ->\n    if @dragsDropsAndEditingEnabled\n      @disableDragsDropsAndEditing @\n    else\n      @enableDragsDropsAndEditing @\n\n  enableDragsDropsAndEditing: (triggeringWidget) ->\n    if !triggeringWidget? then triggeringWidget = @\n    if @dragsDropsAndEditingEnabled\n      return\n    @parent?.makePencilYellow?()\n    @dragsDropsAndEditingEnabled = true\n    @createToolsPanel()\n    @simpleDocumentScrollPanel.enableDragsDropsAndEditing @\n\n  disableDragsDropsAndEditing: (triggeringWidget) ->\n    if !triggeringWidget? then triggeringWidget = @\n    if !@dragsDropsAndEditingEnabled\n      return\n    @parent?.makePencilClear?()\n    @toolsPanel.destroy()\n    @toolsPanel = nil\n    @dragsDropsAndEditingEnabled = false\n    @simpleDocumentScrollPanel.disableDragsDropsAndEditing @\n    @invalidateLayout()\n\n  doLayout: (newBoundsForThisLayout) ->\n    if !window.recalculatingLayouts\n      debugger\n\n    if @isCollapsed()\n      @layoutIsValid = true\n      @notifyChildrenThatParentHasReLayouted()\n      return\n\n    super\n    debugger\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    availableHeight = @height() - 2 * @externalPadding\n    simpleDocumentScrollPanelTop = @top() + @externalPadding\n    toolsPanelHeight = 0\n\n    if @dragsDropsAndEditingEnabled\n      toolsPanelHeight = 35\n      availableHeight -= @internalPadding\n      simpleDocumentScrollPanelTop += toolsPanelHeight + @internalPadding\n\n    simpleDocumentScrollPanelHeight = availableHeight - toolsPanelHeight\n\n\n    if @toolsPanel?.parent == @\n      @toolsPanel.fullRawMoveTo new Point @left() + @externalPadding, @top() + @externalPadding\n      @toolsPanel.rawSetExtent new Point @width() - 2 * @externalPadding, toolsPanelHeight\n\n    if @simpleDocumentScrollPanel.parent == @\n      @simpleDocumentScrollPanel.fullRawMoveTo new Point @left() + @externalPadding, simpleDocumentScrollPanelTop\n      @simpleDocumentScrollPanel.rawSetExtent new Point @width() - 2 * @externalPadding, simpleDocumentScrollPanelHeight\n\n\n    trackChanges.pop()\n    @fullChanged()\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n  # same as simpledocumentscrollpanel, you can lock the contents.\n  # worth factoring it out as a mixin?\n  addMorphSpecificMenuEntries: (morphOpeningThePopUp, menu) ->\n    super\n\n    childrenNotHandlesNorCarets = @children.filter (m) ->\n      !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n    if childrenNotHandlesNorCarets? and childrenNotHandlesNorCarets.length > 0\n      menu.addLine()\n      if !@dragsDropsAndEditingEnabled\n        menu.addMenuItem "enable editing", true, @, "enableDragsDropsAndEditing", "lets you drag content in and out"\n      else\n        menu.addMenuItem "disable editing", true, @, "disableDragsDropsAndEditing", "prevents dragging content in and out"\n\n    menu.removeConsecutiveLines()\n\n';
