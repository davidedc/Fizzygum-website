// Generated by CoffeeScript 1.12.7
window.UpperRightInternalHaloMixin_coffeSource = '# these comments below needed to figure out dependencies between classes\n# REQUIRES globalFunctions\n\nUpperRightInternalHaloMixin =\n  # class properties here:\n  # none\n\n  # instance properties to follow:\n  onceAddedClassProperties: (fromClass) ->\n    @addInstanceProperties fromClass,\n\n      # floatDragging and dropping:\n      isLockingToPanels: false\n      proportionOfParent: 4/8\n      fixedSize: 0\n      positionWithinParent: "topRight"\n\n      parentHasReLayouted: ->\n        @updateResizerPosition()\n        @moveInFrontOfSiblings()\n        super\n\n      updateResizerPosition: ->\n        if @parent\n          @silentUpdateResizerPosition()\n          @changed()\n\n      silentUpdateResizerPosition: ->\n        if @parent\n          xDim = @parent.width()\n          yDim = @parent.height()\n          minDim = Math.min(xDim, yDim) * @proportionOfParent + @fixedSize\n\n          @silentRawSetExtent new Point minDim, minDim\n          if @positionWithinParent == "topLeft"\n            @silentFullRawMoveTo new Point @parent.left(), @parent.top()\n          else if @positionWithinParent == "topRight"\n            @silentFullRawMoveTo new Point @parent.right() - minDim, @parent.top()\n  \n      makeSolidWithParentMorph: (ignored, ignored2, morphAttachedTo)->\n        morphAttachedTo.add @\n        @updateResizerPosition()\n        @noticesTransparentClick = true\n\n        \n      # menu:\n      attach: ->\n        choices = world.plausibleTargetAndDestinationMorphs @\n        menu = new MenuMorph @, false, @, true, true, "choose parent:"\n        if choices.length > 0\n          choices.forEach (each) =>\n            menu.addMenuItem each.toString().slice(0, 50) + " âžœ", true, @, \'makeSolidWithParentMorph\', nil, nil, nil, nil, nil, each, nil, true\n        else\n          # the ideal would be to not show the\n          # "attach" menu entry at all but for the\n          # time being it\'s quite costly to\n          # find the eligible morphs to attach\n          # to, so for now let\'s just calculate\n          # this list if the user invokes the\n          # command, and if there are no good\n          # morphs then show some kind of message.\n          menu = new MenuMorph @, false, @, true, true, "no morphs to attach to"\n        menu.popUpAtHand() if choices.length\n';
