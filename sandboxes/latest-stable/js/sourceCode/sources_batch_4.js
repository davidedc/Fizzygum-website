

window.MenuAppearance_coffeSource = "class MenuAppearance extends BoxyAppearance⤶  nothing: nil⤶⤶  ⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.MenuHeader_coffeSource = "class MenuHeader extends BoxMorph⤶⤶  text: nil⤶⤶  constructor: (textContents) ->⤶    super 3⤶    @color = WorldMorph.preferencesAndSettings.menuHeaderColor⤶⤶    @text = new TextMorph(⤶      textContents,⤶      @fontSize or WorldMorph.preferencesAndSettings.menuHeaderFontSize,⤶      WorldMorph.preferencesAndSettings.menuFontName,⤶      WorldMorph.preferencesAndSettings.menuHeaderBold,⤶      false,⤶      ＂center＂)⤶    @text.alignment = ＂center＂⤶    @text.color = new Color 255, 255, 255⤶    @text.backgroundColor = @color.copy()⤶⤶    @add @text⤶    @rawSetExtent @text.extent().add 2⤶⤶  rawSetWidth: (theWidth) ->⤶    super⤶    @text.fullRawMoveTo @center().subtract @text.extent().floorDivideBy 2⤶⤶  mouseClickLeft: ->⤶    super⤶    if @parent?⤶      @firstParentThatIsAPopUp()?.pinPopUp @⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.MenuItemMorph_coffeSource = "# I automatically determine my bounds⤶⤶class MenuItemMorph extends TriggerMorph⤶⤶  # labelString can also be a Widget or a Canvas or a tuple: [icon, string]⤶  constructor: (ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, target, action, labelString, fontSize, fontStyle, centered, environment, morphEnv, toolTipMessage, color, bold, italic, doubleClickAction, argumentToAction1, argumentToAction2, representsAMorph) ->⤶    #console.log ＂menuitem constructing＂⤶    super ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, target, action, labelString, fontSize, fontStyle, centered, environment, morphEnv, toolTipMessage, color, bold, italic, doubleClickAction, argumentToAction1, argumentToAction2, representsAMorph ⤶    @actionableAsThumbnail = true⤶⤶  getTextDescription: ->⤶    if @textDescription?⤶      return @textDescription + ＂ (adhoc description of menu item)＂⤶    if @labelString⤶      textWithoutLocationOrInstanceNo = @labelString.replace /#⧹d*/, ＂＂⤶      return textWithoutLocationOrInstanceNo + ＂ (text in button)＂⤶    else⤶      return super()⤶  ⤶  # in theory this would be the right thing to do⤶  # but a bunch of tests break and it's not worth it⤶  # as we are going to remake the whole layout system anyways⤶  #reLayout: ->⤶  #  @label.setExtent @extent().subtract (@label.bounds.origin.subtract @.bounds.origin)⤶⤶  isTicked: ->⤶    @label.text.isTicked()⤶⤶  toggleTick: ->⤶    if @label.text.isTicked()⤶      @label.text = @label.text.toggleTick()⤶      @label.reLayout()⤶      @label.changed()⤶    else if @label.text.isUnticked()⤶      @label.text = @label.text.toggleTick()⤶      @label.reLayout()⤶      @label.changed()⤶⤶⤶  createLabel: ->⤶    # console.log ＂menuitem createLabel＂⤶    if isString @labelString⤶      @label = @createLabelString @labelString⤶    else if @labelString instanceof Array      ⤶      # assume its pattern is: [icon, string] ⤶      @label = new Widget⤶      @label.alpha = 0 # transparent⤶⤶      icon = @createIcon @labelString[0]⤶      @label.add icon⤶      lbl = @createLabelString @labelString[1]⤶      @label.add lbl⤶⤶      lbl.fullRawMoveCenterTo icon.center()⤶      lbl.fullRawMoveLeftSideTo icon.right() + 4⤶      @label.rawSetBounds icon.boundingBox().merge lbl.boundingBox()⤶    else # assume it's either a Widget or a Canvas⤶      @label = @createIcon @labelString⤶⤶    @add @label⤶  ⤶    w = @width()⤶    @silentRawSetExtent @label.extent().add new Point 8, 0⤶    @silentRawSetWidth w⤶    np = @position().add new Point 4, 0⤶    @label.silentFullRawMoveTo np⤶  ⤶⤶  createIcon: (source) ->⤶    # source can be either a Widget or an HTMLCanvasElement⤶    icon = new Widget⤶    icon.backBuffer = (if source instanceof Widget then source.fullImage() else source)⤶    icon.backBufferContext = icon.backBuffer.getContext ＂2d＂⤶⤶    # adjust shadow dimensions⤶    if source instanceof Widget and source.hasShadow()⤶      src = icon.backBuffer⤶      icon.backBuffer = newCanvas(⤶        source.fullBounds().extent().subtract(⤶          @shadowBlur * 2).scaleBy ceilPixelRatio)⤶      icon.backBufferContext = icon.backBuffer.getContext ＂2d＂⤶      icon.backBufferContext.drawImage src, 0, 0⤶⤶    icon.silentRawSetWidth icon.backBuffer.width⤶    icon.silentRawSetHeight icon.backBuffer.height⤶    icon⤶⤶  createLabelString: (string) ->⤶    # console.log ＂menuitem createLabelString＂⤶    lbl = new TextMorph string, @fontSize, @fontStyle⤶    lbl.setColor @labelColor⤶    lbl  ⤶⤶  shrinkToTextSize: ->⤶    # '5' is to add some padding between⤶    # the text and the button edge⤶    @rawSetWidth @widthOfLabel() + 5⤶⤶  widthOfLabel: ->⤶    @label.width()⤶⤶  # MenuItemMorph events:⤶  mouseEnter: ->⤶    #console.log ＂@target: ＂ + @target + ＂ @morphEnv: ＂ + @morphEnv⤶    ⤶    # this could be a way to catch menu entries that should cause⤶    # an highlighting but don't⤶    #if @labelString.startsWith(＂a ＂) and !@representsAMorph⤶    #  debugger⤶⤶    if @representsAMorph⤶      if @argumentToAction1?⤶        # this first case handles when you pick a morph⤶        # as a target⤶        morphToBeHighlighted = @argumentToAction1⤶      else⤶        # this second case handles when you attach to a morph⤶        morphToBeHighlighted = @target⤶      morphToBeHighlighted.turnOnHighlight()⤶    unless @isListItem()⤶      @state = @STATE_HIGHLIGHTED⤶      @changed()⤶    if @toolTipMessage⤶      @startCountdownForBubbleHelp @toolTipMessage⤶  ⤶  mouseLeave: ->⤶    if @representsAMorph⤶      if @argumentToAction1?⤶        # this first case handles when you pick a morph⤶        # as a target⤶        morphToBeHighlighted = @argumentToAction1⤶      else⤶        # this second case handles when you attach to a morph⤶        morphToBeHighlighted = @target⤶      morphToBeHighlighted.turnOffHighlight()⤶    unless @isListItem()⤶      @state = @STATE_NORMAL⤶      @changed()⤶    world.destroyToolTips()  if @toolTipMessage⤶  ⤶  mouseDownLeft: (pos) ->⤶    if @isListItem()⤶      @parent.unselectAllItems()⤶      @escalateEvent ＂mouseDownLeft＂, pos⤶    @state = @STATE_PRESSED⤶    @changed()⤶    super⤶  ⤶  isListItem: ->⤶    return @parent.isListContents  if @parent⤶    false⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.MenuMorph_coffeSource = "# MenuMorphs is a Pop-up with basically a vertical stack of buttons⤶⤶class MenuMorph extends PopUpWdgt⤶⤶  target: nil⤶  title: nil⤶  environment: nil⤶  fontSize: nil⤶  label: nil⤶  isListContents: false⤶⤶  constructor: (@morphOpeningThePopUp, @isListContents = false, @target, @killThisPopUpIfClickOutsideDescendants = true, @killThisPopUpIfClickOnDescendantsTriggers = true, @title = nil, @environment = nil, @fontSize = nil) ->⤶    # console.log ＂menu constructor＂⤶    # console.log ＂menu super＂⤶    if Automator? and Automator.state != Automator.IDLE and Automator.alignmentOfMorphIDsMechanism⤶      world.alignIDsOfNextMorphsInSystemTests()⤶    if !@isListContents⤶      if @killThisPopUpIfClickOutsideDescendants⤶        @onClickOutsideMeOrAnyOfMyChildren ＂close＂⤶    super @morphOpeningThePopUp, @killThisPopUpIfClickOutsideDescendants, @killThisPopUpIfClickOnDescendantsTriggers⤶    @isLockingToPanels = false⤶    @appearance = new MenuAppearance @⤶    @strokeColor = WorldMorph.preferencesAndSettings.menuStrokeColor⤶⤶⤶    if @isListContents⤶      world.freshlyCreatedPopUps.delete @⤶      world.openPopUps.delete @⤶    # important not to traverse all the children for stepping through, because⤶    # there could be a lot of entries for example in the inspector the number⤶    # of properties of an object - there could be a 100 of those and we don't⤶    # want to traverse them all. Setting step to nil (as opposed to nop)⤶    # achieves that.⤶⤶    unless @isListContents⤶      if @title⤶        @createLabel()⤶        @silentAdd @label⤶⤶  colloquialName: ->⤶    if @title⤶      return ＂⧹＂＂ + @title + ＂⧹＂ menu＂⤶    else⤶      return ＂menu＂⤶⤶  initialiseDefaultWindowContentLayoutSpec: ->⤶    @layoutSpecDetails = new WindowContentLayoutSpec PreferredSize.THIS_ONE_I_HAVE_NOW , PreferredSize.THIS_ONE_I_HAVE_NOW, 0⤶    @layoutSpecDetails.canSetHeightFreely = false⤶⤶⤶  createLine: (height = 1) ->⤶    item = new RectangleMorph⤶    item.setMinimumExtent new Point 5,1⤶    item.color = new Color 230,230,230⤶    item.rawSetHeight height + 2⤶    item⤶⤶  addLine: (height) ->⤶    item = @createLine height⤶    @silentAdd item⤶⤶  prependLine: (height) ->⤶    item = @createLine height⤶    @silentAdd item,nil,0⤶  ⤶  createLabel: ->⤶    @label = new MenuHeader @title⤶⤶  createMenuItem: (label, ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked = true, target, action, toolTipMessage, color, bold = false, italic = false,doubleClickAction, arg1, arg2,representsAMorph = false)->⤶    # console.log ＂menu creating MenuItemMorph ＂⤶    item = new MenuItemMorph(⤶      ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, # closes unpinned menus⤶      target, # target⤶      action, # action⤶      (label or ＂close＂), # label⤶      @fontSize or WorldMorph.preferencesAndSettings.menuFontSize,⤶      WorldMorph.preferencesAndSettings.menuFontName,⤶      false,⤶      @target, # environment⤶      @environment, # environment2⤶      toolTipMessage, # bubble help toolTipMessage⤶      color, # color⤶      bold, # bold⤶      italic, # italic⤶      doubleClickAction,  # doubleclick action⤶      arg1,  # argument to action 1⤶      arg2,  # argument to action 2⤶      representsAMorph  # does it represent a Widget?⤶      )⤶    if !@environment?⤶      item.dataSourceMorphForTarget = item⤶      item.morphEnv = @target⤶⤶    item⤶⤶  removeMenuItem: (label) ->⤶    item = @firstChildSuchThat (m) ->⤶      m.label? and m.label.text == label⤶    if item?⤶      item.fullDestroy()⤶⤶  removeConsecutiveLines: ->⤶    # have to copy the array with slice()⤶    # because we are removing items from it⤶    # while looping over it⤶    destroyNextLines = false⤶    for item in @children.slice()⤶      if destroyNextLines and item instanceof RectangleMorph⤶        item.fullDestroy()⤶      if item instanceof RectangleMorph⤶        destroyNextLines = true⤶        continue⤶      else⤶        destroyNextLines = false⤶⤶  addMenuItem: (label, ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, target, action, toolTipMessage, color, bold, italic,doubleClickAction, arg1, arg2,representsAMorph)->⤶    # console.log ＂menu creating MenuItemMorph ＂⤶    item = @createMenuItem label, ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, target, action, toolTipMessage, color, bold, italic,doubleClickAction, arg1, arg2,representsAMorph⤶    @silentAdd item⤶⤶  prependMenuItem: (label, ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, target, action, toolTipMessage, color, bold, italic,doubleClickAction, arg1, arg2,representsAMorph)->⤶    # console.log ＂menu creating MenuItemMorph ＂⤶    item = @createMenuItem label, ifInsidePopUpThenClosesUnpinnedPopUpsWhenClicked, target, action, toolTipMessage, color, bold, italic,doubleClickAction, arg1, arg2,representsAMorph⤶    @silentAdd item, nil, 0⤶⤶⤶⤶  reLayout: ->⤶    # console.log ＂menu update rendering＂⤶    super()⤶⤶    # no point in breaking a rectangle for each menu entry,⤶    # let's hold on the broken rects and then issue⤶    # a fullChanged() at the end.⤶    trackChanges.push false⤶⤶⤶    # we are going to re-build the⤶    # children list from the @items.⤶    # If the list of @items has changed, we⤶    # make sure we destroy the children that⤶    # are going away.⤶    #for w in @children⤶    #  if !@items.includes(w)⤶    #    w.fullDestroy()⤶⤶    #@children = []⤶⤶    unless @isListContents⤶      @cornerRadius = if WorldMorph.preferencesAndSettings.isFlat then 0 else 5⤶    @color = new Color 238, 238, 238⤶    @silentRawSetExtent new Point 0, 0⤶    y = @top()⤶    x = @left() + 2⤶    @notifyChildrenThatParentHasReLayouted()⤶⤶⤶    unless @isListContents⤶      if @title⤶        @label.fullRawMoveTo @position().add 2⤶        y = @label.bottom()⤶      else⤶        y = @top()⤶    y += 1⤶⤶    @removeShadow()⤶⤶    # note that menus can contain:⤶    # strings, colorpickers,⤶    # sliders, menuItems (which are buttons)⤶    # and divider lines.⤶    # console.log ＂menu @items.length ＂ + @items.length⤶    for item in @children⤶      if item == @label then continue⤶      item.fullRawMoveTo new Point x, y⤶      #console.log ＂item added: ＂ + item.bounds⤶      y = y + item.height()⤶  ⤶    @adjustWidthsOfMenuEntries()⤶    fb = @fullBounds()⤶    #console.log ＂fb: ＂ + fb⤶    # add some padding to the right and bottom of the menu⤶    @silentRawSetExtent fb.extent().add 2⤶    trackChanges.pop()⤶    @fullChanged()⤶  ⤶  maxWidthOfMenuEntries: ->⤶    w = 0⤶    #if @parent instanceof PanelWdgt⤶    #  if @parent.scrollPanel instanceof ScrollPanelWdgt⤶    #    w = @parent.scrollPanel.width()    ⤶    @children.forEach (item) ->⤶      if item instanceof MenuItemMorph⤶        if !item.children[0]? then debugger⤶        w = Math.max(w, item.children[0].width() + 8)⤶      else if (item instanceof StringFieldMorph) or⤶        (item instanceof ColorPickerMorph) or⤶        (item instanceof SliderMorph)⤶          w = Math.max w, item.width()⤶      #console.log ＂maxWidthOfMenuEntries: width of item ＂ + item + ＂ : ＂ + w⤶⤶    if @label⤶      w = Math.max w, @label.width()⤶      #console.log ＂maxWidthOfMenuEntries: label width : ＂ + w⤶    w⤶  ⤶  # makes all the elements of this menu the⤶  # right width.⤶  adjustWidthsOfMenuEntries: ->⤶    w = @maxWidthOfMenuEntries()⤶    #console.log ＂maxWidthOfMenuEntries ＂ + w⤶    @children.forEach (item) =>⤶      trackChanges.push false⤶      item.rawSetWidth w⤶      #console.log ＂new width of ＂ + item + ＂ : ＂ + item.width()⤶      trackChanges.pop()⤶⤶  ⤶  unselectAllItems: ->⤶    @children.forEach (item) ->⤶      if item instanceof MenuItemMorph⤶        item.state = item.STATE_NORMAL⤶⤶    @changed()⤶⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.MenusHelper_coffeSource = "# REQUIRES DeepCopierMixin⤶⤶# All ＂actions＂ functions for all accessory menu items should belong⤶# in here. Also helps so we don't pollute moprhs with a varying number⤶# of helper functions, which is problematic for visual diffing⤶# on inspectors (the number of methods keeps changing).⤶⤶class MenusHelper⤶⤶  @augmentWith DeepCopierMixin⤶⤶  popUpDevToolsMenu: (morphOpeningThePopUp, widgetThisMenuIsAbout) ->⤶    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, ＂Dev Tools＂⤶    menu.addMenuItem ＂inspect＂, true, widgetThisMenuIsAbout, ＂inspect2＂, ＂open a window⧹non all properties＂⤶    menu.addMenuItem ＂console＂, true, widgetThisMenuIsAbout, ＂createConsole＂, ＂console＂⤶⤶    menu.popUpAtHand()⤶⤶⤶⤶⤶⤶  basementIconAndText: ->⤶    world.add new BasementOpenerWdgt⤶⤶  newScriptWindow: ->⤶    scriptWdgt = new ScriptWdgt⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶  createFizzyPaintLauncher: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶      reconfPaint = new ReconfigurablePaintWdgt⤶      wm = new WindowWdgt nil, nil, reconfPaint⤶      wm.setExtent new Point 460, 400⤶      wm.fullRawMoveTo new Point 174, 114⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶⤶      menusHelper.createDrawingsMakerOneOffInfoWindowNextTo wm⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    fizzyPaintLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Draw＂, new PaintBucketIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add fizzyPaintLauncher⤶    fizzyPaintLauncher.setExtent new Point 75, 75⤶    fizzyPaintLauncher.fullChanged()⤶    return wm⤶⤶  createFizzyPaintLauncherAndItsIcon: ->⤶    wm = @createFizzyPaintLauncher()⤶    world.add wm⤶⤶  createSimpleDocumentLauncher: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶      reconfPaint = new SimpleDocumentWdgt⤶      wm = new WindowWdgt nil, nil, reconfPaint⤶      wm.setExtent new Point 370, 395⤶      wm.fullRawMoveTo new Point 170, 88⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶⤶      menusHelper.createDocsMakerOneOffInfoWindowNextTo wm⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    simpleDocumentLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Docs Maker＂, new TypewriterIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add simpleDocumentLauncher⤶    simpleDocumentLauncher.setExtent new Point 75, 75⤶    simpleDocumentLauncher.fullChanged()⤶    return wm⤶⤶  createSimpleDocumentLauncherAndItsIcon: ->⤶    wm = @createSimpleDocumentLauncher()⤶    world.add wm⤶⤶  createSimpleSlideLauncher: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶      reconfPaint = new SimpleSlideWdgt⤶      wm = new WindowWdgt nil, nil, reconfPaint⤶      wm.setExtent new Point 460, 400⤶      wm.fullRawMoveTo new Point 168, 134⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶ ⤶      menusHelper.createSlidesMakerOneOffInfoWindowNextTo wm⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    simpleSlideLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Slides Maker＂, new SimpleSlideIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add simpleSlideLauncher⤶    simpleSlideLauncher.setExtent new Point 75, 75⤶    simpleSlideLauncher.fullChanged()⤶    return wm⤶⤶  createSimpleSlideLauncherAndItsIcon: ->⤶    wm = @createSimpleSlideLauncher()⤶    world.add wm⤶⤶  createDashboardsLauncher: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶      reconfPaint = new DashboardsWdgt⤶      wm = new WindowWdgt nil, nil, reconfPaint⤶      wm.setExtent new Point 460, 400⤶      wm.fullRawMoveTo world.hand.position()⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶⤶      menusHelper.createDashboardsMakerOneOffInfoWindowNextTo wm⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    simpleDashboardsLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Dashboards＂, new DashboardsIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add simpleDashboardsLauncher⤶    simpleDashboardsLauncher.setExtent new Point 75, 75⤶    simpleDashboardsLauncher.fullChanged()⤶    return wm⤶⤶⤶  createPatchProgrammingLauncher: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶      patchProgramming = new PatchProgrammingWdgt⤶      wm = new WindowWdgt nil, nil, patchProgramming⤶      wm.setExtent new Point 460, 400⤶      wm.fullRawMoveTo world.hand.position()⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶      ⤶      menusHelper.createPatchProgrammingOneOffInfoWindowNextTo wm⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    patchProgrammingLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Patch progr.＂, new PatchProgrammingIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add patchProgrammingLauncher⤶    patchProgrammingLauncher.setExtent new Point 75, 75⤶    patchProgrammingLauncher.fullChanged()⤶    return wm⤶⤶  createGenericPanelLauncher: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶      genericPanel = new StretchableEditableWdgt⤶      wm = new WindowWdgt nil, nil, genericPanel⤶      wm.setExtent new Point 460, 400⤶      wm.fullRawMoveTo world.hand.position()⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶⤶      menusHelper.createGenericPanelOneOffInfoWindowNextTo wm⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    genericPanelLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Generic panel＂, new GenericPanelIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add genericPanelLauncher⤶    genericPanelLauncher.setExtent new Point 75, 75⤶    genericPanelLauncher.fullChanged()⤶    return wm⤶⤶  createToolbarsOpener: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶⤶      # tools -------------------------------⤶      toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶⤶      toolsPanel.addMany [⤶        new TextToolbarCreatorButtonWdgt⤶        new UsefulTextSnippetsToolbarCreatorButtonWdgt⤶        new SlidesToolbarCreatorButtonWdgt⤶        new PlotsToolbarCreatorButtonWdgt⤶        new PatchProgrammingComponentsToolbarCreatorButtonWdgt⤶        new WindowsToolbarCreatorButtonWdgt⤶      ]⤶⤶      toolsPanel.disableDragsDropsAndEditing()⤶⤶      wm = new WindowWdgt nil, nil, toolsPanel⤶      wm.setExtent new Point 60, 261⤶      wm.fullRawMoveTo new Point 170, 170⤶      wm.fullRawMoveWithin world⤶      world.add wm⤶      wm.changed()⤶⤶      menusHelper.createSuperToolbarOneOffInfoWindowNextTo wm⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    toolbarsOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂Super Toolbar＂, new ToolbarsIconWdgt⤶    toolbarsOpenerLauncher.toolTipMessage = ＂a toolbar to rule them all＂⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add toolbarsOpenerLauncher⤶    toolbarsOpenerLauncher.setExtent new Point 75, 75⤶    toolbarsOpenerLauncher.fullChanged()⤶    return wm⤶⤶  createNewTemplatesWindow: ->⤶    sdspw = new SimpleDocumentScrollPanelWdgt⤶⤶    sdspw.rawSetExtent new Point 365, 335⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Simply drag the items below into your document＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 18⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶⤶    sdspw.setContents startingContent, 5⤶⤶⤶    startingContent = new ArrowSIconWdgt⤶    startingContent.rawSetExtent new Point 25, 25⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    sdspw.addDivider()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Title＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontName nil, nil, startingContent.georgiaFontStack⤶    startingContent.setFontSize 48⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Section X＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleWeight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    startingContent.setFontSize 28⤶    sdspw.add startingContent⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Section X.X＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    startingContent.setFontSize 24⤶    sdspw.add startingContent⤶⤶    sdspw.addNormalParagraph ＂Normal text.＂⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂“Be careful--with quotations, you can damn anything.”⧹n― André Malraux＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleItalic()⤶    startingContent.alignRight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶⤶    sdspw.addIndentedText ＂indentedText＂⤶    sdspw.addBulletPoint ＂bullet point＂⤶    sdspw.addCodeBlock ＂a code block with⧹n  some example⧹n    code in here＂⤶⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Spacers:＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleWeight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addSpacer()⤶    sdspw.addSpacer 2⤶    sdspw.addSpacer 3⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Divider line:＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleWeight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Links:＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleWeight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    startingContent = new SimpleLinkWdgt⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    startingContent = new SimpleVideoLinkWdgt⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Useful characters:＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleWeight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶    # in March 2018, greek chars take a long time to paint on OSX/Chrome so⤶    # not adding those to the paragraph, however here they are:⤶    # αβγδεζηθικλμνξοπρστυφχψω ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ⤶    specialCharsParagraph = sdspw.addNormalParagraph ＂… †‡§ ↵⏎⇧␣ ☐☑☒✓X✗ •‣⁃◦ °±⁻¹²³µ×÷ℓΩ√∛∜∝∞∟∠∡∩∪∿≈⊂⋅⌀▫◽◻□⩽⩾ ¼½¾⅛⅜⅝⅞ ←↑→↓↔↕↵⇎⇏⇑⇒⇓⇔⇕ ©®™ $£€¥＂⤶    specialCharsParagraph.setFontSize 16⤶⤶⤶    sdspw.makeAllContentIntoTemplates()⤶⤶    wm = new WindowWdgt nil, nil, sdspw⤶    wm.setExtent new Point 370, 335⤶    wm.setTitleWithoutPrependedContentName ＂useful snippets＂⤶    wm.changed()⤶⤶    return wm⤶⤶⤶  createFanout: ->⤶    fanoutWdgt = new FanoutWdgt⤶    world.create fanoutWdgt⤶    fanoutWdgt.setExtent new Point 100, 100⤶⤶  createCalculatingPatchNode: ->⤶    calculatingPatchNodeWdgt = new CalculatingPatchNodeWdgt⤶    wm = new WindowWdgt nil, nil, calculatingPatchNodeWdgt, true⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶  createDiffingPatchNode: ->⤶    diffingPatchNodeWdgt = new DiffingPatchNodeWdgt⤶    wm = new WindowWdgt nil, nil, diffingPatchNodeWdgt, true⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶  createSliderWithSmallestValueAtBottomEnd: ->⤶    world.create new SliderMorph nil, nil, nil, nil, nil, true⤶⤶  createRegexSubstitutionPatchNodeWdgt: ->⤶    regexSubstitutionPatchNodeWdgt = new RegexSubstitutionPatchNodeWdgt⤶    wm = new WindowWdgt nil, nil, regexSubstitutionPatchNodeWdgt, true⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶  throwAnError: ->⤶    throw new Error ＂you manually threw an error!＂⤶⤶  createStretchablePanel: ->⤶    stretchablePanel = new StretchableWidgetContainerWdgt⤶    world.create stretchablePanel⤶    stretchablePanel.setExtent new Point 400, 300⤶⤶  createToolsPanel: ->⤶    toolPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶    wm = new WindowWdgt nil, nil, toolPanel, true⤶    wm.setExtent new Point 200, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶  createHorizontalMenuPanelPanel: ->⤶    horizontalMenuPanel = new HorizontalMenuPanelWdgt⤶    wm = new WindowWdgt nil, nil, horizontalMenuPanel, true⤶    wm.setExtent new Point 200, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶⤶⤶  createFizzygumLogoWithTextIconWdgt : ->⤶    world.create new FizzygumLogoWithTextIconWdgt⤶⤶  createVaporwaveBackgroundIconWdgt : ->⤶    world.create new VaporwaveBackgroundIconWdgt⤶⤶  createCFDegreesConverterIconWdgt : ->⤶    world.create new CFDegreesConverterIconWdgt⤶⤶  createFizzygumLogoIconWdgt : ->⤶    world.create new FizzygumLogoIconWdgt⤶⤶  createVaporwaveSunIconWdgt : ->⤶    world.create new VaporwaveSunIconWdgt⤶⤶  createLittleWorldIconWdgt : ->⤶    world.create new LittleWorldIconWdgt⤶⤶  createChangeFontIconWdgt : ->⤶    world.create new ChangeFontIconWdgt⤶⤶  createSimpleSlideIconWdgt : ->⤶    world.create new SimpleSlideIconWdgt⤶⤶  createTypewriterIconWdgt : ->⤶    world.create new TypewriterIconWdgt⤶⤶  createLittleUSAIconWdgt : ->⤶    world.create new LittleUSAIconWdgt⤶⤶  createMapPinIconWdgt : ->⤶    world.create new MapPinIconWdgt⤶⤶  createSaveIconWdgt : ->⤶    world.create new SaveIconWdgt⤶⤶⤶⤶⤶  createArrowEIconWdgt: ->⤶    world.create new ArrowEIconWdgt⤶⤶  createArrowNEIconWdgt: ->⤶    world.create new ArrowNEIconWdgt⤶⤶  createArrowNIconWdgt: ->⤶    world.create new ArrowNIconWdgt⤶⤶  createArrowNWIconWdgt: ->⤶    world.create new ArrowNWIconWdgt⤶⤶  createArrowSEIconWdgt: ->⤶    world.create new ArrowSEIconWdgt⤶⤶  createArrowSIconWdgt: ->⤶    world.create new ArrowSIconWdgt⤶⤶  createArrowSWIconWdgt: ->⤶    world.create new ArrowSWIconWdgt⤶⤶  createArrowWIconWdgt: ->⤶    world.create new ArrowWIconWdgt⤶⤶  createDecreaseFontSizeIconWdgt: ->⤶    world.create new DecreaseFontSizeIconWdgt⤶⤶  createExternalLinkIconWdgt: ->⤶    world.create new ExternalLinkIconWdgt⤶⤶  createIncreaseFontSizeIconWdgt: ->⤶    world.create new IncreaseFontSizeIconWdgt⤶⤶  createTemplatesIconWdgt: ->⤶    world.create new TemplatesIconWdgt⤶⤶  createFormatAsCodeIconWdgt: ->⤶    world.create new FormatAsCodeIconWdgt⤶⤶  createChXIconWdgt: ->⤶    world.create new ChapterXIconWdgt⤶⤶  createChXXIconWdgt: ->⤶    world.create new ChapterXXIconWdgt⤶⤶  createChXXXIconWdgt: ->⤶    world.create new ChapterXXXIconWdgt⤶⤶  createAlignRightIconWdgt: ->⤶    world.create new AlignRightIconWdgt⤶⤶  createAlignCenterIconWdgt: ->⤶    world.create new AlignCenterIconWdgt⤶⤶  createAlignLeftIconWdgt: ->⤶    world.create new AlignLeftIconWdgt⤶⤶  createWorldMapIconMorph: ->⤶    world.create new SimpleWorldMapIconWdgt⤶⤶  createUSAMapIconMorph: ->⤶    world.create new SimpleUSAMapIconWdgt⤶⤶  createBoldIconWdgt: ->⤶    world.create new BoldIconWdgt⤶⤶  createItalicIconWdgt: ->⤶    world.create new ItalicIconWdgt⤶⤶  createInformationIconWdgt: ->⤶    world.create new InformationIconWdgt⤶⤶  createTextboxIconWdgt: ->⤶    world.create new TextIconWdgt⤶⤶  createVideoPlayIconWdgt: ->⤶    world.create new VideoPlayIconWdgt⤶⤶  createSimpleDocumentWdgt: ->⤶    simpleDocument = new SimpleDocumentWdgt⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.setExtent new Point 368, 335⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    world.add wm⤶    wm.changed()⤶⤶  createSimpleLinkWdgt: ->⤶    simpleLinkWdgt = new SimpleLinkWdgt⤶    simpleLinkWdgt.setExtent new Point 405, 50⤶    world.create simpleLinkWdgt⤶⤶  createSimpleVideoLinkWdgt: ->⤶    simpleVideoLinkWdgt = new SimpleVideoLinkWdgt⤶    simpleVideoLinkWdgt.setExtent new Point 405, 50⤶    world.create simpleVideoLinkWdgt⤶⤶  create2DAxis: ->⤶    vertAxis = new AxisWdgt⤶    vertAxis.setExtent new Point 40, 300⤶    world.create vertAxis⤶⤶  createExampleScatterPlot: ->⤶    exampleScatterPlot = new ExampleScatterPlotWdgt⤶    exampleScatterPlot.setExtent new Point 300, 300⤶    world.create exampleScatterPlot⤶⤶  createExampleScatterPlotWithAxes: ->⤶    exampleScatterPlot = new ExampleScatterPlotWdgt⤶    plotWithAxesWdgt = new PlotWithAxesWdgt exampleScatterPlot⤶    plotWithAxesWdgt.rawSetExtent new Point 300, 300⤶    world.create plotWithAxesWdgt⤶⤶  createExampleFunctionPlot: ->⤶    exampleFunctionPlot = new ExampleFunctionPlotWdgt⤶    exampleFunctionPlot.setExtent new Point 300, 300⤶    world.create exampleFunctionPlot⤶  ⤶  createExampleBarPlot: ->⤶    exampleBarPlot = new ExampleBarPlotWdgt⤶    exampleBarPlot.setExtent new Point 300, 300⤶    world.create exampleBarPlot⤶⤶  createExample3DPlot: ->⤶    example3DPlot = new Example3DPlotWdgt⤶    example3DPlot.setExtent new Point 300, 300⤶    world.create example3DPlot⤶⤶  popUpMapsMenu: (morphOpeningThePopUp) ->⤶    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, ＂Maps＂⤶    menu.addMenuItem ＂world map＂, true, menusHelper, ＂createWorldMapIconMorph＂, ＂others＂⤶    menu.addMenuItem ＂USA map＂, true, menusHelper, ＂createUSAMapIconMorph＂, ＂others＂⤶⤶    menu.popUpAtHand()⤶⤶  popUpGraphsMenu: (morphOpeningThePopUp) ->⤶    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, ＂graphs＂⤶    menu.addMenuItem ＂axis＂, true, menusHelper, ＂create2DAxis＂⤶    menu.addMenuItem ＂scatter plot＂, true, menusHelper, ＂createExampleScatterPlot＂⤶    menu.addMenuItem ＂scatter plot with axes＂, true, menusHelper, ＂createExampleScatterPlotWithAxes＂⤶    menu.addMenuItem ＂function plot＂, true, menusHelper, ＂createExampleFunctionPlot＂⤶    menu.addMenuItem ＂bar plot＂, true, menusHelper, ＂createExampleBarPlot＂⤶    menu.addMenuItem ＂3D plot＂, true, menusHelper, ＂createExample3DPlot＂⤶⤶    menu.popUpAtHand()⤶⤶  popUpSupportDocsMenu: (morphOpeningThePopUp) ->⤶    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, ＂Support Docs＂⤶    menu.addMenuItem ＂welcome message＂, true, @, ＂createWelcomeMessageWindowAndShortcut＂, ＂welcome message＂⤶⤶    menu.popUpAtHand()⤶⤶  createWelcomeMessageWindowAndShortcut: ->⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new FizzygumLogoIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Welcome to Fizzygum＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 24⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂version 1.1.8＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 9⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()⤶⤶⤶    sdspw.addNormalParagraph ＂Tired of stringing libraries together?＂⤶    sdspw.addNormalParagraph ＂Welcome to a powerful new framework designed from the ground up to do complex things, easily.＂⤶⤶    sdspw.addSpacer()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂What it can do for you＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Fizzygum enables you to do all of this and more:＂⤶⤶    sdspw.addBulletPoint ＂make dashboards and visualise data (plots, maps, ...)＂⤶    sdspw.addBulletPoint ＂author, organise and navigate documents (drawings / text docs / slides)＂⤶    sdspw.addBulletPoint ＂embed live graphs, dynamic calculations or even entire running programs inside any document, via simple drag & drop＂⤶    sdspw.addBulletPoint ＂go beyond traditional embedding: you can now infinitely nest and compose programs and documents. Need a program inside a presentation inside a text? You have it＂⤶    sdspw.addBulletPoint ＂make custom utilities (e.g. temperature converter) by simply connecting existing components - no coding required＂⤶    sdspw.addBulletPoint ＂use the internal development tools to create entirely new apps, or change existing ones while they are running. Add custom features without even needing to refresh the page.＂⤶    sdspw.addBulletPoint ＂do all of the above, concurrently＂⤶⤶    sdspw.addSpacer()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂New here?＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Feel free to click around this sandbox. Double-click the items on the desktop to open them. Just reload to start again from scratch.＂⤶⤶    sdspw.addSpacer()⤶    sdspw.addNormalParagraph ＂Also check out some screenshots here:＂⤶⤶    startingContent = new SimpleLinkWdgt ＂Screenshots＂, ＂http://fizzygum.org/screenshots/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    sdspw.addNormalParagraph ＂...or watch some quick demos on the Youtube channel:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂YouTube channel＂, ＂https://www.youtube.com/channel/UCmYco9RU3h9dofRVN3bqxIw＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    sdspw.addNormalParagraph ＂...or docs here:＂⤶⤶    startingContent = new SimpleLinkWdgt ＂Docs＂, ＂http://fizzygum.org/docs/intro/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    sdspw.addSpacer(2)⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Get in touch＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Mail? Mailing list? Facebook page? Twitter? Chat? We have it all.＂⤶⤶    startingContent = new SimpleLinkWdgt ＂Contacts＂, ＂http://fizzygum.org/contact/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Welcome＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶⤶    readmeLauncher = new IconicDesktopSystemDocumentShortcutWdgt wm, ＂Welcome＂, new WelcomeIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add readmeLauncher⤶    readmeLauncher.setExtent new Point 75, 75⤶    readmeLauncher.fullChanged()⤶⤶  createSuperToolbarOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_superToolbar_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new ToolbarsIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Super Toolbar＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂The Super Toolbar can create all other toolbars for you, and from those toolbars you can create any widget.⧹n⧹nThis is handy because any widget can go in any document... so here is a way to access them all.⧹n⧹nFor an example on how this is useful, see the video on `mixing widgets`:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Mixing widgets＂, ＂http://fizzygum.org/docs/mixing-widgets/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Super Toolbar info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_superToolbar_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createDocsMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_docsMaker_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new TypewriterIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Docs Maker＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂A basic text editor. But you can drop anything inside it.⧹n⧹nNote that the Docs Maker works 'by paragraph': you can drag/drop paragraphs, and when you change the style the whole paragraph is affected.⧹n⧹nQuickest way to compose a document is to drag/drop snippets, which you can find by clicking the button that looks like this:＂⤶⤶    startingContent = new GlassBoxBottomWdgt⤶    startingContent.add new TemplatesButtonWdgt⤶    startingContent.rawSetExtent new Point 50, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    sdspw.addSpacer()⤶⤶    sdspw.addNormalParagraph ＂Once you are done editing, click the pencil icon on the window bar.＂⤶    sdspw.addNormalParagraph ＂To see an example of use, check out the video here:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Docs Maker＂, ＂http://fizzygum.org/docs/documents-maker/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Docs Maker info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_docsMaker_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createDrawingsMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_drawingsMaker_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new PaintBucketIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Drawings Maker＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Simple paint app. But you can drop anything inside it (try with the clock) to 'use it as a stamp'.＂⤶⤶    sdspw.addNormalParagraph ＂Once you are done editing, click the pencil icon on the window bar.＂⤶    sdspw.addNormalParagraph ＂To see an example of use, check out the video here:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Draw app＂, ＂http://fizzygum.org/docs/draw-app/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    sdspw.addNormalParagraph ＂You can also edit the tools you use, by clicking on the pencil icon next to the tool.＂⤶    sdspw.addNormalParagraph ＂To see how an example of editing the tools, see this video:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Hacking Fizzygum＂, ＂http://fizzygum.org/docs/hacking-fizzygum/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Drawings Maker info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_drawingsMaker_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createSlidesMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_slidesMaker_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new SimpleSlideIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Slides Maker＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Anything you drop inside the slide 'keeps proportion' when resized, which makes it handy to put pins on maps, add callouts, arrange text in custom layouts etc.＂⤶⤶    sdspw.addNormalParagraph ＂Once you are done editing, click the pencil icon on the window bar.＂⤶    sdspw.addNormalParagraph ＂To see an example of use, check out the video here:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Slides Maker＂, ＂http://fizzygum.org/docs/slides-maker/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Slides Maker info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_slidesMaker_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createDashboardsMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_dashboardsMaker_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new DashboardsIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Dashboards Maker＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Lets you arrange a choice of graphs/charts/plots/maps in any way you please. The visualisations can also be interactive (as in the 3D plot example, which you can drag to rotate) and/or calculated on the fly.⧹n⧹nOn the bar on the left you can find four example graphs and two example maps.＂⤶⤶    sdspw.addNormalParagraph ＂Once you are done editing, click the pencil icon on the window bar.＂⤶    sdspw.addNormalParagraph ＂To see an example of use, check out the video here:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Dashboards Maker＂, ＂http://fizzygum.org/docs/dashboards/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Dashboards Maker info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_dashboardsMaker_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createPatchProgrammingOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_patchProgramming_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new PatchProgrammingIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Patch Programming＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂'Patch programming' is a type of visual programming where you simply connect together existing widgets. It's useful to make simple applications/utilities quickly.＂⤶    sdspw.addNormalParagraph ＂You can imagine the widgets being 'patched together' by imaginary wires.＂⤶    sdspw.addNormalParagraph ＂You can see in the `example docs` folder a °C ↔ °F converter example made with this.＂⤶    sdspw.addNormalParagraph ＂Once you are done editing, click the pencil icon on the window bar.＂⤶    sdspw.addNormalParagraph ＂To see an example of use, check out the videos here:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Patch programming - basics＂, ＂http://fizzygum.org/docs/basic-connections/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Patch programming - advanced＂, ＂http://fizzygum.org/docs/advanced-connections/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Patch Programming info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_patchProgramming_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createGenericPanelOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_genericPanel_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new GenericPanelIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Generic Panel＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂You can use this panel to temporarily hold widgets, or to put together any mix of widgets. It's just a more generic version of slides and dashboards.＂⤶    sdspw.addNormalParagraph ＂Once you are done editing, click the pencil icon on the window bar.＂⤶    sdspw.addNormalParagraph ＂To see an example of use, check out the video here:＂⤶⤶    startingContent = new SimpleVideoLinkWdgt ＂Mixing widgets (using generic panels)＂, ＂http://fizzygum.org/docs/mixing-widgets/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Generic Panels info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_genericPanel_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createBasementOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_basement_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new BasementIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Basement＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Drag things in here to recycle them.⧹n⧹nClosed or invisible items also end up in here, and the items that can't be used again are automatically recycled.＂⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Basement info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_basement_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶⤶  createWindowsToolbarOneOffInfoWindowNextTo: (nextToThisWidget) ->⤶    if world.infoDoc_windowsToolbar_created⤶      return nil⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new WindowsToolbarIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Types of windows＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂There are four main types of windows＂⤶    sdspw.addBulletPoint ＂empty windows, with a target area where you can drop other items in＂⤶    sdspw.addBulletPoint ＂windows that crop their content＂⤶    sdspw.addBulletPoint ＂windows with a scroll view on their content＂⤶    sdspw.addBulletPoint ＂windows with an elastic panel, such that when resized the content will resize as well＂⤶⤶    #sdspw.addNormalParagraph ＂Check out some examples of use in this video:＂⤶⤶    #startingContent = new SimpleVideoLinkWdgt ＂Using windows＂⤶    #startingContent.rawSetExtent new Point 405, 50⤶    #sdspw.add startingContent⤶    #startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 365, 405⤶    wm.fullRawMoveFullCenterTo world.center()⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Windows info＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶    world.infoDoc_windowsToolbar_created = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just destroy it instead, since we only show⤶    # it once.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.destroy()⤶⤶    wm.fullRawMoveToSideOf nextToThisWidget⤶    wm.rememberFractionalSituationInHoldingPanel()⤶    return wm⤶⤶  createDegreesConverterOpener: (inWhichFolder) ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶⤶     menusHelper.createDegreesConverterWindowOrBringItUpIfAlreadyCreated()⤶⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    degreesConverterOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂°C ↔ °F＂, new DegreesConverterIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    ⤶    degreesConverterOpenerLauncher.setExtent new Point 75, 75⤶    if inWhichFolder?⤶      inWhichFolder.contents.contents.add degreesConverterOpenerLauncher⤶    else⤶      world.add degreesConverterOpenerLauncher⤶    return wm⤶⤶  createSampleDashboardOpener: (inWhichFolder) ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶⤶     menusHelper.createSampleDashboardWindowOrBringItUpIfAlreadyCreated()⤶⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    degreesConverterOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂sample dashb＂, new GenericShortcutIconWdgt new DashboardsIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    ⤶    degreesConverterOpenerLauncher.setExtent new Point 75, 75⤶    if inWhichFolder?⤶      inWhichFolder.contents.contents.add degreesConverterOpenerLauncher⤶    else⤶      world.add degreesConverterOpenerLauncher⤶    return wm⤶⤶  createSampleSlideOpener: (inWhichFolder) ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶⤶     menusHelper.createSampleSlideWindowOrBringItUpIfAlreadyCreated()⤶⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    degreesConverterOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂sample slide＂, new GenericShortcutIconWdgt new SimpleSlideIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    ⤶    degreesConverterOpenerLauncher.setExtent new Point 75, 75⤶    if inWhichFolder?⤶      inWhichFolder.contents.contents.add degreesConverterOpenerLauncher⤶    else⤶      world.add degreesConverterOpenerLauncher⤶    return wm⤶⤶⤶  createSampleDocOpener: (inWhichFolder) ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶⤶     menusHelper.createSampleDocWindowOrBringItUpIfAlreadyCreated()⤶⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    degreesConverterOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂sample doc＂, new GenericShortcutIconWdgt new TypewriterIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    ⤶    degreesConverterOpenerLauncher.setExtent new Point 75, 75⤶    if inWhichFolder?⤶      inWhichFolder.contents.contents.add degreesConverterOpenerLauncher⤶    else⤶      world.add degreesConverterOpenerLauncher⤶    return wm⤶⤶  ⤶⤶  createSampleSlideWindowOrBringItUpIfAlreadyCreated: ->⤶    if world.sampleSlideWindow?⤶      if !world.sampleSlideWindow.destroyed and world.sampleSlideWindow.parent?⤶        world.add world.sampleSlideWindow⤶        world.sampleSlideWindow.bringToForeground()⤶        world.sampleSlideWindow.fullRawMoveTo world.hand.position().add new Point 100, -50⤶        world.sampleSlideWindow.fullRawMoveWithin world⤶        world.sampleSlideWindow.rememberFractionalSituationInHoldingPanel()⤶        return⤶⤶    slideWdgt = new SimpleSlideWdgt⤶⤶    container = slideWdgt.stretchableWidgetContainer.contents⤶    container.rawSetExtent new Point 575,454⤶⤶    windowWithScrollingPanel = new WindowWdgt nil, nil, new ScrollPanelWdgt, true, true⤶    windowWithScrollingPanel.setTitleWithoutPrependedContentName ＂New York City＂⤶    windowWithScrollingPanel.fullRawMoveTo container.position().add new Point 28, 43⤶    windowWithScrollingPanel.rawSetExtent new Point 322, 268⤶    container.add windowWithScrollingPanel⤶    windowWithScrollingPanel.rememberFractionalSituationInHoldingPanel()⤶⤶⤶    usaMap = new SimpleUSAMapIconWdgt new Color 183, 183, 183⤶    usaMap.rawSetExtent new Point 1808, 1115⤶    windowWithScrollingPanel.contents.add usaMap⤶    windowWithScrollingPanel.contents.scrollTo new Point 1484, 246⤶    usaMap.rememberFractionalSituationInHoldingPanel()⤶⤶    mapPin = new MapPinIconWdgt⤶    windowWithScrollingPanel.contents.add mapPin⤶    mapPin.fullRawMoveTo windowWithScrollingPanel.contents.contents.position().add new Point 1606, 343⤶    mapPin.rememberFractionalSituationInHoldingPanel()⤶⤶    sampleBarPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleBarPlotWdgt), true, true⤶    sampleBarPlot.rawSetExtent new Point 240, 104⤶    windowWithScrollingPanel.contents.add sampleBarPlot⤶    sampleBarPlot.fullRawMoveTo windowWithScrollingPanel.contents.contents.position().add new Point 1566, 420⤶    sampleBarPlot.setTitleWithoutPrependedContentName ＂NYC: traffic＂⤶⤶⤶    windowWithScrollingPanel.contents.disableDragsDropsAndEditing()⤶⤶    mapCaption = new TextMorph2 ＂The City of New York, often called New York City or simply New York, is the most populous city in the United States. With an estimated 2017 population of 8,622,698 distributed over a land area of about 302.6 square miles (784 km2), New York City is also the most densely populated major city in the United States.＂⤶    mapCaption.fittingSpecWhenBoundsTooLarge = FittingSpecTextInLargerBounds.SCALEUP⤶    mapCaption.fittingSpecWhenBoundsTooSmall = FittingSpecTextInSmallerBounds.SCALEDOWN⤶⤶    mapCaption.fullRawMoveTo container.position().add new Point 366, 40⤶    mapCaption.rawSetExtent new Point 176, 387⤶    container.add mapCaption⤶    mapCaption.rememberFractionalSituationInHoldingPanel()⤶⤶    wikiLink = new SimpleLinkWdgt ＂New York City Wikipedia page＂, ＂https://en.wikipedia.org/wiki/New_York_City＂⤶    wikiLink.fullRawMoveTo container.position().add new Point 110, 348⤶    wikiLink.rawSetExtent new Point 250, 50⤶    container.add wikiLink⤶    wikiLink.rememberFractionalSituationInHoldingPanel()⤶⤶⤶    wm = new WindowWdgt nil, nil, slideWdgt⤶    wm.fullRawMoveTo new Point 114, 10⤶    wm.rawSetExtent new Point 596, 592⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Sample slide＂⤶    wm.changed()⤶⤶    slideWdgt.disableDragsDropsAndEditing()⤶    ⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just close it instead.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    slideWdgt.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.close()⤶⤶    world.sampleSlideWindow = wm⤶⤶  createSampleDocWindowOrBringItUpIfAlreadyCreated: ->⤶    if world.sampleDocWindow?⤶      if !world.sampleDocWindow.destroyed and world.sampleDocWindow.parent?⤶        world.add world.sampleDocWindow⤶        world.sampleDocWindow.bringToForeground()⤶        world.sampleDocWindow.fullRawMoveTo world.hand.position().add new Point 100, -50⤶        world.sampleDocWindow.fullRawMoveWithin world⤶        world.sampleDocWindow.rememberFractionalSituationInHoldingPanel()⤶        return⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Sample Doc＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 22⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.setContents startingContent, 5⤶⤶    sdspw.addDivider()    ⤶⤶    sdspw.addNormalParagraph ＂Text documents (or simply: docs) don't just contain text or images: they can embed any widget.＂⤶    sdspw.addNormalParagraph ＂For example, here is an interactive 3D plot:⧹n＂⤶⤶    plot3D = new WindowWdgt nil, nil, new Example3DPlotWdgt, true, true⤶    plot3D.rawSetExtent new Point 400, 255⤶    # ＂constrainToRatio＂ makes it so the plot in the doc gets taller⤶    # as the page is made wider⤶    plot3D.contents.constrainToRatio()⤶    sdspw.add plot3D⤶⤶    sdspw.addSpacer()⤶⤶    sdspw.addNormalParagraph ＂Connected widgets can be added too, for example this slider below controls the data points of the graph above:⧹n＂⤶⤶    slider1 = new SliderMorph nil, nil, nil, nil, nil, true⤶    slider1.rawSetExtent new Point 400, 24⤶    sdspw.add slider1⤶    slider1.setTargetAndActionWithOnesPickedFromMenu nil, nil, plot3D.contents, ＂setParameter＂⤶⤶    sdspw.addSpacer()⤶⤶    sdspw.addNormalParagraph ＂How to add connected widgets? Simple: just connect any number of them (see the °C ↔ °F converter for an example), then drop them in the doc.＂⤶⤶    sdspw.addSpacer()⤶⤶    sdspw.addNormalParagraph ＂What else could be added? Anything! Scripts, maps, maps inside scrolling views, maps with graphs, slides, other docs, and on and on and on...＂⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.rawSetExtent new Point 331, 545⤶    wm.fullRawMoveTo new Point 257, 110⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Sample text document＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶⤶    ⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just close it instead.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.close()⤶⤶    world.sampleDocWindow = wm⤶⤶  createSampleDashboardWindowOrBringItUpIfAlreadyCreated: ->⤶    if world.sampleDashboardWindow?⤶      if !world.sampleDashboardWindow.destroyed and world.sampleDashboardWindow.parent?⤶        world.add world.sampleDashboardWindow⤶        world.sampleDashboardWindow.bringToForeground()⤶        world.sampleDashboardWindow.fullRawMoveTo world.hand.position().add new Point 100, -50⤶        world.sampleDashboardWindow.fullRawMoveWithin world⤶        world.sampleDashboardWindow.rememberFractionalSituationInHoldingPanel()⤶        return⤶⤶    slideWdgt = new DashboardsWdgt⤶⤶    container = slideWdgt.stretchableWidgetContainer.contents⤶    container.rawSetExtent new Point 725,556⤶⤶    scatterPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleScatterPlotWdgt), true, true⤶    scatterPlot.fullRawMoveTo container.position().add new Point 19, 86⤶    scatterPlot.rawSetExtent new Point 200, 200⤶    container.add scatterPlot⤶    scatterPlot.rememberFractionalSituationInHoldingPanel()⤶⤶    functionPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleFunctionPlotWdgt), true, true⤶    functionPlot.fullRawMoveTo container.position().add new Point 251, 86⤶    functionPlot.rawSetExtent new Point 200, 200⤶    container.add functionPlot⤶    functionPlot.rememberFractionalSituationInHoldingPanel()⤶⤶    barPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleBarPlotWdgt), true, true⤶    barPlot.fullRawMoveTo container.position().add new Point 19, 327⤶    barPlot.rawSetExtent new Point 200, 200⤶    container.add barPlot⤶    barPlot.rememberFractionalSituationInHoldingPanel()⤶⤶    plot3D = new WindowWdgt nil, nil, new Example3DPlotWdgt, true, true⤶    plot3D.fullRawMoveTo container.position().add new Point 491, 327⤶    plot3D.rawSetExtent new Point 200, 150⤶    container.add plot3D⤶    plot3D.rememberFractionalSituationInHoldingPanel()⤶⤶    usaMap = new SimpleUSAMapIconWdgt new Color 183, 183, 183⤶    usaMap.fullRawMoveTo container.position().add new Point 242, 355⤶    usaMap.rawSetExtent new Point 230, 145⤶    container.add usaMap⤶    usaMap.rememberFractionalSituationInHoldingPanel()⤶⤶    mapPin1 = new MapPinIconWdgt⤶    mapPin1.fullRawMoveTo container.position().add new Point 226, 376⤶    container.add mapPin1⤶    mapPin1.rememberFractionalSituationInHoldingPanel()⤶⤶    mapPin2 = new MapPinIconWdgt⤶    mapPin2.fullRawMoveTo container.position().add new Point 289, 363⤶    container.add mapPin2⤶    mapPin2.rememberFractionalSituationInHoldingPanel()⤶⤶    mapPin3 = new MapPinIconWdgt⤶    mapPin3.fullRawMoveTo container.position().add new Point 323, 397⤶    container.add mapPin3⤶    mapPin3.rememberFractionalSituationInHoldingPanel()⤶⤶    mapPin4 = new MapPinIconWdgt⤶    mapPin4.fullRawMoveTo container.position().add new Point 360, 421⤶    container.add mapPin4⤶    mapPin4.rememberFractionalSituationInHoldingPanel()⤶⤶    mapPin5 = new MapPinIconWdgt⤶    mapPin5.fullRawMoveTo container.position().add new Point 417, 374⤶    container.add mapPin5⤶    mapPin5.rememberFractionalSituationInHoldingPanel()⤶⤶    worldMap = new SimpleWorldMapIconWdgt new Color 183, 183, 183⤶    worldMap.fullRawMoveTo container.position().add new Point 464, 128⤶    worldMap.rawSetExtent new Point 240, 125⤶    container.add worldMap⤶    worldMap.rememberFractionalSituationInHoldingPanel()⤶⤶    speechBubble1 = new SpeechBubbleWdgt ＂online＂⤶    speechBubble1.fullRawMoveTo container.position().add new Point 506, 123⤶    speechBubble1.rawSetExtent new Point 66, 42⤶    container.add speechBubble1⤶    speechBubble1.rememberFractionalSituationInHoldingPanel()⤶⤶    speechBubble2 = new SpeechBubbleWdgt ＂offline＂⤶    speechBubble2.fullRawMoveTo container.position().add new Point 590, 105⤶    speechBubble2.rawSetExtent new Point 66, 42⤶    container.add speechBubble2⤶    speechBubble2.rememberFractionalSituationInHoldingPanel()⤶⤶    dashboardTitle = new TextMorph2 ＂Example dashboard with interactive 3D plot＂⤶    dashboardTitle.alignCenter()⤶    dashboardTitle.alignMiddle()⤶    dashboardTitle.fullRawMoveTo container.position().add new Point 161, 6⤶    dashboardTitle.rawSetExtent new Point 403, 50⤶    container.add dashboardTitle⤶    dashboardTitle.rememberFractionalSituationInHoldingPanel()⤶⤶⤶    slider1 = new SliderMorph nil, nil, nil, nil, nil, true⤶    slider1.fullRawMoveTo container.position().add new Point 491, 484⤶    slider1.rawSetExtent new Point 201, 24⤶    container.add slider1⤶    slider1.rememberFractionalSituationInHoldingPanel()⤶⤶    slider1.setTargetAndActionWithOnesPickedFromMenu nil, nil, plot3D.contents, ＂setParameter＂⤶⤶    wm = new WindowWdgt nil, nil, slideWdgt⤶    wm.fullRawMoveTo new Point 114, 10⤶    wm.rawSetExtent new Point 596, 592⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂Sample dashboard＂⤶    wm.changed()⤶⤶⤶    slideWdgt.disableDragsDropsAndEditing()⤶    ⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just close it instead.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    slideWdgt.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.close()⤶⤶    world.sampleDashboardWindow = wm⤶⤶⤶⤶  createDegreesConverterWindowOrBringItUpIfAlreadyCreated: ->⤶    if world.degreesConverterWindow?⤶      if !world.degreesConverterWindow.destroyed and world.degreesConverterWindow.parent?⤶        world.add world.degreesConverterWindow⤶        world.degreesConverterWindow.bringToForeground()⤶        world.degreesConverterWindow.fullRawMoveTo world.hand.position().add new Point 100, -50⤶        world.degreesConverterWindow.fullRawMoveWithin world⤶        world.degreesConverterWindow.rememberFractionalSituationInHoldingPanel()⤶        return⤶⤶    xCorrection = 32⤶    yCorrection = 50⤶    patchProgrammingWdgt = new PatchProgrammingWdgt⤶⤶    container = patchProgrammingWdgt.stretchableWidgetContainer.contents⤶    container.rawSetExtent new Point 584,552⤶⤶    slider1 = new SliderMorph nil, nil, nil, nil, nil, true⤶    slider1.fullRawMoveTo container.position().add new Point 43+xCorrection, 195+yCorrection⤶    slider1.rawSetExtent new Point 20, 100⤶    container.add slider1⤶    slider1.rememberFractionalSituationInHoldingPanel()⤶⤶    slider2 = new SliderMorph nil, nil, nil, nil, nil, true⤶    slider2.fullRawMoveTo container.position().add new Point 472+xCorrection, 203+yCorrection⤶    slider2.rawSetExtent new Point 20, 100⤶    container.add slider2⤶    slider2.rememberFractionalSituationInHoldingPanel()⤶⤶    cText = new TextMorph2 ＂0＂⤶    cText.fullRawMoveTo container.position().add new Point 104, 253⤶    cText.rawSetExtent new Point 150, 75⤶    container.add cText⤶    cText.rememberFractionalSituationInHoldingPanel()⤶⤶    fText = new TextMorph2 ＂0＂⤶    fText.fullRawMoveTo container.position().add new Point 344, 255⤶    fText.alignRight()⤶    fText.rawSetExtent new Point 150, 75⤶    container.add fText⤶    fText.rememberFractionalSituationInHoldingPanel()⤶⤶    calc1 = new WindowWdgt nil, nil, new CalculatingPatchNodeWdgt(＂# °C → °F formula⧹n(in1)->Math.round in1*9/5+32＂), true⤶    calc1.fullRawMoveTo container.position().add new Point 148+xCorrection/2, 19⤶    calc1.rawSetExtent new Point 241, 167⤶    container.add calc1⤶    calc1.rememberFractionalSituationInHoldingPanel()⤶⤶    calc2 = new WindowWdgt nil, nil, new CalculatingPatchNodeWdgt(＂# °F → °C formula⧹n(in1)->Math.round (in1-32)*5/9＂), true⤶    calc2.fullRawMoveTo container.position().add new Point 148+xCorrection/2, 365⤶    calc2.rawSetExtent new Point 241, 167⤶    container.add calc2⤶    calc2.rememberFractionalSituationInHoldingPanel()⤶⤶⤶    slider1.setTargetAndActionWithOnesPickedFromMenu nil, nil, cText, ＂setText＂⤶    cText.setTargetAndActionWithOnesPickedFromMenu nil, nil, calc1.contents, ＂setInput1＂⤶    calc1.contents.setTargetAndActionWithOnesPickedFromMenu nil, nil, fText, ＂setText＂⤶    fText.setTargetAndActionWithOnesPickedFromMenu nil, nil, slider2, ＂setValue＂⤶    slider2.setTargetAndActionWithOnesPickedFromMenu nil, nil, calc2.contents, ＂setInput1＂⤶    calc2.contents.setTargetAndActionWithOnesPickedFromMenu nil, nil, slider1, ＂setValue＂⤶⤶⤶⤶    cLabel = new TextMorph2 ＂°C＂⤶    cLabel.fullRawMoveTo container.position().add new Point 0+xCorrection, 102+yCorrection⤶    cLabel.rawSetExtent new Point 90, 90⤶    container.add cLabel⤶    cLabel.rememberFractionalSituationInHoldingPanel()⤶⤶    fLabel = new TextMorph2 ＂°F＂⤶    fLabel.fullRawMoveTo container.position().add new Point 422+xCorrection, 102+yCorrection⤶    fLabel.rawSetExtent new Point 90, 90⤶    container.add fLabel⤶    fLabel.rememberFractionalSituationInHoldingPanel()⤶⤶    #@inform (@position().subtract @parent.position()) + ＂ ＂ +  @extent()⤶⤶    wm = new WindowWdgt nil, nil, patchProgrammingWdgt⤶    wm.fullRawMoveTo new Point 114, 10⤶    wm.rawSetExtent new Point 596, 592⤶    world.add wm⤶    wm.setTitleWithoutPrependedContentName ＂°C ↔ °F converter＂⤶    wm.changed()⤶⤶⤶    patchProgrammingWdgt.disableDragsDropsAndEditing()⤶    ⤶    cText.isEditable = true⤶    fText.isEditable = true⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just close it instead.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    patchProgrammingWdgt.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.close()⤶⤶    world.degreesConverterWindow = wm⤶⤶  createHowToSaveMessageOpener: ->⤶    scriptWdgt = new ScriptWdgt ＂＂＂⤶⤶     menusHelper.createHowToSaveMessageWindowOrBringItUpIfAlreadyCreated()⤶⤶⤶    ＂＂＂⤶    # the starting script string above is not⤶    # actually saved, it's just there as starting⤶    # content, so let's save it⤶    scriptWdgt.saveScript()⤶⤶    wm = new WindowWdgt nil, nil, scriptWdgt⤶    wm.setExtent new Point 460, 400⤶    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100⤶    wm.fullRawMoveWithin world⤶    wm.changed()⤶⤶    toolbarsOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, ＂How to save?＂, new FloppyDiskIconWdgt⤶    # this ＂add＂ is going to try to position the reference⤶    # in some smart way (i.e. according to a grid)⤶    world.add toolbarsOpenerLauncher⤶    toolbarsOpenerLauncher.setExtent new Point 75, 75⤶    toolbarsOpenerLauncher.fullChanged()⤶    return wm⤶⤶⤶  createHowToSaveMessageWindowOrBringItUpIfAlreadyCreated: ->⤶    if world.howToSaveDocWindow?⤶      if !world.howToSaveDocWindow.destroyed and world.howToSaveDocWindow.parent?⤶        world.add world.howToSaveDocWindow⤶        world.howToSaveDocWindow.bringToForeground()⤶        world.howToSaveDocWindow.fullRawMoveTo world.hand.position().add new Point 100, -50⤶        world.howToSaveDocWindow.fullRawMoveWithin world⤶        world.howToSaveDocWindow.rememberFractionalSituationInHoldingPanel()⤶        return⤶⤶    simpleDocument = new SimpleDocumentWdgt⤶    sdspw = simpleDocument.simpleDocumentScrollPanel⤶⤶    sdspw.fullRawMoveTo new Point 114, 10⤶    sdspw.rawSetExtent new Point 365, 405⤶⤶    startingContent = new FloppyDiskIconWdgt⤶    startingContent.rawSetExtent new Point 85, 85⤶⤶    sdspw.setContents startingContent, 5⤶    startingContent.layoutSpecDetails.setElasticity 0⤶    startingContent.layoutSpecDetails.setAlignmentToCenter()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂How to save?＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.alignCenter()⤶    startingContent.setFontSize 24⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    sdspw.add startingContent⤶⤶⤶    sdspw.addDivider()⤶⤶⤶    sdspw.addNormalParagraph ＂There are a couple of ways to save data in Fizzygum.¹⧹n⧹nHowever, ⧹＂in-house⧹＂ stable saving solutions are only available in private versions.²⧹n⧹nIn the meantime that these solutions make their way into the public version, the Fizzygum team can consult for you to tailor 'saving' functionality to your needs (save to file, save to cloud, connect to databases etc. ).⧹n⧹nPlease enquiry via one of the Fizzygum contacts here:＂⤶⤶    sdspw.addSpacer()⤶⤶    startingContent = new SimpleLinkWdgt ＂Contacts＂, ＂http://fizzygum.org/contact/＂⤶    startingContent.rawSetExtent new Point 405, 50⤶    sdspw.add startingContent⤶    startingContent.layoutSpecDetails.setAlignmentToRight()⤶⤶    sdspw.addSpacer()⤶⤶    startingContent = new SimplePlainTextWdgt(⤶      ＂Footnotes＂,nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)⤶    startingContent.toggleWeight()⤶    startingContent.isEditable = true⤶    startingContent.enableSelecting()⤶    startingContent.toggleHeaderLine()⤶    sdspw.add startingContent⤶⤶    sdspw.addSpacer()⤶⤶    sdspw.addNormalParagraph ＂¹ Saving solutions:⧹n＂+⤶     ＂1) saving data with existing formats (e.g. markdown etc.). Advantages: compatibility. Disadvantages: works only with ⧹＂plain⧹＂ documents (no live documents, no documents within documents etc.)⧹n＂+⤶     ＂2) serialising objects graph. Advantages: fidelity. Disadvantages: needs some management of versioning of Fizzygum platform and documents⧹n＂+⤶     ＂3) deducing source code to generate content. Advantages: compactness, inspectability of source code, high-level semantics of source code preserved. Disadvantages: only possible with relatively simple objects.⧹n＂+⤶     ＂⧹n＂+⤶     ＂² Why private beta:⧹n＂+⤶     ＂Proliferation of saving solutions done without our help could be detrimental to the Fizzygum platform (due to degraded experience on third party sites, incompatibilities between sites, migration issues, security issues, etc.), hence the Fizzygum team decided to withhold this functionality from public until we can package an open turn-key solution that minimises misuse and sub-par experiences.＂⤶⤶⤶    wm = new WindowWdgt nil, nil, simpleDocument⤶    wm.fullRawMoveTo new Point 114, 10⤶    wm.rawSetExtent new Point 365, 447⤶    world.add wm⤶    wm.rememberFractionalSituationInHoldingPanel()⤶    wm.setTitleWithoutPrependedContentName ＂How to save?＂⤶    wm.changed()⤶⤶    simpleDocument.disableDragsDropsAndEditing()⤶⤶    # if we don't do this, the window would ask to save content⤶    # when closed. Just close it instead.⤶    # TODO: should be done using a flag, we don't like⤶    # to inject code like this: the source is not tracked⤶    simpleDocument.closeFromContainerWindow = (containerWindow) ->⤶      containerWindow.close()⤶⤶⤶    world.howToSaveDocWindow = wm⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.AlignCenterButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class AlignCenterButtonWdgt extends Widget⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new AlignCenterIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂align center＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.alignCenter?⤶      world.lastNonTextPropertyChangerButtonClickedOrDropped.alignCenter()⤶    else if world.lastNonTextPropertyChangerButtonClickedOrDropped?⤶      lastNonTextPropertyChangerButtonClickedOrDropped = world.lastNonTextPropertyChangerButtonClickedOrDropped.findRootForGrab()⤶      if lastNonTextPropertyChangerButtonClickedOrDropped?.layoutSpec? and⤶       lastNonTextPropertyChangerButtonClickedOrDropped.layoutSpec == LayoutSpec.ATTACHEDAS_VERTICAL_STACK_ELEMENT⤶        lastNonTextPropertyChangerButtonClickedOrDropped.layoutSpecDetails.setAlignmentToCenter()⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.AlignLeftButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class AlignLeftButtonWdgt extends Widget⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new AlignLeftIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂align left＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.alignLeft?⤶      world.lastNonTextPropertyChangerButtonClickedOrDropped.alignLeft()⤶    else if world.lastNonTextPropertyChangerButtonClickedOrDropped?⤶      lastNonTextPropertyChangerButtonClickedOrDropped = world.lastNonTextPropertyChangerButtonClickedOrDropped.findRootForGrab()⤶      if lastNonTextPropertyChangerButtonClickedOrDropped?.layoutSpec? and⤶       lastNonTextPropertyChangerButtonClickedOrDropped.layoutSpec == LayoutSpec.ATTACHEDAS_VERTICAL_STACK_ELEMENT⤶        lastNonTextPropertyChangerButtonClickedOrDropped.layoutSpecDetails.setAlignmentToLeft()⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.AlignRightButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class AlignRightButtonWdgt extends Widget⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new AlignRightIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂align right＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.alignRight?⤶      world.lastNonTextPropertyChangerButtonClickedOrDropped.alignRight()⤶    else if world.lastNonTextPropertyChangerButtonClickedOrDropped?⤶      lastNonTextPropertyChangerButtonClickedOrDropped = world.lastNonTextPropertyChangerButtonClickedOrDropped.findRootForGrab()⤶      if lastNonTextPropertyChangerButtonClickedOrDropped?.layoutSpec? and⤶       lastNonTextPropertyChangerButtonClickedOrDropped.layoutSpec == LayoutSpec.ATTACHEDAS_VERTICAL_STACK_ELEMENT⤶        lastNonTextPropertyChangerButtonClickedOrDropped.layoutSpecDetails.setAlignmentToRight()⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.BarPlotWithAxesCreatorButtonWdgt_coffeSource = "class BarPlotWithAxesCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new BarPlotIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂bar plot＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleBarPlotWdgt), true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶⤶    return switcherooWm⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.BoldButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class BoldButtonWdgt extends Widget⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: ->⤶    super⤶    @appearance = new BoldIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂bold＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.toggleWeight?⤶      world.lastNonTextPropertyChangerButtonClickedOrDropped.toggleWeight()⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.CalculatingNodeCreatorButtonWdgt_coffeSource = "class CalculatingNodeCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new CalculatingNodeIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂calculating node＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new CalculatingPatchNodeWdgt, true⤶    switcherooWm.rawSetExtent new Point 260, 265⤶    return switcherooWm⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ChangeFontButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class ChangeFontButtonWdgt extends IconMorph⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  simpleDocument: nil⤶⤶  constructor: (@simpleDocument) ->⤶    super⤶    @appearance = new ChangeFontIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂change font＂⤶⤶  mouseClickLeft: ->⤶    # if there is already a font selection menu for the editor,⤶    # bring that one up, otherwise create one and rember that we created it⤶    if @simpleDocument.fontSelectionMenu? and⤶     !@simpleDocument.fontSelectionMenu.destroyed⤶      @simpleDocument.fontSelectionMenu.popUp @position().subtract(new Point 80,0), world⤶    else⤶      menu = new MenuMorph @, false, @, true, true, ＂Fonts＂⤶      menu.addMenuItem ＂Arial＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂justArialFontStack＂⤶      menu.addMenuItem ＂Times＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂timesFontStack＂⤶      menu.addMenuItem ＂Georgia＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂georgiaFontStack＂⤶      menu.addMenuItem ＂Garamo＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂garamoFontStack＂⤶      menu.addMenuItem ＂Helve＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂helveFontStack＂⤶      menu.addMenuItem ＂Verda＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂verdaFontStack＂⤶      menu.addMenuItem ＂Treby＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂trebuFontStack＂⤶      menu.addMenuItem ＂Heavy＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂heavyFontStack＂⤶      menu.addMenuItem ＂Mono＂, true, @, ＂setFontName＂, nil, nil, nil, nil, nil, ＂monoFontStack＂⤶⤶      menu.popUp @position().subtract(new Point 80,0), world⤶⤶      menu.editorContentPropertyChangerButton = true⤶      menu.forAllChildrenBottomToTop (eachDescendent) ->⤶        eachDescendent.editorContentPropertyChangerButton = true⤶⤶      @simpleDocument.fontSelectionMenu = menu⤶⤶  setFontName: (ignored1, ignored2, theNewFontName) ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.setFontName?⤶      widgetClickedLast = world.lastNonTextPropertyChangerButtonClickedOrDropped⤶      widgetClickedLast.setFontName(nil, ignored2, widgetClickedLast[theNewFontName])⤶⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.CloseIconButtonMorph_coffeSource = "# sends a message to a target object when pressed.⤶# Takes the shape of an icon, and can also host⤶# a morph to be used as ＂face＂⤶#⤶# You could achieve something similar by having⤶# an empty button containing an icon, but changing⤶# the color of a face belonging to a button is⤶# not yet supported.⤶# i.e. this is currently the simplest way to change the color⤶# of a non-rectangular button.⤶⤶class CloseIconButtonMorph extends EmptyButtonMorph⤶⤶⤶  constructor: (@target) ->⤶    # can't set the parent as the target directly because this morph⤶    # might not have a parent yet.⤶    super true, @, 'actOnClick', new Widget⤶    @color_hover = new Color 255,0,0⤶    @color_pressed = @color_hover⤶    @appearance = new CloseIconAppearance @⤶    @toolTipMessage = ＂close window＂⤶⤶⤶  actOnClick: ->⤶    if @parent?⤶      if (@parent instanceof WindowWdgt) and @parent.contents?⤶        @parent.closeFromWindowBar()⤶      else⤶        @parent.close()⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.CollapseIconButtonMorph_coffeSource = "# sends a message to a target object when pressed.⤶# Takes the shape of an icon, and can also host⤶# a morph to be used as ＂face＂⤶#⤶# You could achieve something similar by having⤶# an empty button containing an icon, but changing⤶# the color of a face belonging to a button is⤶# not yet supported.⤶# i.e. this is currently the simplest way to change the color⤶# of a non-rectangular button.⤶⤶class CollapseIconButtonMorph extends EmptyButtonMorph⤶⤶  constructor: (@target) ->⤶    # can't set the parent as the target directly because this morph⤶    # might not have a parent yet.⤶    super true, @, 'actOnClick', new Widget⤶    @color_hover = new Color 255,153,0⤶    @color_pressed = @color_hover⤶    @appearance = new CollapseIconAppearance @⤶    @toolTipMessage = ＂collapse window＂⤶⤶⤶  actOnClick: ->⤶    @parent.parent.contents.collapse()⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ColorPaletteNodeCreatorButtonWdgt_coffeSource = "class ColorPaletteNodeCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new ColorPalettePatchProgrammingIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂color palette＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new ColorPaletteMorph, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.CreatorButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶# REQUIRES WidgetCreatorAndSmartPlacerOnClickMixin⤶⤶class CreatorButtonWdgt extends Widget⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶  @augmentWith WidgetCreatorAndSmartPlacerOnClickMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: ->⤶    super⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶⤶  grabbedWidgetSwitcheroo: ->⤶    return @createWidgetToBeHandled()⤶⤶  # otherwise the glassbox bottom will answer on drags⤶  # and will just pick up the button and move it,⤶  # while we want the drag to create a textbox⤶  grabsToParentWhenDragged: ->⤶    false⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.DecreaseFontSizeButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class DecreaseFontSizeButtonWdgt extends IconMorph⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: ->⤶    super⤶    @appearance = new DecreaseFontSizeIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂decrease font size＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.originallySetFontSize?⤶      widgetClickedLast = world.lastNonTextPropertyChangerButtonClickedOrDropped⤶      if widgetClickedLast.originallySetFontSize > 90⤶        widgetClickedLast.setFontSize widgetClickedLast.originallySetFontSize - 10⤶      else if widgetClickedLast.originallySetFontSize > 80⤶        widgetClickedLast.setFontSize 80⤶      else if widgetClickedLast.originallySetFontSize > 72⤶        widgetClickedLast.setFontSize 72⤶      else if widgetClickedLast.originallySetFontSize > 48⤶        widgetClickedLast.setFontSize 48⤶      else if widgetClickedLast.originallySetFontSize > 36⤶        widgetClickedLast.setFontSize 36⤶      else if widgetClickedLast.originallySetFontSize > 28⤶        widgetClickedLast.setFontSize 28⤶      else if widgetClickedLast.originallySetFontSize > 12⤶        widgetClickedLast.setFontSize widgetClickedLast.originallySetFontSize - 2⤶      else⤶        widgetClickedLast.setFontSize widgetClickedLast.originallySetFontSize - 1⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.EditIconButtonWdgt_coffeSource = "# sends a message to a target object when pressed.⤶# Takes the shape of an icon, and can also host⤶# a morph to be used as ＂face＂⤶#⤶# You could achieve something similar by having⤶# an empty button containing an icon, but changing⤶# the color of a face belonging to a button is⤶# not yet supported.⤶# i.e. this is currently the simplest way to change the color⤶# of a non-rectangular button.⤶⤶class EditIconButtonWdgt extends EmptyButtonMorph⤶⤶⤶  constructor: (@target) ->⤶    # can't set the parent as the target directly because this morph⤶    # might not have a parent yet.⤶    super true, @, 'actOnClick', new Widget⤶    @color_hover = new Color 255,153,0⤶    @color_pressed = @color_hover⤶    @appearance = new PencilIconAppearance @⤶    @toolTipMessage = ＂edit contents＂⤶⤶⤶  actOnClick: ->⤶    if @parent?⤶      if (@parent instanceof WindowWdgt)⤶        @parent.contents?.editButtonPressedFromWindowBar?()⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ElasticWindowCreatorButtonWdgt_coffeSource = "# this is just the same as the ＂generic panel＂⤶⤶class ElasticWindowCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new ElasticWindowIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂elastic panel＂⤶⤶  createWidgetToBeHandled: ->⤶    genericPanel = new StretchableEditableWdgt⤶    switcherooWm = new WindowWdgt nil, nil, genericPanel, true, true⤶    switcherooWm.setTitleWithoutPrependedContentName ＂elastic panel＂⤶    switcherooWm.rawSetExtent new Point 200, 200⤶⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.EmptyWindowCreatorButtonWdgt_coffeSource = "class EmptyWindowCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new EmptyWindowIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂empty window＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, nil, true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ExternalIconButtonWdgt_coffeSource = "# sends a message to a target object when pressed.⤶# Takes the shape of an icon, and can also host⤶# a morph to be used as ＂face＂⤶#⤶# You could achieve something similar by having⤶# an empty button containing an icon, but changing⤶# the color of a face belonging to a button is⤶# not yet supported.⤶# i.e. this is currently the simplest way to change the color⤶# of a non-rectangular button.⤶⤶class ExternalIconButtonWdgt extends EmptyButtonMorph⤶⤶⤶  constructor: (@target) ->⤶    # can't set the parent as the target directly because this morph⤶    # might not have a parent yet.⤶    super true, @, 'actOnClick', new Widget⤶    @color_hover = new Color 255,153,0⤶    @color_pressed = @color_hover⤶    @appearance = new ExternalIconAppearance @⤶    @toolTipMessage = ＂make this window droppable⧹ninto other documents＂⤶⤶⤶  actOnClick: ->⤶    if @parent?.parent?⤶      if (@parent.parent instanceof WindowWdgt)⤶        @parent.parent.makeInternal()⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ExternalLinkButtonWdgt_coffeSource = "class ExternalLinkButtonWdgt extends IconMorph⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new ExternalLinkIconAppearance @⤶⤶  mouseClickLeft: ->⤶    if @parent? and (@parent instanceof SimpleLinkWdgt)⤶      window.open @parent.outputTextArea.text⤶⤶  mouseEnter: ->⤶    world.worldCanvas.style.cursor = 'pointer'⤶  ⤶  mouseLeave: ->⤶    world.worldCanvas.style.cursor = ''⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ExternalLinkCreatorButtonWdgt_coffeSource = "class ExternalLinkCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new ExternalLinkIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂external link＂⤶⤶  createWidgetToBeHandled: ->⤶    switcheroo = new SimpleLinkWdgt⤶    switcheroo.fullRawMoveTo @position()⤶    switcheroo.rawSetExtent new Point 330, 65⤶    return switcheroo⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.FormatAsCodeButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class FormatAsCodeButtonWdgt extends IconMorph⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: ->⤶    super⤶    @appearance = new FormatAsCodeIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂format as code＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.setFontName?⤶      widgetClickedLast = world.lastNonTextPropertyChangerButtonClickedOrDropped⤶      if widgetClickedLast.fontName != widgetClickedLast.monoFontStack⤶        widgetClickedLast.setFontName nil, nil, widgetClickedLast.monoFontStack⤶      else⤶        widgetClickedLast.setFontName nil, nil, widgetClickedLast.justArialFontStack⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.FunctionPlotWithAxesCreatorButtonWdgt_coffeSource = "class FunctionPlotWithAxesCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new FunctionPlotIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂function plot＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleFunctionPlotWdgt), true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.GrayscalePaletteNodeCreatorButtonWdgt_coffeSource = "class GrayscalePaletteNodeCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new GrayscalePalettePatchProgrammingIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂grayscale palette＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new GrayPaletteMorph, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.IncreaseFontSizeButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class IncreaseFontSizeButtonWdgt extends IconMorph⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: ->⤶    super⤶    @appearance = new IncreaseFontSizeIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂increase font size＂⤶⤶  mouseClickLeft: ->⤶⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.originallySetFontSize?⤶      widgetClickedLast = world.lastNonTextPropertyChangerButtonClickedOrDropped⤶      if widgetClickedLast.originallySetFontSize < 12⤶        widgetClickedLast.setFontSize widgetClickedLast.originallySetFontSize + 1⤶      else if widgetClickedLast.originallySetFontSize < 28⤶        widgetClickedLast.setFontSize widgetClickedLast.originallySetFontSize + 2⤶      else if widgetClickedLast.originallySetFontSize < 36⤶        widgetClickedLast.setFontSize 36⤶      else if widgetClickedLast.originallySetFontSize < 48⤶        widgetClickedLast.setFontSize 48⤶      else if widgetClickedLast.originallySetFontSize < 72⤶        widgetClickedLast.setFontSize 72⤶      else if widgetClickedLast.originallySetFontSize < 80⤶        widgetClickedLast.setFontSize 80⤶      else⤶        widgetClickedLast.setFontSize widgetClickedLast.originallySetFontSize + 10⤶⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.InternalIconButtonWdgt_coffeSource = "# sends a message to a target object when pressed.⤶# Takes the shape of an icon, and can also host⤶# a morph to be used as ＂face＂⤶#⤶# You could achieve something similar by having⤶# an empty button containing an icon, but changing⤶# the color of a face belonging to a button is⤶# not yet supported.⤶# i.e. this is currently the simplest way to change the color⤶# of a non-rectangular button.⤶⤶class InternalIconButtonWdgt extends EmptyButtonMorph⤶⤶⤶  constructor: (@target) ->⤶    # can't set the parent as the target directly because this morph⤶    # might not have a parent yet.⤶    super true, @, 'actOnClick', new Widget⤶    @color_hover = new Color 255,153,0⤶    @color_pressed = @color_hover⤶    @appearance = new InternalIconAppearance @⤶    @toolTipMessage = ＂pop-out window from documents,⧹nmake it un-droppable⧹ninto other documents＂⤶⤶⤶  actOnClick: ->⤶    if @parent?.parent?⤶      if (@parent.parent instanceof WindowWdgt)⤶        @parent.parent.makeExternal()⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ItalicButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class ItalicButtonWdgt extends Widget⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new ItalicIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂italic＂⤶⤶  mouseClickLeft: ->⤶    if world.lastNonTextPropertyChangerButtonClickedOrDropped?.toggleItalic?⤶      world.lastNonTextPropertyChangerButtonClickedOrDropped.toggleItalic()⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.PatchProgrammingComponentsToolbarCreatorButtonWdgt_coffeSource = "class PatchProgrammingComponentsToolbarCreatorButtonWdgt extends ToolbarCreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new PatchProgrammingComponentsIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂components that can be connected＂⤶⤶  createWidgetToBeHandled: ->⤶⤶    toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶⤶    toolsPanel.addMany [⤶      new SliderNodeCreatorButtonWdgt⤶      new ColorPaletteNodeCreatorButtonWdgt⤶      new GrayscalePaletteNodeCreatorButtonWdgt⤶      new CalculatingNodeCreatorButtonWdgt⤶    ]⤶⤶    toolsPanel.disableDragsDropsAndEditing()⤶⤶    switcherooWm = new WindowWdgt nil, nil, toolsPanel⤶    switcherooWm.fullRawMoveTo new Point 90, Math.floor((world.height()-192)/2)⤶    switcherooWm.fullRawMoveWithin world⤶    world.add switcherooWm⤶    switcherooWm.rawSetExtent new Point 61, 192⤶⤶    return switcherooWm⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.Plot3DCreatorButtonWdgt_coffeSource = "class Plot3DCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new Plot3DIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂3D plot＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new Example3DPlotWdgt, true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.PlotsToolbarCreatorButtonWdgt_coffeSource = "class PlotsToolbarCreatorButtonWdgt extends ToolbarCreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new AllPlotsIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂plots/graphs＂⤶⤶  createWidgetToBeHandled: ->⤶⤶    toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶⤶    toolsPanel.addMany [⤶      new ScatterPlotWithAxesCreatorButtonWdgt⤶      new FunctionPlotWithAxesCreatorButtonWdgt⤶      new BarPlotWithAxesCreatorButtonWdgt⤶      new Plot3DCreatorButtonWdgt⤶    ]⤶⤶    toolsPanel.disableDragsDropsAndEditing()⤶⤶    switcherooWm = new WindowWdgt nil, nil, toolsPanel⤶    switcherooWm.setExtent new Point 60, 192⤶    switcherooWm.fullRawMoveTo new Point 90, Math.floor((world.height()-192)/2)⤶    switcherooWm.fullRawMoveWithin world⤶    world.add switcherooWm⤶    switcherooWm.changed()⤶⤶    return switcherooWm⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ScatterPlotWithAxesCreatorButtonWdgt_coffeSource = "class ScatterPlotWithAxesCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new ScatterPlotIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂scatter plot＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleScatterPlotWdgt), true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.SliderNodeCreatorButtonWdgt_coffeSource = "class SliderNodeCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new SliderNodeIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂slider node＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWdgt = new SliderMorph nil, nil, nil, nil, nil, true⤶    return switcherooWdgt⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.SlidesToolbarCreatorButtonWdgt_coffeSource = "class SlidesToolbarCreatorButtonWdgt extends ToolbarCreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new SlidesToolbarIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂items for slides＂⤶⤶  createWidgetToBeHandled: ->⤶⤶    toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶⤶    toolsPanel.addMany [⤶      new TextBoxCreatorButtonWdgt⤶      new ExternalLinkCreatorButtonWdgt⤶      new VideoPlayCreatorButtonWdgt⤶⤶      new WorldMapCreatorButtonWdgt⤶      new USAMapCreatorButtonWdgt⤶⤶      new RectangleMorph⤶⤶      new MapPinIconWdgt⤶⤶      new SpeechBubbleWdgt⤶⤶      new DestroyIconMorph⤶      new ScratchAreaIconMorph⤶      new FloraIconMorph⤶      new ScooterIconMorph⤶      new HeartIconMorph⤶⤶      new FizzygumLogoIconWdgt⤶      new FizzygumLogoWithTextIconWdgt⤶      new VaporwaveBackgroundIconWdgt⤶      new VaporwaveSunIconWdgt⤶⤶      new ArrowNIconWdgt⤶      new ArrowSIconWdgt⤶      new ArrowWIconWdgt⤶      new ArrowEIconWdgt⤶      new ArrowNWIconWdgt⤶      new ArrowNEIconWdgt⤶      new ArrowSWIconWdgt⤶      new ArrowSEIconWdgt⤶    ]⤶⤶    toolsPanel.disableDragsDropsAndEditing()⤶⤶    switcherooWm = new WindowWdgt nil, nil, toolsPanel⤶    switcherooWm.fullRawMoveTo new Point 90, Math.floor((world.height()-192)/2)⤶    switcherooWm.fullRawMoveWithin world⤶    world.add switcherooWm⤶    switcherooWm.rawSetExtent new Point 105, 300⤶⤶    return switcherooWm⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.TemplatesButtonWdgt_coffeSource = "# REQUIRES HighlightableMixin⤶# REQUIRES ParentStainerMixin⤶⤶class TemplatesButtonWdgt extends IconMorph⤶⤶  @augmentWith HighlightableMixin, @name⤶  @augmentWith ParentStainerMixin, @name⤶⤶  color_hover: new Color 90, 90, 90⤶  color_pressed: new Color 128, 128, 128⤶  color_normal: new Color 230, 230, 230⤶⤶  constructor: ->⤶    super⤶    @appearance = new TemplatesIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶⤶    @actionableAsThumbnail = true⤶    @editorContentPropertyChangerButton = true⤶    @toolTipMessage = ＂useful snippets＂⤶⤶  bringTemplatesWindowIntoView: ->⤶    world.simpleEditorTemplates.bringToForeground()⤶    world.simpleEditorTemplates.fullRawMoveTo world.hand.position().subtract new Point 50, 50⤶    world.simpleEditorTemplates.fullRawMoveWithin world⤶⤶  mouseClickLeft: ->⤶    if world.simpleEditorTemplates?⤶      if world.simpleEditorTemplates.destroyed or !world.simpleEditorTemplates.parent?⤶        templatesWindow = menusHelper.createNewTemplatesWindow()⤶        @positionTemplatesWindowAndRegisterIt templatesWindow⤶      else if world.simpleEditorTemplates.parent? and world.simpleEditorTemplates.parent == world.basementWdgt.scrollPanel.contents⤶        world.add world.simpleEditorTemplates⤶        @bringTemplatesWindowIntoView()⤶      else if !world.simpleEditorTemplates.destroyed and world.simpleEditorTemplates.parent == world⤶        @bringTemplatesWindowIntoView()⤶    else⤶      templatesWindow = menusHelper.createNewTemplatesWindow()⤶      @positionTemplatesWindowAndRegisterIt templatesWindow⤶⤶  positionTemplatesWindowAndRegisterIt: (templatesWindow) ->⤶    templatesWindow.fullRawMoveTo world.hand.position().subtract new Point 50, 50⤶    templatesWindow.fullRawMoveWithin world⤶    world.add templatesWindow⤶    world.simpleEditorTemplates = templatesWindow⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.TextBoxCreatorButtonWdgt_coffeSource = "class TextBoxCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new TextIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂text box＂⤶⤶  createWidgetToBeHandled: ->⤶    switcheroo = new TextMorph2 ＂insert text here＂⤶    switcheroo.isEditable = true⤶    switcheroo.fittingSpecWhenBoundsTooLarge = FittingSpecTextInLargerBounds.SCALEUP⤶    switcheroo.fittingSpecWhenBoundsTooSmall = FittingSpecTextInSmallerBounds.SCALEDOWN⤶    switcheroo.alignMiddle()⤶    switcheroo.alignLeft()⤶    switcheroo.fullRawMoveTo @position()⤶    switcheroo.rawSetExtent new Point 150, 75⤶    return switcheroo⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.TextToolbarCreatorButtonWdgt_coffeSource = "class TextToolbarCreatorButtonWdgt extends ToolbarCreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new TextToolbarIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂Text tools＂⤶⤶  createWidgetToBeHandled: ->⤶⤶    toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶⤶    toolsPanel.addMany [⤶      new ChangeFontButtonWdgt @⤶      new BoldButtonWdgt⤶      new ItalicButtonWdgt⤶      new FormatAsCodeButtonWdgt⤶      new IncreaseFontSizeButtonWdgt⤶      new DecreaseFontSizeButtonWdgt⤶⤶      new AlignLeftButtonWdgt⤶      new AlignCenterButtonWdgt⤶      new AlignRightButtonWdgt⤶    ]⤶⤶    toolsPanel.disableDragsDropsAndEditing()⤶⤶    switcherooWm = new WindowWdgt nil, nil, toolsPanel⤶    switcherooWm.fullRawMoveTo new Point 90, Math.floor((world.height()-192)/2)⤶    switcherooWm.fullRawMoveWithin world⤶    world.add switcherooWm⤶    switcherooWm.rawSetExtent new Point 130, 156⤶⤶    return switcherooWm⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ToolbarCreatorButtonWdgt_coffeSource = "class ToolbarCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  mouseClickLeft: (ignored, ignored2, ignored3, ignored4, ignored5, ignored6, ignored7, partOfDoubleClick) ->⤶    if partOfDoubleClick⤶      return⤶    windowToBePlaced = @createWidgetToBeHandled()⤶    windowToBePlaced.fullRawMoveTo @topRight().add new Point 20,-40⤶    world.add windowToBePlaced⤶    windowToBePlaced.fullRawMoveWithin world⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.USAMapCreatorButtonWdgt_coffeSource = "class USAMapCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new LittleUSAIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂USA map＂⤶⤶  createWidgetToBeHandled: ->⤶    switcheroo = new SimpleUSAMapIconWdgt⤶    switcheroo.rawSetExtent new Point 230, 145⤶    switcheroo.setColor new Color 183, 183, 183⤶    return switcheroo⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.UncollapseIconButtonMorph_coffeSource = "# sends a message to a target object when pressed.⤶# Takes the shape of an icon, and can also host⤶# a morph to be used as ＂face＂⤶#⤶# You could achieve something similar by having⤶# an empty button containing an icon, but changing⤶# the color of a face belonging to a button is⤶# not yet supported.⤶# i.e. this is currently the simplest way to change the color⤶# of a non-rectangular button.⤶⤶class UncollapseIconButtonMorph extends EmptyButtonMorph⤶⤶  constructor: (@target) ->⤶    # can't set the parent as the target directly because this morph⤶    # might not have a parent yet.⤶    super true, @, 'actOnClick', new Widget⤶    @color_hover = new Color 255,153,0⤶    @color_pressed = @color_hover⤶    @appearance = new UncollapseIconAppearance @⤶    @toolTipMessage = ＂un-collapse window＂⤶⤶⤶  actOnClick: ->⤶    @parent.parent.contents.unCollapse()⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.UpperRightTriangleIconicButton_coffeSource = "# like an UpperRightTriangle, but it adds an icon on the top-right⤶# note that this should all be done with actual layouts but this⤶# will do for the moment.⤶⤶# this comment below is needed to figure out dependencies between classes⤶# REQUIRES globalFunctions⤶#⤶# to test this:⤶# create a canvas. then:⤶# new UpperRightTriangleIconicButton(world.children[0])⤶⤶class UpperRightTriangleIconicButton extends UpperRightTriangle⤶⤶  @augmentWith HighlightableMixin, @name⤶⤶  color: new Color 255, 255, 255⤶  pencilIconMorph: nil⤶⤶  constructor: (parent = nil) ->⤶    super⤶    @pencilIconMorph = new PencilIconMorph new Color 0,0,0⤶⤶    @pencilIconMorph.parentHasReLayouted = ->⤶      @updateResizerPosition()⤶      @moveInFrontOfSiblings()⤶⤶    @pencilIconMorph.updateResizerPosition = ->⤶      if @parent⤶        @silentUpdateResizerPosition()⤶        @changed()⤶⤶    @pencilIconMorph.silentUpdateResizerPosition = ->⤶      if @parent⤶        xDim = @parent.width()⤶        yDim = @parent.height()⤶        minDim = Math.min(xDim, yDim) / 2⤶⤶        @silentRawSetExtent new Point minDim, minDim⤶        @silentFullRawMoveTo new Point @parent.right() - minDim, @parent.top()⤶⤶    @add @pencilIconMorph⤶    @pencilIconMorph.updateResizerPosition()⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.UsefulTextSnippetsToolbarCreatorButtonWdgt_coffeSource = "class UsefulTextSnippetsToolbarCreatorButtonWdgt extends ToolbarCreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new TemplatesIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂Useful text snippets＂⤶⤶  createWidgetToBeHandled: ->⤶    return menusHelper.createNewTemplatesWindow()⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.VideoPlayButtonWdgt_coffeSource = "class VideoPlayButtonWdgt extends ExternalLinkButtonWdgt⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new VideoPlayIconAppearance @⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.VideoPlayCreatorButtonWdgt_coffeSource = "class VideoPlayCreatorButtonWdgt extends ExternalLinkCreatorButtonWdgt⤶⤶  constructor: (@color) ->⤶    super⤶    @appearance = new VideoPlayIconAppearance @⤶    @toolTipMessage = ＂link to video＂⤶⤶  createWidgetToBeHandled: ->⤶    switcheroo = new SimpleVideoLinkWdgt⤶    switcheroo.fullRawMoveTo @position()⤶    switcheroo.rawSetExtent new Point 330, 65⤶    return switcheroo⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.WindowWithPanelCreatorButtonWdgt_coffeSource = "class WindowWithPanelCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new WindowWithCroppingPanelIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂cropping panel＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new PanelWdgt, true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.WindowWithScrollPanelCreatorButtonWdgt_coffeSource = "class WindowWithScrollPanelCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new WindowWithScrollingPanelIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂scroll panel＂⤶⤶  createWidgetToBeHandled: ->⤶    switcherooWm = new WindowWdgt nil, nil, new ScrollPanelWdgt, true, true⤶    switcherooWm.rawSetExtent new Point 200, 200⤶    return switcherooWm⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.WindowsToolbarCreatorButtonWdgt_coffeSource = "class WindowsToolbarCreatorButtonWdgt extends ToolbarCreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new WindowsToolbarIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂many types of⧹npre-made windows＂⤶⤶  createWidgetToBeHandled: ->⤶⤶    toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt⤶⤶    toolsPanel.addMany [⤶      new EmptyWindowCreatorButtonWdgt⤶      new WindowWithPanelCreatorButtonWdgt⤶      new WindowWithScrollPanelCreatorButtonWdgt⤶      new ElasticWindowCreatorButtonWdgt⤶    ]⤶⤶    toolsPanel.disableDragsDropsAndEditing()⤶⤶    switcherooWm = new WindowWdgt nil, nil, toolsPanel⤶    switcherooWm.fullRawMoveTo new Point 90, Math.floor((world.height()-192)/2)⤶    switcherooWm.fullRawMoveWithin world⤶    world.add switcherooWm⤶    switcherooWm.rawSetExtent new Point 61, 192⤶    readmeWindow = menusHelper.createWindowsToolbarOneOffInfoWindowNextTo switcherooWm⤶    readmeWindow?.fullRawMoveTo new Point 300, 200⤶    readmeWindow?.rememberFractionalSituationInHoldingPanel()⤶⤶    return switcherooWm⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.WorldMapCreatorButtonWdgt_coffeSource = "class WorldMapCreatorButtonWdgt extends CreatorButtonWdgt⤶⤶  constructor: ->⤶    super⤶    @appearance = new LittleWorldIconAppearance @, WorldMorph.preferencesAndSettings.iconDarkLineColor⤶    @toolTipMessage = ＂world map＂⤶⤶  createWidgetToBeHandled: ->⤶    switcheroo = new SimpleWorldMapIconWdgt⤶    switcheroo.rawSetExtent new Point 240, 125⤶    switcheroo.setColor new Color 183, 183, 183⤶    return switcheroo⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.EventCommand_coffeSource = "⤶class EventCommand⤶  dateJSON: nil⤶  date: nil⤶⤶  execute: ->⤶⤶  constructor: ->⤶    @date = new Date⤶    @dateJSON = @date.toJSON()⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.AxisWdgt_coffeSource = "class AxisWdgt extends Widget⤶⤶  majorDimLine: nil⤶  ticksRectangles: nil⤶  labelsTextBoxes: nil⤶  min: 0⤶  max: 0⤶⤶  constructor: (@min = -15, @max = 15) ->⤶    super()⤶    @ticksRectangles = []⤶    @labelsTextBoxes = []⤶    @buildAndConnectChildren()⤶⤶  buildAndConnectChildren: ->⤶⤶    @majorDimLine = new RectangleMorph⤶    @majorDimLine.minimumExtent = new Point 1,1⤶⤶    @add @majorDimLine⤶⤶    numberOfTicks = @max - @min + 1⤶    for i in [0 ... numberOfTicks]⤶      @ticksRectangles[i] = new RectangleMorph⤶      @ticksRectangles[i].minimumExtent = new Point 1,1⤶      @add @ticksRectangles[i]⤶⤶      @labelsTextBoxes[i] = new StringMorph2 ＂＂⤶      @labelsTextBoxes[i].fittingSpecWhenBoundsTooLarge = FittingSpecTextInLargerBounds.SCALEUP⤶      @labelsTextBoxes[i].fittingSpecWhenBoundsTooSmall = FittingSpecTextInSmallerBounds.SCALEDOWN⤶      @add @labelsTextBoxes[i]⤶⤶    @invalidateLayout()⤶⤶  rawSetExtent: (aPoint) ->⤶    super⤶    @invalidateLayout()⤶⤶  # TODO some duplication of code here with⤶  # the method below⤶  distanceOfAxisOriginFromEdge: ->⤶    height = @height()⤶    width = @width()⤶⤶    numberOfTicks = @max - @min + 1⤶    if height > width⤶      # vert axis⤶      tickHeight = height/(numberOfTicks + 1)⤶      return new Point -5, tickHeight⤶    else⤶      # horiz axis⤶      tickHeight = width/(numberOfTicks + 1)⤶      return new Point tickHeight, 5 ⤶⤶⤶  doLayout: (newBoundsForThisLayout) ->⤶    #if !window.recalculatingLayouts⤶    #  debugger⤶⤶    if !newBoundsForThisLayout?⤶      if @desiredExtent?⤶        newBoundsForThisLayout = @desiredExtent⤶        @desiredExtent = nil⤶      else⤶        newBoundsForThisLayout = @extent()⤶⤶      if @desiredPosition?⤶        newBoundsForThisLayout = (new Rectangle @desiredPosition).setBoundsWidthAndHeight newBoundsForThisLayout⤶        @desiredPosition = nil⤶      else⤶        newBoundsForThisLayout = (new Rectangle @position()).setBoundsWidthAndHeight newBoundsForThisLayout⤶⤶    if @isCollapsed()⤶      @layoutIsValid = true⤶      @notifyChildrenThatParentHasReLayouted()⤶      return⤶⤶    @rawSetBounds newBoundsForThisLayout⤶⤶    # here we are disabling all the broken⤶    # rectangles. The reason is that all the⤶    # submorphs of the inspector are within the⤶    # bounds of the parent Widget. This means that⤶    # if only the parent morph breaks its rectangle⤶    # then everything is OK.⤶    # Also note that if you attach something else to its⤶    # boundary in a way that sticks out, that's still⤶    # going to be painted and moved OK.⤶    trackChanges.push false⤶⤶    height = @height()⤶    width = @width()⤶⤶    numberOfTicks = @max - @min + 1⤶    if height > width⤶      tickHeight = height/(numberOfTicks + 1)⤶    else⤶      tickHeight = width/(numberOfTicks + 1)⤶    heightOfTheDrawnBar = (numberOfTicks - 1) * tickHeight⤶⤶    thickness = 2⤶    labelSizeReduction = 0.7⤶    labelSpace = tickHeight* labelSizeReduction⤶⤶    if height > width⤶      @majorDimLine.fullRawMoveTo new Point @right() - 5, @top() + tickHeight⤶      @majorDimLine.setExtent new Point thickness, heightOfTheDrawnBar⤶    else⤶      @majorDimLine.fullRawMoveTo new Point @left() + tickHeight, @top() + 5⤶      @majorDimLine.setExtent new Point heightOfTheDrawnBar, thickness ⤶⤶    for i in [0 ... numberOfTicks]⤶      if height > width⤶        @ticksRectangles[i].fullRawMoveTo new Point @right()-10, @top() + tickHeight + Math.round(i * tickHeight)⤶        @ticksRectangles[i].setExtent new Point 5 + thickness, thickness⤶⤶        @labelsTextBoxes[i].setText ＂＂ + (@max - i)⤶        @labelsTextBoxes[i].fullRawMoveTo new Point @left(), @top() + tickHeight + Math.round(i * tickHeight) - labelSpace/2⤶        @labelsTextBoxes[i].setExtent new Point width - 10, labelSpace⤶        @labelsTextBoxes[i].alignMiddle()⤶        @labelsTextBoxes[i].alignRight()⤶⤶      else⤶        @ticksRectangles[i].fullRawMoveTo new Point @left() + tickHeight + Math.round(i * tickHeight), @top() + 5⤶        @ticksRectangles[i].setExtent new Point thickness, 5 + thickness⤶⤶        @labelsTextBoxes[i].setText ＂＂ + (@min + i)⤶        @labelsTextBoxes[i].fullRawMoveTo new Point @left() + tickHeight + Math.round(i * tickHeight) - labelSpace/2, @top() + 5 + 5⤶        @labelsTextBoxes[i].setExtent new Point labelSpace, height - 10⤶        @labelsTextBoxes[i].alignTop()⤶        @labelsTextBoxes[i].alignCenter()⤶⤶⤶    trackChanges.pop()⤶    @fullChanged()⤶⤶    @layoutIsValid = true⤶    @notifyChildrenThatParentHasReLayouted()⤶⤶    if Automator? and Automator.state != Automator.IDLE and Automator.alignmentOfMorphIDsMechanism⤶      world.alignIDsOfNextMorphsInSystemTests()".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.Example3DPlotWdgt_coffeSource = "# REQUIRES Point3D⤶⤶class Example3DPlotWdgt extends Widget⤶⤶⤶  vertices: nil⤶  quads: nil⤶  currentAngle: nil⤶  planeGrid: nil⤶  graphGrid: nil⤶  previousMousePoint: nil⤶  autoRotate: true⤶  ratio: nil⤶⤶  # a parameter for a slider to control,⤶  # so to show interactive graph/plot⤶  parameterValue: 0⤶⤶  constructor: ->⤶    super()⤶    @defaultRejectDrags = true⤶    @isLockingToPanels = true⤶⤶    @fps = 0⤶    world.steppingWdgts.add @⤶⤶    @setColor new Color 255, 125, 125⤶    @rawSetExtent new Point 200, 200⤶⤶⤶⤶    @edges = []⤶⤶    @quads = []⤶    ⤶    @currentAngle = 0⤶⤶    @step()⤶⤶  colloquialName: ->⤶    ＂3D plot＂⤶⤶  setParameter: (parameterValue, ignored, connectionsCalculationToken, superCall) ->⤶    if !superCall and connectionsCalculationToken == @connectionsCalculationToken then return else if !connectionsCalculationToken? then @connectionsCalculationToken = getRandomInt -20000, 20000 else @connectionsCalculationToken = connectionsCalculationToken⤶    @parameterValue = parameterValue⤶    @calculateNewPlotValues()⤶⤶  reactToTargetConnection: ->⤶    @calculateNewPlotValues()⤶⤶  numericalSetters: (menuEntriesStrings, functionNamesStrings) ->⤶    if !menuEntriesStrings? ⤶      menuEntriesStrings = []⤶      functionNamesStrings = []⤶    menuEntriesStrings.push ＂param＂⤶    functionNamesStrings.push ＂setParameter＂⤶⤶    if @addShapeSpecificNumericalSetters?⤶      [menuEntriesStrings, functionNamesStrings] = @addShapeSpecificNumericalSetters menuEntriesStrings, functionNamesStrings⤶⤶    return @deduplicateSettersAndSortByMenuEntryString menuEntriesStrings, functionNamesStrings⤶⤶  # ---------------------------------------------------------------⤶  # Outside of a stack, the plot can take any dimension.⤶  # When IN a stack, then we⤶  # want the content to force the ratio of the window so that the⤶  # plot grows/shrinks in both dimensions harmoniously as the⤶  # page is widened/narrowed.⤶⤶  justDropped: (whereIn) ->⤶    super⤶    if (whereIn instanceof SimpleVerticalStackPanelWdgt) and !(whereIn instanceof WindowWdgt)⤶      @constrainToRatio()⤶⤶  holderWindowJustDropped: (whereIn) ->⤶    if (whereIn instanceof SimpleVerticalStackPanelWdgt) and !(whereIn instanceof WindowWdgt)⤶      @constrainToRatio()⤶⤶  constrainToRatio: ->⤶    if @layoutSpecDetails?⤶      @ratio = @width() / @height()⤶      @layoutSpecDetails.canSetHeightFreely = false⤶      # force a resize, so the slide and the window⤶      # it's in will take the right ratio, and hence⤶      # the content will take the whole window it's in.⤶      # Note that the height of 0 here is ignored since⤶      # ＂rawSetWidthSizeHeightAccordingly＂ will⤶      # calculate the height.⤶      @rawSetExtent new Point @width(), 0⤶⤶  holderWindowJustBeenGrabbed: (whereFrom) ->⤶    if whereFrom instanceof SimpleVerticalStackPanelWdgt⤶      @freeFromRatioConstraints()⤶⤶  justBeenGrabbed: (whereFrom) ->⤶    if whereFrom instanceof SimpleVerticalStackPanelWdgt⤶      @freeFromRatioConstraints()⤶⤶  freeFromRatioConstraints: ->⤶    if @layoutSpecDetails?⤶      @layoutSpecDetails.canSetHeightFreely = true⤶      @ratio = nil⤶⤶      availableHeight = world.height() - 20⤶      if @parent.height() > availableHeight⤶        @parent.rawSetExtent (new Point Math.min((@width()/@height()) * availableHeight, world.width()), availableHeight).round()⤶        @parent.fullRawMoveTo world.hand.position().subtract @parent.extent().floorDivideBy 2⤶        @parent.fullRawMoveWithin world⤶⤶  rawSetWidthSizeHeightAccordingly: (newWidth) ->⤶    if @ratio?⤶      @rawSetExtent new Point newWidth, Math.round(newWidth / @ratio)⤶    else⤶      super⤶  # -----------------------------------------------------------------⤶⤶  step: ->⤶    if @autoRotate⤶      @currentAngle++⤶    @calculateNewPlotValues()⤶⤶  ⤶  # TODO seems like in a plot and a grid like these⤶  # one could really reuse past vertices and just modify them⤶  # and avoid aaaaaall these constructions every time⤶  calculateNewPlotValues: ->⤶    @vertices = []⤶⤶    @graphGrid = new Grid3D 21, 21, []⤶⤶    for i in [-1..1] by 0.1⤶      for j in [-1..1] by 0.1⤶        @vertices.push new Point3D i, j, (Math.sin(i*@parameterValue/30)) + (Math.sin(i*3 + @currentAngle/160) + Math.cos(j*3 + @currentAngle/160))/2⤶        @graphGrid.vertexIndexes.push @vertices.length - 1⤶⤶⤶    @planeGrid = new PlaneGrid3D 21, 21⤶⤶    for i in [-1..1] by 0.1⤶      @vertices.push new Point3D i, -1, 0⤶      @planeGrid.vertexIndexes.push @vertices.length - 1⤶      @vertices.push new Point3D i, 1, 0⤶      @planeGrid.vertexIndexes.push @vertices.length - 1⤶⤶    for j in [-1..1] by 0.1⤶      @vertices.push new Point3D -1, j, 0⤶      @planeGrid.vertexIndexes.push @vertices.length - 1⤶      @vertices.push new Point3D 1, j, 0⤶      @planeGrid.vertexIndexes.push @vertices.length - 1⤶⤶⤶    @changed()⤶⤶  # This method only paints this very morph's ＂image＂,⤶  # it doesn't descend the children⤶  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which⤶  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.⤶  # Note that this morph might paint something on the screen even if⤶  # it's not a ＂leaf＂.⤶  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle, appliedShadow) ->⤶⤶    if @preliminaryCheckNothingToDraw clippingRectangle, aContext⤶      return⤶⤶    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle⤶    return nil if w < 1 or h < 1 or area.isEmpty()⤶⤶    aContext.save()⤶⤶    # clip out the dirty rectangle as we are⤶    # going to paint the whole of the box⤶    aContext.clipToRectangle al,at,w,h⤶⤶    aContext.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @backgroundTransparency⤶⤶    # paintRectangle here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called before the scaling.⤶    @paintRectangle aContext, al, at, w, h, @backgroundColor⤶    aContext.scale ceilPixelRatio, ceilPixelRatio⤶⤶    morphPosition = @position()⤶    aContext.translate morphPosition.x, morphPosition.y⤶⤶    @renderingHelper aContext, new Color(255, 255, 255), appliedShadow⤶⤶    aContext.restore()⤶⤶    # paintHighlight here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called outside the effect of the scaling⤶    # (after the restore).⤶    @paintHighlight aContext, al, at, w, h⤶⤶  mouseMove: (pos, mouseButton) ->⤶    if world.hand.isThisPointerDraggingSomething() then return⤶    if mouseButton == 'left'⤶        if @previousMousePoint?⤶          @currentAngle +=  @previousMousePoint.x - pos.x⤶        @previousMousePoint = pos⤶⤶  mouseDownLeft: (pos) ->⤶    @autoRotate = false⤶    @bringToForeground()⤶⤶  mouseUpLeft: ->⤶    @autoRotate = true⤶⤶  mouseLeave: ->⤶    @autoRotate = true⤶⤶  renderingHelper: (context, color, appliedShadow) ->⤶⤶    height = @height()⤶    width = @width()⤶⤶    # clean the background⤶    if appliedShadow?⤶      context.globalAlpha = appliedShadow.alpha * @alpha⤶      context.fillStyle = (new Color 80, 80, 80).toString()⤶      context.fillRect 0, 0, width, height⤶      # let's avoid paint 3d stuff twice because⤶      # of the shadow⤶      return⤶⤶    context.fillStyle = WorldMorph.preferencesAndSettings.editableItemBackgroundColor.toString()⤶    context.fillRect 0, 0, width, height⤶⤶⤶    squareDim = Math.min width, height⤶    context.translate (width-squareDim)/2, (height-squareDim)/2⤶⤶    points = []⤶⤶    context.strokeStyle = 'black'⤶    originalAlpha = context.globalAlpha⤶    context.globalAlpha = 0.6⤶⤶    context.scale squareDim/300, squareDim/300⤶⤶    for eachVertex in @vertices⤶      newPoint = eachVertex.rotateX(90).rotateY(@currentAngle/2).translateXYZ(0,0.5,0).project(300, 300, 220, 3)⤶      newPoint.y -= squareDim * 1/6⤶      points.push newPoint⤶⤶    for eachQuad in @quads⤶      context.beginPath()⤶      context.moveTo points[eachQuad[0]].x, points[eachQuad[0]].y⤶      context.lineTo points[eachQuad[1]].x, points[eachQuad[1]].y⤶      context.lineTo points[eachQuad[2]].x, points[eachQuad[2]].y⤶      context.lineTo points[eachQuad[3]].x, points[eachQuad[3]].y⤶      context.closePath()⤶      context.stroke()⤶⤶    for eachEdge in @edges⤶      context.beginPath()⤶      context.moveTo points[eachEdge[0]].x, points[eachEdge[0]].y⤶      context.lineTo points[eachEdge[1]].x, points[eachEdge[1]].y⤶      context.closePath()⤶      context.stroke()⤶⤶⤶    context.beginPath()⤶⤶    # draw the ＂horizontals＂ in the grid (each point x,y with x+1,y)⤶    for i in [0...@graphGrid.width-1]⤶      for j in [0...@graphGrid.height]⤶        if i+1+j*@graphGrid.width < @graphGrid.vertexIndexes.length⤶          context.moveTo points[@graphGrid.vertexIndexes[i+j*@graphGrid.width]].x, points[@graphGrid.vertexIndexes[i+j*@graphGrid.width]].y⤶          context.lineTo points[@graphGrid.vertexIndexes[(i+1)+j*@graphGrid.width]].x, points[@graphGrid.vertexIndexes[(i+1)+j*@graphGrid.width]].y⤶⤶    # draw the ＂verticals＂ in the grid (each point x,y with x,y+1)⤶    for i in [0...@graphGrid.width]⤶      for j in [0...@graphGrid.height-1]⤶        if i+(j+1)*@graphGrid.width < @graphGrid.vertexIndexes.length⤶          context.moveTo points[@graphGrid.vertexIndexes[i+j*@graphGrid.width]].x, points[@graphGrid.vertexIndexes[i+j*@graphGrid.width]].y⤶          context.lineTo points[@graphGrid.vertexIndexes[i+(j+1)*@graphGrid.width]].x, points[@graphGrid.vertexIndexes[i+(j+1)*@graphGrid.width]].y⤶⤶    context.closePath()⤶⤶    context.strokeStyle = 'black'⤶    context.stroke()⤶⤶⤶⤶    context.beginPath()⤶⤶    for i in [0...@planeGrid.width-1]⤶      context.moveTo points[@planeGrid.vertexIndexes[2*i]].x, points[@planeGrid.vertexIndexes[2*i]].y⤶      context.lineTo points[@planeGrid.vertexIndexes[2*i+1]].x, points[@planeGrid.vertexIndexes[2*i+1]].y⤶⤶    for i in [@planeGrid.width-1...@planeGrid.width+@planeGrid.height]⤶      context.moveTo points[@planeGrid.vertexIndexes[2*i]].x, points[@planeGrid.vertexIndexes[2*i]].y⤶      context.lineTo points[@planeGrid.vertexIndexes[2*i+1]].x, points[@planeGrid.vertexIndexes[2*i+1]].y⤶⤶    context.closePath()⤶⤶    context.strokeStyle = 'grey'⤶    context.stroke()⤶⤶⤶    context.globalAlpha = originalAlpha⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ExampleBarPlotWdgt_coffeSource = "class ExampleBarPlotWdgt extends GraphsPlotsChartsWdgt⤶⤶  graphNumber: 1⤶  drawOnlyPartOfBoundingRect: false⤶⤶  constructor: (@drawOnlyPartOfBoundingRect)->⤶    super()⤶    @fps = 0.5⤶    world.steppingWdgts.add @⤶⤶  colloquialName: ->⤶    ＂Bar plot＂⤶⤶⤶  # This method only paints this very morph's ＂image＂,⤶  # it doesn't descend the children⤶  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which⤶  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.⤶  # Note that this morph might paint something on the screen even if⤶  # it's not a ＂leaf＂.⤶  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle, appliedShadow) ->⤶⤶    if @preliminaryCheckNothingToDraw clippingRectangle, aContext⤶      return⤶⤶    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle⤶    return nil if w < 1 or h < 1 or area.isEmpty()⤶⤶    aContext.save()⤶⤶    # clip out the dirty rectangle as we are⤶    # going to paint the whole of the box⤶    aContext.clipToRectangle al,at,w,h⤶⤶    aContext.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @backgroundTransparency⤶⤶    # paintRectangle here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called before the scaling.⤶    @paintRectangle aContext, al, at, w, h, @backgroundColor⤶    aContext.scale ceilPixelRatio, ceilPixelRatio⤶⤶    morphPosition = @position()⤶    aContext.translate morphPosition.x, morphPosition.y⤶⤶    @renderingHelper aContext, new Color(255, 255, 255), appliedShadow⤶⤶    aContext.restore()⤶⤶    # paintHighlight here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called outside the effect of the scaling⤶    # (after the restore).⤶    @paintHighlight aContext, al, at, w, h⤶⤶⤶  step: ->⤶    @graphNumber++⤶    @changed()⤶⤶  renderingHelper: (context, color, appliedShadow) ->⤶⤶    @seed = @graphNumber⤶    circleRadius = 5⤶    height = @height()⤶    width = @width()⤶⤶    if appliedShadow?⤶      @simpleShadow context, color, appliedShadow⤶      return⤶⤶    context.fillStyle = WorldMorph.preferencesAndSettings.editableItemBackgroundColor.toString()⤶    context.fillRect 0, 0, width, height⤶⤶    availableHeight = height⤶⤶    context.globalAlpha = @alpha⤶⤶    for i in [0..20]⤶      xPos = (i/21)*width⤶      heightPerc = 0.2 + Math.sin(i/100)*3 - i/10000 + @seeded_randn_bm() / 20⤶      if @seededRandom() > 0.5⤶        context.fillStyle = '#325FA2'⤶      else⤶        context.fillStyle = '#FF0000'⤶      context.fillRect Math.round(xPos), Math.round(availableHeight - (availableHeight * heightPerc)), Math.round((1/20)*width - 2), Math.round(availableHeight * heightPerc)⤶⤶    @drawBoundingBox context, color, appliedShadow⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ExampleFunctionPlotWdgt_coffeSource = "class ExampleFunctionPlotWdgt extends GraphsPlotsChartsWdgt⤶⤶  graphNumber: 1⤶  drawOnlyPartOfBoundingRect: false⤶⤶  constructor: (@drawOnlyPartOfBoundingRect)->⤶    super()⤶    @fps = 2⤶    world.steppingWdgts.add @⤶⤶  colloquialName: ->⤶    ＂Function plot＂⤶⤶⤶  # This method only paints this very morph's ＂image＂,⤶  # it doesn't descend the children⤶  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which⤶  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.⤶  # Note that this morph might paint something on the screen even if⤶  # it's not a ＂leaf＂.⤶  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle, appliedShadow) ->⤶⤶    if @preliminaryCheckNothingToDraw clippingRectangle, aContext⤶      return⤶⤶    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle⤶    return nil if w < 1 or h < 1 or area.isEmpty()⤶⤶    aContext.save()⤶⤶    # clip out the dirty rectangle as we are⤶    # going to paint the whole of the box⤶    aContext.clipToRectangle al,at,w,h⤶⤶    aContext.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @backgroundTransparency⤶⤶    # paintRectangle here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called before the scaling.⤶    @paintRectangle aContext, al, at, w, h, @backgroundColor⤶    aContext.scale ceilPixelRatio, ceilPixelRatio⤶⤶    morphPosition = @position()⤶    aContext.translate morphPosition.x, morphPosition.y⤶⤶    @renderingHelper aContext, new Color(255, 255, 255), appliedShadow⤶⤶    aContext.restore()⤶⤶    # paintHighlight here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called outside the effect of the scaling⤶    # (after the restore).⤶    @paintHighlight aContext, al, at, w, h⤶⤶⤶  step: ->⤶    @graphNumber++⤶    @changed()⤶⤶  renderingHelper: (context, color, appliedShadow) ->⤶⤶    @seed = @graphNumber⤶    circleRadius = 5⤶    height = @height()⤶    width = @width()⤶⤶    if appliedShadow?⤶      @simpleShadow context, color, appliedShadow⤶      return⤶⤶    context.fillStyle = WorldMorph.preferencesAndSettings.editableItemBackgroundColor.toString()⤶    context.fillRect 0, 0, width, height⤶⤶    availableHeight = height - 2 * circleRadius⤶    availableWidth = width - 2 * circleRadius⤶⤶    context.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @alpha⤶⤶    context.fillStyle = '#325FA2'⤶    angle = @seededRandom()⤶    for xPos in [0..width]⤶      i = xPos/width * 1000⤶      heightPerc = 0.5 + Math.sin(10*angle+i/(300*(angle+0.01)))/3 - i/(5000+50000*angle)⤶      context.fillRect xPos, availableHeight * heightPerc, 2,2⤶⤶    @drawBoundingBox context, color, appliedShadow⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");

window.ExampleScatterPlotWdgt_coffeSource = "class ExampleScatterPlotWdgt extends GraphsPlotsChartsWdgt⤶⤶⤶  graphNumber: 1⤶  drawOnlyPartOfBoundingRect: false⤶⤶  constructor: (@drawOnlyPartOfBoundingRect)->⤶    super()⤶    @fps = 1⤶    world.steppingWdgts.add @⤶⤶  colloquialName: ->⤶    ＂Scatter plot＂⤶⤶⤶  # This method only paints this very morph's ＂image＂,⤶  # it doesn't descend the children⤶  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which⤶  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.⤶  # Note that this morph might paint something on the screen even if⤶  # it's not a ＂leaf＂.⤶  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle, appliedShadow) ->⤶⤶    if @preliminaryCheckNothingToDraw clippingRectangle, aContext⤶      return⤶⤶    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle⤶    return nil if w < 1 or h < 1 or area.isEmpty()⤶⤶    aContext.save()⤶⤶    # clip out the dirty rectangle as we are⤶    # going to paint the whole of the box⤶    aContext.clipToRectangle al,at,w,h⤶⤶    aContext.globalAlpha = (if appliedShadow? then appliedShadow.alpha else 1) * @backgroundTransparency⤶⤶    # paintRectangle here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called before the scaling.⤶    @paintRectangle aContext, al, at, w, h, @backgroundColor⤶    aContext.scale ceilPixelRatio, ceilPixelRatio⤶⤶    morphPosition = @position()⤶    aContext.translate morphPosition.x, morphPosition.y⤶⤶    @renderingHelper aContext, new Color(255, 255, 255), appliedShadow⤶⤶    aContext.restore()⤶⤶    # paintHighlight here is made to work with⤶    # al, at, w, h which are actual pixels⤶    # rather than logical pixels, this is why⤶    # it's called outside the effect of the scaling⤶    # (after the restore).⤶    @paintHighlight aContext, al, at, w, h⤶⤶⤶  step: ->⤶    @graphNumber++⤶    @changed()⤶⤶  renderingHelper: (context, color, appliedShadow) ->⤶⤶    @seed = @graphNumber⤶    circleRadius = 5⤶    height = @height()⤶    width = @width()⤶⤶⤶    if appliedShadow?⤶      @simpleShadow context, color, appliedShadow⤶      return⤶⤶    context.fillStyle = WorldMorph.preferencesAndSettings.editableItemBackgroundColor.toString()⤶    context.fillRect 0, 0, width, height⤶⤶    availableHeight = height - 2 * circleRadius⤶    availableWidth = width - 2 * circleRadius⤶⤶    context.globalAlpha = @alpha⤶⤶    context.lineWidth = 1⤶⤶    context.beginPath()⤶    for i in [0...100]⤶      widthPerc = 0.4 + @seeded_randn_bm() / 10⤶      heightPerc = 0.4 + @seeded_randn_bm() / 10⤶⤶      context.moveTo Math.round(2 * circleRadius + availableWidth * widthPerc),Math.round(circleRadius + availableHeight * heightPerc)⤶      context.arc Math.round(circleRadius + availableWidth * widthPerc),Math.round(circleRadius + availableHeight * heightPerc),circleRadius,0,2*Math.PI⤶    context.strokeStyle = '#325FA2'⤶    context.stroke()⤶⤶    context.beginPath()⤶    for i in [0...100]⤶      widthPerc = 0.6 + @seeded_randn_bm() / 10⤶      heightPerc = 0.6 + @seeded_randn_bm() / 10⤶⤶      context.moveTo Math.round(2 * circleRadius + availableWidth * widthPerc),Math.round(circleRadius + availableHeight * heightPerc)⤶      context.arc Math.round(circleRadius + availableWidth * widthPerc),Math.round(circleRadius + availableHeight * heightPerc),circleRadius,0,2*Math.PI⤶⤶    context.strokeStyle = '#FF0000'⤶    context.stroke()⤶⤶    @drawBoundingBox context, color, appliedShadow⤶⤶⤶".replace(/＂/g, "\"").replace(/⧹/g, "\\").replace(/⤶/g, "\n");