var compileFGCode,loadJSFilesWithCoffeescriptSourcesPromise,storeSourceAndPotentiallyCompileItAndExecuteIt,storeSourcesAndPotentiallyCompileThemAndExecuteThem,waitNextJSEventLoopCycle,waitNextTurn,waitNextWorldCycle;waitNextTurn=function(){return window.preCompiled?waitNextWorldCycle():waitNextJSEventLoopCycle()},waitNextWorldCycle=function(){return function(){return new Promise((function(resolve,reject){return window.framePacedPromises.push(resolve)}))}},waitNextJSEventLoopCycle=function(){return function(){return new Promise((function(resolve,reject){return setTimeout((function(){return resolve(arguments)}),1)}))}},loadJSFilesWithCoffeescriptSourcesPromise=function(){var i,j,promiseChain,ref;for(promiseChain=Promise.resolve(),i=j=0,ref=numberOfSourceBatches;0<=ref?j<ref:j>ref;i=0<=ref?++j:--j)promiseChain=(promiseChain=promiseChain.then(waitNextTurn())).then(loadJSFilePromise("js/coffeescript-sources/sources_batch_"+i+".js"));return promiseChain},compileFGCode=function(codeSource,bare){var compiled,errorMessage;try{compiled=CoffeeScript.compile(codeSource,{bare:bare})}catch(error){throw errorMessage="error in compiling:\n",errorMessage+=codeSource+"\n",errorMessage+="error:\n",errorMessage+=error+"\n",new Error(errorMessage)}return compiled},storeSourcesAndPotentiallyCompileThemAndExecuteThem=function(justIngestSources){var createStoreSourceAndPotentiallyCompileItAndExecuteItClosure,eachFile,loadOrder,promiseChain;for(eachFile of(emptyLogDiv(),srcLoadCompileDebugWrites&&console.log("--------------------------------"),loadOrder=findLoadOrder(),window.hasProp={}.hasOwnProperty,window.indexOf=[].indexOf,window.slice=[].slice,createStoreSourceAndPotentiallyCompileItAndExecuteItClosure=function(fileName,justIngestSources){return function(){return storeSourceAndPotentiallyCompileItAndExecuteIt(fileName,justIngestSources)}},promiseChain=Promise.resolve(),loadOrder))"Class"!==eachFile&&"Mixin"!==eachFile&&"globalFunctions"!==eachFile&&(promiseChain=(promiseChain=promiseChain.then(waitNextTurn())).then(createStoreSourceAndPotentiallyCompileItAndExecuteItClosure(eachFile,justIngestSources)));return promiseChain.then((function(){var zip;return window.location.href.includes("generatePreCompiled")&&((zip=new JSZip).file("pre-compiled.js","window.preCompiled = true;\n\n"+window.JSSourcesContainer.content),zip.generateAsync({type:"blob"}).then((function(content){saveAs(content,"pre-compiled.zip")}))),removeLogDiv()})),promiseChain},storeSourceAndPotentiallyCompileItAndExecuteIt=function(fileName,justIngestSources){var fileContents,t0,t1;if(null==window.JSSourcesContainer&&(window.JSSourcesContainer={content:""}),fileContents=window[fileName+"_coffeSource"],srcLoadCompileDebugWrites&&(t0=performance.now()),srcLoadCompileDebugWrites&&console.log("checking whether "+fileName+" is already in the system "),/^class[ \t]*([a-zA-Z_$][0-9a-zA-Z_$]*)/m.test(fileContents)?justIngestSources?new Class(fileContents,!1,!1):new Class(fileContents,!0,!0):/^  onceAddedClassProperties:/m.test(fileContents)&&(justIngestSources?new Mixin(fileContents,!1,!1):new Mixin(fileContents,!0,!0)),srcLoadCompileDebugWrites&&console.log("compiling and evalling "+fileName+" from souce code"),emptyLogDiv(),addLineToLogDiv("compiling and evalling "+fileName),srcLoadCompileDebugWrites&&(t1=performance.now()),srcLoadCompileDebugWrites)return console.log("storeSourcesAndPotentiallyCompileThemAndExecuteThem call time: "+(t1-t0)+" milliseconds.")};