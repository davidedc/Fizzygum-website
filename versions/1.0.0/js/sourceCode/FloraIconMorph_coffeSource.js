// Generated by CoffeeScript 1.10.0
window.FloraIconMorph_coffeSource = '# FloraIconMorph //////////////////////////////////////////////////////\n\n\nclass FloraIconMorph extends Morph\n  # this is so we can create objects from the object class name \n  # (for the deserialization process)\n  namedClasses[@name] = @prototype\n\n  #constructor: ->\n  #  super()\n  #  @setColor new Color 0, 0, 0\n\n\n  # This method only paints this very morph\'s "image",\n  # it doesn\'t descend the children\n  # recursively. The recursion mechanism is done by fullPaintIntoAreaOrBlitFromBackBuffer, which\n  # eventually invokes paintIntoAreaOrBlitFromBackBuffer.\n  # Note that this morph might paint something on the screen even if\n  # it\'s not a "leaf".\n  paintIntoAreaOrBlitFromBackBuffer: (aContext, clippingRectangle) ->\n\n    if @preliminaryCheckNothingToDraw false, clippingRectangle, aContext\n      return\n\n    [area,sl,st,al,at,w,h] = @calculateKeyValues aContext, clippingRectangle\n    if area.isNotEmpty()\n      if w < 1 or h < 1\n        return null\n\n      aContext.save()\n\n      # clip out the dirty rectangle as we are\n      # going to paint the whole of the box\n      aContext.clipToRectangle al,at,w,h\n\n      aContext.globalAlpha = @alpha\n\n      aContext.scale pixelRatio, pixelRatio\n\n      morphPosition = @position()\n      aContext.translate morphPosition.x, morphPosition.y\n\n      height = @height()\n      width = @width()\n\n      squareDim = Math.min width, height\n\n      if width > height\n        aContext.translate (width-squareDim)/2,0\n      else\n        aContext.translate 0,(height-squareDim)/2\n\n      squareSize = 200\n      aContext.scale squareDim/squareSize, squareDim/squareSize\n\n      ## at this point, you draw in a squareSize x squareSize\n      ## canvas, and it gets painted in a square that fits\n      ## the morph, right in the middle.\n      @drawingIconInSquare aContext\n\n      aContext.restore()\n\n      # paintHighlight is usually made to work with\n      # al, at, w, h which are actual pixels\n      # rather than logical pixels, so it\'s generally used\n      # outside the effect of the scaling because\n      # of the pixelRatio (i.e. after the restore)\n      @paintHighlight aContext, al, at, w, h\n\n  oval = (context, x, y, w, h) ->\n    context.save()\n    context.beginPath()\n    context.translate x, y\n    context.scale w / 2, h / 2\n    context.arc 1, 1, 1, 0, 2 * Math.PI, false\n    context.closePath()\n    context.restore()\n    return\n\n  arc = (context, x, y, w, h, startAngle, endAngle, isClosed) ->\n    context.save()\n    context.beginPath()\n    context.translate x, y\n    context.scale w / 2, h / 2\n    context.arc 1, 1, 1, Math.PI / 180 * startAngle, Math.PI / 180 * endAngle, false\n    if isClosed\n      context.lineTo 1, 1\n      context.closePath()\n    context.restore()\n    return\n\n  drawingIconInSquare: (context) ->\n      #// Color Declarations\n      color2 = \'rgba(0, 0, 0, 1)\'\n      #// Oval Drawing\n      arc context, 101.5, 46.5, 77, 77, 193, 259, false\n      context.strokeStyle = color2\n      context.lineWidth = 3\n      context.stroke()\n      #// Oval 2 Drawing\n      arc context, 25.5, 46.5, 77, 77, 281, 347, false\n      context.strokeStyle = color2\n      context.lineWidth = 3\n      context.stroke()\n      #// Oval 3 Drawing\n      arc context, 71.5, 16.5, 62, 62, 357, 183, false\n      context.strokeStyle = color2\n      context.lineWidth = 3\n      context.stroke()\n      #// Bezier Drawing\n      context.beginPath()\n      context.moveTo 101.5, 73.5\n      context.lineTo 101.5, 110.5\n      context.strokeStyle = color2\n      context.lineWidth = 3\n      context.stroke()\n      #// Bezier 2 Drawing\n      context.beginPath()\n      context.moveTo 48.5, 108.5\n      context.lineTo 154.5, 108.5\n      context.lineCap = \'round\'\n      context.strokeStyle = color2\n      context.lineWidth = 4\n      context.stroke()\n      #// Bezier 3 Drawing\n      context.beginPath()\n      context.moveTo 47.5, 108.5\n      context.lineTo 54.5, 133.5\n      context.lineTo 150.5, 133.5\n      context.lineTo 154.5, 109.5\n      context.lineCap = \'round\'\n      context.strokeStyle = color2\n      context.lineWidth = 4\n      context.stroke()\n      #// Bezier 4 Drawing\n      context.beginPath()\n      context.moveTo 57, 134\n      context.lineTo 74, 192\n      context.lineTo 132, 192\n      context.lineTo 147, 133\n      context.strokeStyle = color2\n      context.lineWidth = 4\n      context.stroke()\n      #// Oval 4 Drawing\n      oval context, 99, 7, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 5 Drawing\n      oval context, 86, 19, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 6 Drawing\n      oval context, 86, 32, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 7 Drawing\n      oval context, 99, 19, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 8 Drawing\n      oval context, 112, 19, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 9 Drawing\n      oval context, 99, 32, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 10 Drawing\n      oval context, 112, 32, 4, 4\n      context.fillStyle = color2\n      context.fill()\n      #// Oval 11 Drawing\n      oval context, 99, 44, 4, 4\n      context.fillStyle = color2\n      context.fill()\n';
