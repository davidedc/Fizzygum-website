// Generated by CoffeeScript 1.12.7
window.GlassBoxBottomWdgt_coffeSource = '# the glassbox bottom goes UNDER a thumbnail, it provides\n# support for both a widget that would go on top of\n# it, and potentially for the glass box top that\n# might be at the top of everything.\n# This helps with the following: it provides a\n# visually contrasting background and it gives\n# a larger target to grab the widget.\n\nclass GlassBoxBottomWdgt extends BoxMorph\n\n  constructor: ->\n    super\n    @setColor new Color 230,230,230\n    @strokeColor = new Color 196,195,196\n    @setAlphaScaled 50\n\n  reLayout: ->\n\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    thumbnailSize = @width()\n\n    childrenNotHandlesNorCarets = @children.filter (m) ->\n      !((m instanceof HandleMorph) or (m instanceof CaretMorph))\n\n    for eachChild in childrenNotHandlesNorCarets\n\n      if (eachChild instanceof MenuItemMorph)\n        eachChild.fullRawMoveTo @topLeft().add((new Point 0 ,(@height() - eachChild.height())/2 ).round())\n      else\n        if eachChild.idealRatioWidthToHeight?\n          ratio = eachChild.idealRatioWidthToHeight\n          if ratio > 1\n            # more wide than tall\n            eachChild.rawSetExtent new Point thumbnailSize, thumbnailSize / ratio\n          else\n            # more tall than wide\n            eachChild.rawSetExtent new Point thumbnailSize * ratio, thumbnailSize \n        else\n          eachChild.rawSetExtent new Point thumbnailSize, thumbnailSize\n\n        eachChild.fullRawMoveTo @topLeft().add((new Point (thumbnailSize - eachChild.width())/2 ,(thumbnailSize - eachChild.height())/2 ).round())\n\n\n    trackChanges.pop()\n    @fullChanged()\n';
