// Generated by CoffeeScript 1.12.7
window.MenusHelper_coffeSource = '# REQUIRES DeepCopierMixin\n\n# All "actions" functions for all accessory menu items should belong\n# in here. Also helps so we don\'t pollute moprhs with a varying number\n# of helper functions, which is problematic for visual diffing\n# on inspectors (the number of methods keeps changing).\n\nclass MenusHelper\n\n  @augmentWith DeepCopierMixin\n\n  popUpDevToolsMenu: (morphOpeningThePopUp, widgetThisMenuIsAbout) ->\n    debugger\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "Dev Tools"\n    menu.addMenuItem "inspect", true, widgetThisMenuIsAbout, "inspect2", "open a window\\non all properties"\n    menu.addMenuItem "console", true, widgetThisMenuIsAbout, "createConsole", "console"\n\n    menu.popUpAtHand()\n\n\n\n\n\n  createReconfigurablePaint: ->\n    reconfPaint = new ReconfigurablePaintWdgt()\n    wm = new WindowWdgt nil, nil, reconfPaint\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position()\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createSimpleSlideWdgt: ->\n    simpleSlide = new SimpleSlideWdgt()\n    wm = new WindowWdgt nil, nil, simpleSlide\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position()\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createSimpleButton: ->\n    world.create new SimpleRectangularButtonMorph true, @, nil, new IconMorph(nil)\n\n  createSwitchButtonMorph: ->\n    button1 = new SimpleRectangularButtonMorph true, @, nil, new IconMorph(nil)\n    button2 = new SimpleRectangularButtonMorph true, @, nil, new StringMorph2 "Hello World! ⎲ƒ⎳⎷ ⎸⎹ "\n    world.create new SwitchButtonMorph [button1, button2]\n\n  createNewClippingBoxMorph: ->\n    world.create new ClippingBoxMorph()\n\n  makeSlidersButtonsStatesBright: ->\n    world.forAllChildrenBottomToTop (child) ->\n      if child instanceof SliderButtonMorph\n       child.pressColor = new Color 0, 255, 0\n       child.highlightColor = new Color 0, 0, 255\n       child.normalColor = new Color 0, 0, 0\n\n  # Icons --------------------------------------------------------------\n\n  makeIconWithText: ->\n    world.create new WidgetHolderWithCaptionWdgt "hey there", new BrushIconMorph()\n\n  makeEmptyIconWithText: ->\n    world.create new WidgetHolderWithCaptionWdgt "hey there"\n\n  makeFolderWindow: (a,b,c,d,e) ->\n    debugger\n    world.create new FolderWindowWdgt nil,nil,nil,nil, @\n\n  makeBouncingParticle: ->\n    world.create new BouncerWdgt()\n\n  createDestroyIconMorph: ->\n    world.create new DestroyIconMorph()\n\n  createUnderCarpetIconMorph: ->\n    world.create new UnderCarpetIconMorph()\n\n  createUncollapsedStateIconMorph: ->\n    world.create new UncollapsedStateIconMorph()\n\n  createCollapsedStateIconMorph: ->\n    world.create new CollapsedStateIconMorph()\n\n  createCloseIconButtonMorph: ->\n    world.create new CloseIconButtonMorph()\n\n  createScratchAreaIconMorph: ->\n    world.create new ScratchAreaIconMorph()\n\n  createFloraIconMorph: ->\n    world.create new FloraIconMorph()\n\n  createScooterIconMorph: ->\n    world.create new ScooterIconMorph()\n\n  createHeartIconMorph: ->\n    world.create new HeartIconMorph()\n\n\n  createPencil1IconMorph: ->\n    world.create new PencilIconMorph()\n\n  createPencil2IconMorph: ->\n    world.create new Pencil2IconMorph()\n\n  createBrushIconMorph: ->\n    world.create new BrushIconMorph()\n\n  createToothpasteIconMorph: ->\n    world.create new ToothpasteIconMorph()\n\n  createEraserIconMorph: ->\n    world.create new EraserIconMorph()\n\n\n  createTrashcanIconWdgt: ->\n    world.create new TrashcanIconWdgt()\n\n  createShortcutArrowIconWdgt: ->\n    world.create new ShortcutArrowIconWdgt()\n\n  createRasterPicIconWdgt: ->\n    world.create new RasterPicIconWdgt()\n\n  createPaintBucketIconWdgt: ->\n    world.create new PaintBucketIconWdgt()\n\n  createObjectIconWdgt: ->\n    world.create new ObjectIconWdgt()\n\n  createFolderIconWdgt: ->\n    world.create new FolderIconWdgt()\n\n  createBasementIconWdgt: ->\n    world.create new BasementIconWdgt()\n\n  createWidgetIconWdgt: ->\n    world.create new WidgetIconWdgt()\n\n  makeGenericReferenceIcon: ->\n    world.create new GenericShortcutIconWdgt()\n\n  makeGenericObjectIcon: ->\n    world.create new GenericObjectIconWdgt()\n\n\n  basementIconAndText: ->\n    world.add new BasementOpenerWdgt()\n\n  newScriptWindow: ->\n    scriptWdgt = new ScriptWdgt()\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createFizzyPaintLauncher: ->\n    scriptWdgt = new ScriptWdgt """\n      reconfPaint = new ReconfigurablePaintWdgt()\n      wm = new WindowWdgt nil, nil, reconfPaint\n      wm.setExtent new Point 460, 400\n      wm.fullRawMoveTo new Point 174, 114\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n\n      menusHelper.createDrawingsMakerOneOffInfoWindowNextTo wm\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    fizzyPaintLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Draw", new PaintBucketIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add fizzyPaintLauncher\n    fizzyPaintLauncher.setExtent new Point 75, 75\n    fizzyPaintLauncher.fullChanged()\n    return wm\n\n  createFizzyPaintLauncherAndItsIcon: ->\n    wm = @createFizzyPaintLauncher()\n    world.add wm\n\n  createSimpleDocumentLauncher: ->\n    scriptWdgt = new ScriptWdgt """\n      reconfPaint = new SimpleDocumentWdgt()\n      wm = new WindowWdgt nil, nil, reconfPaint\n      wm.setExtent new Point 370, 395\n      wm.fullRawMoveTo new Point 170, 88\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n\n      menusHelper.createDocsMakerOneOffInfoWindowNextTo wm\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    simpleDocumentLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Docs Maker", new TypewriterIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add simpleDocumentLauncher\n    simpleDocumentLauncher.setExtent new Point 75, 75\n    simpleDocumentLauncher.fullChanged()\n    return wm\n\n  createSimpleDocumentLauncherAndItsIcon: ->\n    wm = @createSimpleDocumentLauncher()\n    world.add wm\n\n  createSimpleSlideLauncher: ->\n    scriptWdgt = new ScriptWdgt """\n      reconfPaint = new SimpleSlideWdgt()\n      wm = new WindowWdgt nil, nil, reconfPaint\n      wm.setExtent new Point 460, 400\n      wm.fullRawMoveTo new Point 168, 134\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n \n      menusHelper.createSlidesMakerOneOffInfoWindowNextTo wm\n\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    simpleSlideLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Slides Maker", new SimpleSlideIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add simpleSlideLauncher\n    simpleSlideLauncher.setExtent new Point 75, 75\n    simpleSlideLauncher.fullChanged()\n    return wm\n\n  createSimpleSlideLauncherAndItsIcon: ->\n    wm = @createSimpleSlideLauncher()\n    world.add wm\n\n  createDashboardsLauncher: ->\n    scriptWdgt = new ScriptWdgt """\n      reconfPaint = new DashboardsWdgt()\n      wm = new WindowWdgt nil, nil, reconfPaint\n      wm.setExtent new Point 460, 400\n      wm.fullRawMoveTo world.hand.position()\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n\n      menusHelper.createDashboardsMakerOneOffInfoWindowNextTo wm\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    simpleDashboardsLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Dashboards", new DashboardsIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add simpleDashboardsLauncher\n    simpleDashboardsLauncher.setExtent new Point 75, 75\n    simpleDashboardsLauncher.fullChanged()\n    return wm\n\n\n  createPatchProgrammingLauncher: ->\n    scriptWdgt = new ScriptWdgt """\n      patchProgramming = new PatchProgrammingWdgt()\n      wm = new WindowWdgt nil, nil, patchProgramming\n      wm.setExtent new Point 460, 400\n      wm.fullRawMoveTo world.hand.position()\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n      \n      menusHelper.createPatchProgrammingOneOffInfoWindowNextTo wm\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    patchProgrammingLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Patch progr.", new PatchProgrammingIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add patchProgrammingLauncher\n    patchProgrammingLauncher.setExtent new Point 75, 75\n    patchProgrammingLauncher.fullChanged()\n    return wm\n\n  createGenericPanelLauncher: ->\n    scriptWdgt = new ScriptWdgt """\n      genericPanel = new StretchableEditableWdgt()\n      wm = new WindowWdgt nil, nil, genericPanel\n      wm.setExtent new Point 460, 400\n      wm.fullRawMoveTo world.hand.position()\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n\n      menusHelper.createGenericPanelOneOffInfoWindowNextTo wm\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    genericPanelLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Generic panel", new GenericPanelIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add genericPanelLauncher\n    genericPanelLauncher.setExtent new Point 75, 75\n    genericPanelLauncher.fullChanged()\n    return wm\n\n  createToolbarsOpener: ->\n    scriptWdgt = new ScriptWdgt """\n\n      # tools -------------------------------\n      toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt()\n\n      toolsPanel.addMany [\n        new TextToolbarCreatorButtonWdgt()\n        new UsefulTextSnippetsToolbarCreatorButtonWdgt()\n        new SlidesToolbarCreatorButtonWdgt()\n        new PlotsToolbarCreatorButtonWdgt()\n        new PatchProgrammingComponentsToolbarCreatorButtonWdgt()\n        new WindowsToolbarCreatorButtonWdgt()\n      ]\n\n      toolsPanel.disableDragsDropsAndEditing()\n\n      wm = new WindowWdgt nil, nil, toolsPanel\n      wm.setExtent new Point 60, 261\n      wm.fullRawMoveTo new Point 170, 170\n      wm.fullRawMoveWithin world\n      world.add wm\n      wm.changed()\n\n      menusHelper.createSuperToolbarOneOffInfoWindowNextTo wm\n\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    toolbarsOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "Super Toolbar", new ToolbarsIconWdgt()\n    toolbarsOpenerLauncher.toolTipMessage = "a toolbar to rule them all"\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add toolbarsOpenerLauncher\n    toolbarsOpenerLauncher.setExtent new Point 75, 75\n    toolbarsOpenerLauncher.fullChanged()\n    return wm\n\n  createNewTemplatesWindow: ->\n    sdspw = new SimpleDocumentScrollPanelWdgt()\n\n    sdspw.rawSetExtent new Point 365, 335\n\n    startingContent = new SimplePlainTextWdgt(\n      "Simply drag the items below into your document",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 18\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n\n    sdspw.setContents startingContent, 5\n\n\n    startingContent = new ArrowSIconWdgt()\n    startingContent.rawSetExtent new Point 25, 25\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    sdspw.addDivider()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Title",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontName nil, nil, startingContent.georgiaFontStack\n    startingContent.setFontSize 48\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    startingContent = new SimplePlainTextWdgt(\n      "Section X",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleWeight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    startingContent.setFontSize 28\n    sdspw.add startingContent\n\n    startingContent = new SimplePlainTextWdgt(\n      "Section X.X",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    startingContent.setFontSize 24\n    sdspw.add startingContent\n\n    sdspw.addNormalParagraph "Normal text."\n\n    startingContent = new SimplePlainTextWdgt(\n      "“Be careful--with quotations, you can damn anything.”\\n― André Malraux",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleItalic()\n    startingContent.alignRight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n\n    sdspw.addIndentedText "indentedText"\n    sdspw.addBulletPoint "bullet point"\n    sdspw.addCodeBlock "a code block with\\n  some example\\n    code in here"\n\n\n    startingContent = new SimplePlainTextWdgt(\n      "Spacers:",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleWeight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addSpacer()\n    sdspw.addSpacer 2\n    sdspw.addSpacer 3\n\n    startingContent = new SimplePlainTextWdgt(\n      "Divider line:",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleWeight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Links:",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleWeight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    startingContent = new SimpleLinkWdgt()\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    startingContent = new SimpleVideoLinkWdgt()\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Useful characters:",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleWeight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n    # in March 2018, greek chars take a long time to paint on OSX/Chrome so\n    # not adding those to the paragraph, however here they are:\n    # αβγδεζηθικλμνξοπρστυφχψω ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ\n    specialCharsParagraph = sdspw.addNormalParagraph "… †‡§ ↵⏎⇧␣ ☐☑☒✓X✗ •‣⁃◦ °±⁻¹²³µ×÷ℓΩ√∛∜∝∞∟∠∡∩∪∿≈⊂⋅⌀▫◽◻□⩽⩾ ¼½¾⅛⅜⅝⅞ ←↑→↓↔↕↵⇎⇏⇑⇒⇓⇔⇕ ©®™ $£€¥"\n    specialCharsParagraph.setFontSize 16\n\n\n    sdspw.makeAllContentIntoTemplates()\n\n    wm = new WindowWdgt nil, nil, sdspw\n    wm.setExtent new Point 370, 335\n    wm.setTitleWithoutPrependedContentName "useful snippets"\n    wm.changed()\n\n    return wm\n\n\n  createFanout: ->\n    fanoutWdgt = new FanoutWdgt()\n    world.create fanoutWdgt\n    fanoutWdgt.setExtent new Point 100, 100\n\n  createCalculatingPatchNode: ->\n    calculatingPatchNodeWdgt = new CalculatingPatchNodeWdgt()\n    wm = new WindowWdgt nil, nil, calculatingPatchNodeWdgt, true\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createDiffingPatchNode: ->\n    diffingPatchNodeWdgt = new DiffingPatchNodeWdgt()\n    wm = new WindowWdgt nil, nil, diffingPatchNodeWdgt, true\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createSliderWithSmallestValueAtBottomEnd: ->\n    debugger\n    world.create new SliderMorph nil, nil, nil, nil, nil, true\n\n  createRegexSubstitutionPatchNodeWdgt: ->\n    regexSubstitutionPatchNodeWdgt = new RegexSubstitutionPatchNodeWdgt()\n    wm = new WindowWdgt nil, nil, regexSubstitutionPatchNodeWdgt, true\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  throwAnError: ->\n    throw new Error "you manually threw an error!"\n\n  createStretchablePanel: ->\n    stretchablePanel = new StretchableWidgetContainerWdgt()\n    world.create stretchablePanel\n    stretchablePanel.setExtent new Point 400, 300\n\n  createToolsPanel: ->\n    toolPanel = new ScrollPanelWdgt new ToolPanelWdgt()\n    wm = new WindowWdgt nil, nil, toolPanel, true\n    wm.setExtent new Point 200, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createHorizontalMenuPanelPanel: ->\n    horizontalMenuPanel = new HorizontalMenuPanelWdgt()\n    wm = new WindowWdgt nil, nil, horizontalMenuPanel, true\n    wm.setExtent new Point 200, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  popUpMore1IconsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "More Icons 1"\n    menu.addMenuItem "Pencil 1 icon", true, menusHelper, "createPencil1IconMorph"\n    menu.addMenuItem "Pencil 2 icon", true, menusHelper, "createPencil2IconMorph"\n    menu.addMenuItem "Brush icon", true, menusHelper, "createBrushIconMorph"\n    menu.addMenuItem "Toothpaste icon", true, menusHelper, "createToothpasteIconMorph"\n    menu.addMenuItem "Eraser icon", true, menusHelper, "createEraserIconMorph"\n    menu.addMenuItem "Trashcan icon", true, menusHelper, "createTrashcanIconWdgt"\n    menu.addMenuItem "Shortcut arrow icon", true, menusHelper, "createShortcutArrowIconWdgt"\n    menu.addMenuItem "Raster pic icon", true, menusHelper, "createRasterPicIconWdgt"\n    menu.addMenuItem "Paint bucket icon", true, menusHelper, "createPaintBucketIconWdgt"\n    menu.addMenuItem "Object icon", true, menusHelper, "createObjectIconWdgt"\n    menu.addMenuItem "Folder icon", true, menusHelper, "createFolderIconWdgt"\n    menu.addMenuItem "Basement icon", true, menusHelper, "createBasementIconWdgt"\n    menu.addMenuItem "Widget icon", true, menusHelper, "createWidgetIconWdgt"\n    menu.popUpAtHand()\n\n  popUpMore2IconsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "More Icons 2"\n    menu.addMenuItem "Format as code icon", true, menusHelper, "createFormatAsCodeIconWdgt"\n    menu.addMenuItem "Ch. X icon", true, menusHelper, "createChXIconWdgt"\n    menu.addMenuItem "Ch. X.X icon", true, menusHelper, "createChXXIconWdgt"\n    menu.addMenuItem "Ch. X.X.X icon", true, menusHelper, "createChXXXIconWdgt"\n    menu.addMenuItem "Align right icon", true, menusHelper, "createAlignRightIconWdgt"\n    menu.addMenuItem "Align center icon", true, menusHelper, "createAlignCenterIconWdgt"\n    menu.addMenuItem "Align left icon", true, menusHelper, "createAlignLeftIconWdgt"\n    menu.addMenuItem "Bold icon", true, menusHelper, "createBoldIconWdgt"\n    menu.addMenuItem "Italic icon", true, menusHelper, "createItalicIconWdgt"\n    menu.addMenuItem "Information icon", true, menusHelper, "createInformationIconWdgt"\n    menu.addMenuItem "Textbox icon", true, menusHelper, "createTextboxIconWdgt"\n    menu.addMenuItem "Video play icon", true, menusHelper, "createVideoPlayIconWdgt"\n\n    menu.addMenuItem "Decrease font size icon", true, menusHelper, "createDecreaseFontSizeIconWdgt"\n    menu.addMenuItem "Increase font size icon", true, menusHelper, "createIncreaseFontSizeIconWdgt"\n    menu.addMenuItem "External link icon", true, menusHelper, "createExternalLinkIconWdgt"\n    menu.addMenuItem "Templates icon", true, menusHelper, "createTemplatesIconWdgt"\n\n    menu.popUpAtHand()\n\n  popUpMore3IconsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "More Icons 2"\n    menu.addMenuItem "Fizzygum logo", true, menusHelper, "createFizzygumLogoIconWdgt"\n    menu.addMenuItem "Fizzygum logo with text", true, menusHelper, "createFizzygumLogoWithTextIconWdgt"\n    menu.addMenuItem "Vaporwave sun", true, menusHelper, "createVaporwaveSunIconWdgt"\n    menu.addMenuItem "Vaporwave background", true, menusHelper, "createVaporwaveBackgroundIconWdgt"\n    menu.addMenuItem "Change font icon", true, menusHelper, "createChangeFontIconWdgt"\n    menu.addMenuItem "C <-> F converter icon", true, menusHelper, "createCFDegreesConverterIconWdgt"\n    menu.addMenuItem "Simple slide icon", true, menusHelper, "createSimpleSlideIconWdgt"\n    menu.addMenuItem "Typewriter icon", true, menusHelper, "createTypewriterIconWdgt"\n    menu.addMenuItem "Little world icon", true, menusHelper, "createLittleWorldIconWdgt"\n    menu.addMenuItem "Little USA icon", true, menusHelper, "createLittleUSAIconWdgt"\n    menu.addMenuItem "Map pin icon", true, menusHelper, "createMapPinIconWdgt"\n    menu.addMenuItem "Save icon", true, menusHelper, "createSaveIconWdgt"\n\n    menu.popUpAtHand()\n\n  createFizzygumLogoWithTextIconWdgt : ->\n    world.create new FizzygumLogoWithTextIconWdgt()\n\n  createVaporwaveBackgroundIconWdgt : ->\n    world.create new VaporwaveBackgroundIconWdgt()\n\n  createCFDegreesConverterIconWdgt : ->\n    world.create new CFDegreesConverterIconWdgt()\n\n  createFizzygumLogoIconWdgt : ->\n    world.create new FizzygumLogoIconWdgt()\n\n  createVaporwaveSunIconWdgt : ->\n    world.create new VaporwaveSunIconWdgt()\n\n  createLittleWorldIconWdgt : ->\n    world.create new LittleWorldIconWdgt()\n\n  createChangeFontIconWdgt : ->\n    world.create new ChangeFontIconWdgt()\n\n  createSimpleSlideIconWdgt : ->\n    world.create new SimpleSlideIconWdgt()\n\n  createTypewriterIconWdgt : ->\n    world.create new TypewriterIconWdgt()\n\n  createLittleUSAIconWdgt : ->\n    world.create new LittleUSAIconWdgt()\n\n  createMapPinIconWdgt : ->\n    world.create new MapPinIconWdgt()\n\n  createSaveIconWdgt : ->\n    world.create new SaveIconWdgt()\n\n\n  popUpArrowsIconsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "Arrows"\n    menu.addMenuItem "Arrow N icon", true, menusHelper, "createArrowNIconWdgt"\n    menu.addMenuItem "Arrow S icon", true, menusHelper, "createArrowSIconWdgt"\n    menu.addMenuItem "Arrow W icon", true, menusHelper, "createArrowWIconWdgt"\n    menu.addMenuItem "Arrow E icon", true, menusHelper, "createArrowEIconWdgt"\n    menu.addMenuItem "Arrow NW icon", true, menusHelper, "createArrowNWIconWdgt"\n    menu.addMenuItem "Arrow NE icon", true, menusHelper, "createArrowNEIconWdgt"\n    menu.addMenuItem "Arrow SE icon", true, menusHelper, "createArrowSEIconWdgt"\n    menu.addMenuItem "Arrow SW icon", true, menusHelper, "createArrowSWIconWdgt"\n    menu.popUpAtHand()\n\n  createArrowEIconWdgt: ->\n    world.create new ArrowEIconWdgt()\n\n  createArrowNEIconWdgt: ->\n    world.create new ArrowNEIconWdgt()\n\n  createArrowNIconWdgt: ->\n    world.create new ArrowNIconWdgt()\n\n  createArrowNWIconWdgt: ->\n    world.create new ArrowNWIconWdgt()\n\n  createArrowSEIconWdgt: ->\n    world.create new ArrowSEIconWdgt()\n\n  createArrowSIconWdgt: ->\n    world.create new ArrowSIconWdgt()\n\n  createArrowSWIconWdgt: ->\n    world.create new ArrowSWIconWdgt()\n\n  createArrowWIconWdgt: ->\n    world.create new ArrowWIconWdgt()\n\n  createDecreaseFontSizeIconWdgt: ->\n    world.create new DecreaseFontSizeIconWdgt()\n\n  createExternalLinkIconWdgt: ->\n    world.create new ExternalLinkIconWdgt()\n\n  createIncreaseFontSizeIconWdgt: ->\n    world.create new IncreaseFontSizeIconWdgt()\n\n  createTemplatesIconWdgt: ->\n    world.create new TemplatesIconWdgt()\n\n  createFormatAsCodeIconWdgt: ->\n    world.create new FormatAsCodeIconWdgt()\n\n  createChXIconWdgt: ->\n    world.create new ChapterXIconWdgt()\n\n  createChXXIconWdgt: ->\n    world.create new ChapterXXIconWdgt()\n\n  createChXXXIconWdgt: ->\n    world.create new ChapterXXXIconWdgt()\n\n  createAlignRightIconWdgt: ->\n    world.create new AlignRightIconWdgt()\n\n  createAlignCenterIconWdgt: ->\n    world.create new AlignCenterIconWdgt()\n\n  createAlignLeftIconWdgt: ->\n    world.create new AlignLeftIconWdgt()\n\n  createWorldMapIconMorph: ->\n    world.create new SimpleWorldMapIconWdgt()\n\n  createUSAMapIconMorph: ->\n    world.create new SimpleUSAMapIconWdgt()\n\n  createBoldIconWdgt: ->\n    world.create new BoldIconWdgt()\n\n  createItalicIconWdgt: ->\n    world.create new ItalicIconWdgt()\n\n  createInformationIconWdgt: ->\n    world.create new InformationIconWdgt()\n\n  createTextboxIconWdgt: ->\n    world.create new TextIconWdgt()\n\n  createVideoPlayIconWdgt: ->\n    world.create new VideoPlayIconWdgt()\n\n  createSimpleDocumentWdgt: ->\n    simpleDocument = new SimpleDocumentWdgt()\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.setExtent new Point 368, 335\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    world.add wm\n    wm.changed()\n\n  createSimpleLinkWdgt: ->\n    simpleLinkWdgt = new SimpleLinkWdgt()\n    simpleLinkWdgt.setExtent new Point 405, 50\n    world.create simpleLinkWdgt\n\n  createSimpleVideoLinkWdgt: ->\n    simpleVideoLinkWdgt = new SimpleVideoLinkWdgt()\n    simpleVideoLinkWdgt.setExtent new Point 405, 50\n    world.create simpleVideoLinkWdgt\n\n  create2DAxis: ->\n    vertAxis = new AxisWdgt()\n    vertAxis.setExtent new Point 40, 300\n    world.create vertAxis\n\n  createExampleScatterPlot: ->\n    exampleScatterPlot = new ExampleScatterPlotWdgt()\n    exampleScatterPlot.setExtent new Point 300, 300\n    world.create exampleScatterPlot\n\n  createExampleScatterPlotWithAxes: ->\n    exampleScatterPlot = new ExampleScatterPlotWdgt()\n    plotWithAxesWdgt = new PlotWithAxesWdgt exampleScatterPlot\n    plotWithAxesWdgt.rawSetExtent new Point 300, 300\n    world.create plotWithAxesWdgt\n\n  createExampleFunctionPlot: ->\n    exampleFunctionPlot = new ExampleFunctionPlotWdgt()\n    exampleFunctionPlot.setExtent new Point 300, 300\n    world.create exampleFunctionPlot\n  \n  createExampleBarPlot: ->\n    exampleBarPlot = new ExampleBarPlotWdgt()\n    exampleBarPlot.setExtent new Point 300, 300\n    world.create exampleBarPlot\n\n  createExample3DPlot: ->\n    example3DPlot = new Example3DPlotWdgt()\n    example3DPlot.setExtent new Point 300, 300\n    world.create example3DPlot\n\n  popUpMapsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "Maps"\n    menu.addMenuItem "world map", true, menusHelper, "createWorldMapIconMorph", "others"\n    menu.addMenuItem "USA map", true, menusHelper, "createUSAMapIconMorph", "others"\n\n    menu.popUpAtHand()\n\n  popUpGraphsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "graphs"\n    menu.addMenuItem "axis", true, menusHelper, "create2DAxis"\n    menu.addMenuItem "scatter plot", true, menusHelper, "createExampleScatterPlot"\n    menu.addMenuItem "scatter plot with axes", true, menusHelper, "createExampleScatterPlotWithAxes"\n    menu.addMenuItem "function plot", true, menusHelper, "createExampleFunctionPlot"\n    menu.addMenuItem "bar plot", true, menusHelper, "createExampleBarPlot"\n    menu.addMenuItem "3D plot", true, menusHelper, "createExample3DPlot"\n\n    menu.popUpAtHand()\n\n  popUpSupportDocsMenu: (morphOpeningThePopUp) ->\n    menu = new MenuMorph morphOpeningThePopUp,  false, @, true, true, "Support Docs"\n    menu.addMenuItem "welcome message", true, @, "createWelcomeMessageWindowAndShortcut", "welcome message"\n\n    menu.popUpAtHand()\n\n  createWelcomeMessageWindowAndShortcut: ->\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new FizzygumLogoIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n\n    startingContent = new SimplePlainTextWdgt(\n      "Welcome to Fizzygum",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 24\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    startingContent = new SimplePlainTextWdgt(\n      "version 1.1.0",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 9\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()\n\n\n    sdspw.addNormalParagraph "Welcome to a powerful new framework designed from the ground up to do complex things, simply. Welcome to Fizzygum."\n\n    sdspw.addSpacer()\n\n    startingContent = new SimplePlainTextWdgt(\n      "What it can do for you",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Fizzygum enables you to do all of this and more:"\n\n    sdspw.addBulletPoint "make dashboards and visualise data (plots, maps, ...)"\n    sdspw.addBulletPoint "author, organise and navigate documents (drawings / text docs / slides)"\n    sdspw.addBulletPoint "embed live graphs, dynamic calculations or even entire running programs inside any document, via simple drag & drop"\n    sdspw.addBulletPoint "go beyond traditional embedding: you can now infinitely nest and compose programs and documents. Need a program inside a presentation inside a text? You have it"\n    sdspw.addBulletPoint "make custom utilities (e.g. temperature converter) by simply connecting existing components - no coding required"\n    sdspw.addBulletPoint "use the internal development tools to create entirely new apps, or change existing ones while they are running. Add custom features without even needing to refresh the page."\n    sdspw.addBulletPoint "do all of the above, concurrently"\n\n    sdspw.addSpacer()\n\n    startingContent = new SimplePlainTextWdgt(\n      "New here?",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Feel free to click around this sandbox. Just reload to start again from scratch."\n\n    sdspw.addSpacer()\n    sdspw.addNormalParagraph "Also check out some screenshots here:"\n\n    startingContent = new SimpleLinkWdgt "screenshots"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    sdspw.addNormalParagraph "...or watch some quick demos on the Youtube channel:"\n\n    startingContent = new SimpleVideoLinkWdgt "YouTube channel"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    sdspw.addNormalParagraph "...or docs here:"\n\n    startingContent = new SimpleLinkWdgt "docs"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    sdspw.addSpacer(2)\n\n    startingContent = new SimplePlainTextWdgt(\n      "Get in touch",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Mail? Mailing list? Facebook page? Twitter? Chat? We have it all."\n\n    startingContent = new SimpleLinkWdgt "contacts"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Welcome"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n\n    readmeLauncher = new IconicDesktopSystemDocumentShortcutWdgt wm, "Welcome", new WelcomeIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add readmeLauncher\n    readmeLauncher.setExtent new Point 75, 75\n    readmeLauncher.fullChanged()\n\n  createSuperToolbarOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_superToolbar_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new ToolbarsIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Super Toolbar",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "The Super Toolbar can create all other toolbars for you, and from those toolbars you can create any widget.\\n\\nThis is handy because any widget can go in any document... so here is a way to access them all.\\n\\nFor an example on how this is useful, see the video on `mixing widgets`:"\n\n    startingContent = new SimpleVideoLinkWdgt "Mixing widgets"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Super Toolbar info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_superToolbar_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createDocsMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_docsMaker_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new TypewriterIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Docs Maker",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "A basic text editor. But you can drop anything inside it.\\n\\nNote that the Docs Maker works \'by paragraph\': you can drag/drop paragraphs, and when you change the style the whole paragraph is affected.\\n\\nQuickest way to compose a document is to drag/drop snippets, which you can find by clicking the button that looks like this:"\n\n    startingContent = new TemplatesIconWdgt()\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    sdspw.addSpacer()\n\n    sdspw.addNormalParagraph "Once you are done editing, click the pencil icon on the window bar."\n    sdspw.addNormalParagraph "To see an example of use, check out the video here:"\n\n    startingContent = new SimpleVideoLinkWdgt "Docs Maker"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Docs Maker info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_docsMaker_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createDrawingsMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_drawingsMaker_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new PaintBucketIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Drawings Maker",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Simple paint app. But you can drop anything inside it (try with the clock) to \'use it as a stamp\'."\n\n    sdspw.addNormalParagraph "Once you are done editing, click the pencil icon on the window bar."\n    sdspw.addNormalParagraph "To see an example of use, check out the video here:"\n\n    startingContent = new SimpleVideoLinkWdgt "Docs Maker"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    sdspw.addNormalParagraph "You can also edit the tools you use, by clicking on the pencil icon next to the tool."\n    sdspw.addNormalParagraph "To see how an example of editing the tools, see this video:"\n\n    startingContent = new SimpleVideoLinkWdgt "Hacking Fizzygum from within Fizzygum"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Drawings Maker info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_drawingsMaker_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createSlidesMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_slidesMaker_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new SimpleSlideIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Slides Maker",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Anything you drop inside the slide \'keeps proportion\' when resized, which makes it handy to put pins on maps, add callouts, arrange text in custom layouts etc."\n\n    sdspw.addNormalParagraph "Once you are done editing, click the pencil icon on the window bar."\n    sdspw.addNormalParagraph "To see an example of use, check out the video here:"\n\n    startingContent = new SimpleVideoLinkWdgt "Slides Maker"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Slides Maker info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_slidesMaker_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createDashboardsMakerOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_dashboardsMaker_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new DashboardsIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Dashboards Maker",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Lets you arrange a choice of graphs/charts/plots/maps in any way you please. The visualisations can also be interactive (as in the 3D plot example, which you can drag to rotate) and/or calculated on the fly.\\n\\nOn the bar on the left you can find four example graphs and two example maps."\n\n    sdspw.addNormalParagraph "Once you are done editing, click the pencil icon on the window bar."\n    sdspw.addNormalParagraph "To see an example of use, check out the video here:"\n\n    startingContent = new SimpleVideoLinkWdgt "Dashboards Maker"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Dashboards Maker info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_dashboardsMaker_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createPatchProgrammingOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_patchProgramming_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new PatchProgrammingIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Patch Programming",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "\'Patch programming\' is a type of visual programming where you simply connect together existing widgets. It\'s useful to make simple applications/utilities quickly."\n    sdspw.addNormalParagraph "You can imagine the widgets being \'patched together\' by imaginary wires."\n    sdspw.addNormalParagraph "You can see in the `example docs` folder a °C ↔ °F converter example made with this."\n    sdspw.addNormalParagraph "Once you are done editing, click the pencil icon on the window bar."\n    sdspw.addNormalParagraph "To see an example of use, check out the video here:"\n\n    startingContent = new SimpleVideoLinkWdgt "Patch programming"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Patch Programming info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_patchProgramming_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createGenericPanelOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_genericPanel_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new GenericPanelIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Generic Panel",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "You can use this panel to temporarily hold widgets, or to put together any mix of widgets. It\'s just a more generic version of slides and dashboards."\n    sdspw.addNormalParagraph "Once you are done editing, click the pencil icon on the window bar."\n    sdspw.addNormalParagraph "To see an example of use, check out the video here:"\n\n    startingContent = new SimpleVideoLinkWdgt "Generic Panels"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Generic Panels info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_genericPanel_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createBasementOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_basement_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new BasementIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Basement",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "Drag things in here to recycle them.\\n\\nClosed or invisible items also end up in here, and the items that can\'t be used again are automatically recycled."\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Basement info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_basement_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n\n  createWindowsToolbarOneOffInfoWindowNextTo: (nextToThisWidget) ->\n    if world.infoDoc_windowsToolbar_created\n      return nil\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new WindowsToolbarIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Types of windows",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 22\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n    sdspw.addDivider()    \n\n    sdspw.addNormalParagraph "There are four main types of windows"\n    sdspw.addBulletPoint "empty windows, with a target area where you can drop other items in"\n    sdspw.addBulletPoint "windows that crop their content"\n    sdspw.addBulletPoint "windows with a scroll view on their content"\n    sdspw.addBulletPoint "windows with an elastic panel, such that when resized the content will resize as well"\n\n    sdspw.addNormalParagraph "Check out some examples of use in this video:"\n\n    startingContent = new SimpleVideoLinkWdgt "Using windows"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.rawSetExtent new Point 365, 405\n    wm.fullRawMoveFullCenterTo world.center()\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Windows info"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n    world.infoDoc_windowsToolbar_created = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just destroy it instead, since we only show\n    # it once.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.destroy()\n\n    wm.fullRawMoveToSideOf nextToThisWidget\n    wm.rememberFractionalSituationInHoldingPanel()\n    return wm\n\n  createDegreesConverterOpener: (inWhichFolder) ->\n    scriptWdgt = new ScriptWdgt """\n\n     menusHelper.createDegreesConverterWindowOrBringItUpIfAlreadyCreated()\n\n\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    degreesConverterOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "°C ↔ °F", new DegreesConverterIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    \n    degreesConverterOpenerLauncher.setExtent new Point 75, 75\n    if inWhichFolder?\n      inWhichFolder.contents.contents.add degreesConverterOpenerLauncher\n    else\n      world.add degreesConverterOpenerLauncher\n    return wm\n\n  createSampleDashboardOpener: (inWhichFolder) ->\n    scriptWdgt = new ScriptWdgt """\n\n     menusHelper.createSampleDashboardWindowOrBringItUpIfAlreadyCreated()\n\n\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    degreesConverterOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "sample dashb", new GenericShortcutIconWdgt new DashboardsIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    \n    degreesConverterOpenerLauncher.setExtent new Point 75, 75\n    if inWhichFolder?\n      inWhichFolder.contents.contents.add degreesConverterOpenerLauncher\n    else\n      world.add degreesConverterOpenerLauncher\n    return wm\n\n\n  createSampleDashboardWindowOrBringItUpIfAlreadyCreated: ->\n    if world.sampleDashboardWindow?\n      if !world.sampleDashboardWindow.destroyed and world.sampleDashboardWindow.parent?\n        world.add world.sampleDashboardWindow\n        world.sampleDashboardWindow.bringToForeground()\n        world.sampleDashboardWindow.fullRawMoveTo world.hand.position().add new Point 100, -50\n        world.sampleDashboardWindow.fullRawMoveWithin world\n        world.sampleDashboardWindow.rememberFractionalSituationInHoldingPanel()\n        return\n\n    slideWdgt = new SimpleSlideWdgt()\n\n    container = slideWdgt.stretchableWidgetContainer.contents\n    container.rawSetExtent new Point 725,556\n\n    scatterPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleScatterPlotWdgt()), true, true\n    scatterPlot.fullRawMoveTo container.position().add new Point 19, 86\n    scatterPlot.rawSetExtent new Point 200, 200\n    container.add scatterPlot\n    scatterPlot.rememberFractionalSituationInHoldingPanel()\n\n    functionPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleFunctionPlotWdgt()), true, true\n    functionPlot.fullRawMoveTo container.position().add new Point 251, 86\n    functionPlot.rawSetExtent new Point 200, 200\n    container.add functionPlot\n    functionPlot.rememberFractionalSituationInHoldingPanel()\n\n    barPlot = new WindowWdgt nil, nil, new PlotWithAxesWdgt(new ExampleBarPlotWdgt()), true, true\n    barPlot.fullRawMoveTo container.position().add new Point 19, 327\n    barPlot.rawSetExtent new Point 200, 200\n    container.add barPlot\n    barPlot.rememberFractionalSituationInHoldingPanel()\n\n    plot3D = new WindowWdgt nil, nil, new Example3DPlotWdgt, true, true\n    plot3D.fullRawMoveTo container.position().add new Point 491, 327\n    plot3D.rawSetExtent new Point 200, 150\n    container.add plot3D\n    plot3D.rememberFractionalSituationInHoldingPanel()\n\n    usaMap = new SimpleUSAMapIconWdgt new Color 183, 183, 183\n    usaMap.fullRawMoveTo container.position().add new Point 242, 355\n    usaMap.rawSetExtent new Point 230, 145\n    container.add usaMap\n    usaMap.rememberFractionalSituationInHoldingPanel()\n\n    mapPin1 = new MapPinIconWdgt()\n    mapPin1.fullRawMoveTo container.position().add new Point 226, 376\n    container.add mapPin1\n    mapPin1.rememberFractionalSituationInHoldingPanel()\n\n    mapPin2 = new MapPinIconWdgt()\n    mapPin2.fullRawMoveTo container.position().add new Point 289, 363\n    container.add mapPin2\n    mapPin2.rememberFractionalSituationInHoldingPanel()\n\n    mapPin3 = new MapPinIconWdgt()\n    mapPin3.fullRawMoveTo container.position().add new Point 323, 397\n    container.add mapPin3\n    mapPin3.rememberFractionalSituationInHoldingPanel()\n\n    mapPin4 = new MapPinIconWdgt()\n    mapPin4.fullRawMoveTo container.position().add new Point 360, 421\n    container.add mapPin4\n    mapPin4.rememberFractionalSituationInHoldingPanel()\n\n    mapPin5 = new MapPinIconWdgt()\n    mapPin5.fullRawMoveTo container.position().add new Point 417, 374\n    container.add mapPin5\n    mapPin5.rememberFractionalSituationInHoldingPanel()\n\n    worldMap = new SimpleWorldMapIconWdgt new Color 183, 183, 183\n    worldMap.fullRawMoveTo container.position().add new Point 464, 128\n    worldMap.rawSetExtent new Point 240, 125\n    container.add worldMap\n    worldMap.rememberFractionalSituationInHoldingPanel()\n\n    speechBubble1 = new SpeechBubbleWdgt "online"\n    speechBubble1.fullRawMoveTo container.position().add new Point 506, 123\n    speechBubble1.rawSetExtent new Point 66, 42\n    container.add speechBubble1\n    speechBubble1.rememberFractionalSituationInHoldingPanel()\n\n    speechBubble2 = new SpeechBubbleWdgt "offline"\n    speechBubble2.fullRawMoveTo container.position().add new Point 590, 105\n    speechBubble2.rawSetExtent new Point 66, 42\n    container.add speechBubble2\n    speechBubble2.rememberFractionalSituationInHoldingPanel()\n\n    dashboardTitle = new TextMorph2 "Example dashboard with interactive 3D plot"\n    dashboardTitle.alignRight()\n    dashboardTitle.alignMiddle()\n    dashboardTitle.fullRawMoveTo container.position().add new Point 161, 6\n    dashboardTitle.rawSetExtent new Point 403, 50\n    container.add dashboardTitle\n    dashboardTitle.rememberFractionalSituationInHoldingPanel()\n\n\n    slider1 = new SliderMorph nil, nil, nil, nil, nil, true\n    slider1.fullRawMoveTo container.position().add new Point 491, 484\n    slider1.rawSetExtent new Point 201, 24\n    container.add slider1\n    slider1.rememberFractionalSituationInHoldingPanel()\n\n    slider1.setTargetAndActionWithOnesPickedFromMenu nil, nil, plot3D.contents, "setParameter"\n\n    wm = new WindowWdgt nil, nil, slideWdgt\n    wm.fullRawMoveTo new Point 114, 10\n    wm.rawSetExtent new Point 596, 592\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "Sample dashboard"\n    wm.changed()\n\n\n    slideWdgt.disableDragsDropsAndEditing()\n    \n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just close it instead.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    slideWdgt.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.close()\n\n    world.sampleDashboardWindow = wm\n\n\n\n  createDegreesConverterWindowOrBringItUpIfAlreadyCreated: ->\n    if world.degreesConverterWindow?\n      if !world.degreesConverterWindow.destroyed and world.degreesConverterWindow.parent?\n        world.add world.degreesConverterWindow\n        world.degreesConverterWindow.bringToForeground()\n        world.degreesConverterWindow.fullRawMoveTo world.hand.position().add new Point 100, -50\n        world.degreesConverterWindow.fullRawMoveWithin world\n        world.degreesConverterWindow.rememberFractionalSituationInHoldingPanel()\n        return\n\n    xCorrection = 32\n    yCorrection = 50\n    patchProgrammingWdgt = new PatchProgrammingWdgt()\n\n    container = patchProgrammingWdgt.stretchableWidgetContainer.contents\n    container.rawSetExtent new Point 584,552\n\n    slider1 = new SliderMorph nil, nil, nil, nil, nil, true\n    slider1.fullRawMoveTo container.position().add new Point 43+xCorrection, 195+yCorrection\n    slider1.rawSetExtent new Point 20, 100\n    container.add slider1\n    slider1.rememberFractionalSituationInHoldingPanel()\n\n    slider2 = new SliderMorph nil, nil, nil, nil, nil, true\n    slider2.fullRawMoveTo container.position().add new Point 472+xCorrection, 203+yCorrection\n    slider2.rawSetExtent new Point 20, 100\n    container.add slider2\n    slider2.rememberFractionalSituationInHoldingPanel()\n\n    cText = new TextMorph2 "0"\n    cText.fullRawMoveTo container.position().add new Point 104, 253\n    cText.rawSetExtent new Point 150, 75\n    container.add cText\n    cText.rememberFractionalSituationInHoldingPanel()\n\n    fText = new TextMorph2 "0"\n    fText.fullRawMoveTo container.position().add new Point 344, 255\n    fText.alignRight()\n    fText.rawSetExtent new Point 150, 75\n    container.add fText\n    fText.rememberFractionalSituationInHoldingPanel()\n\n    calc1 = new WindowWdgt nil, nil, new CalculatingPatchNodeWdgt("# °C → °F formula\\n(in1)->Math.round in1*9/5+32"), true\n    calc1.fullRawMoveTo container.position().add new Point 148+xCorrection/2, 19\n    calc1.rawSetExtent new Point 241, 167\n    container.add calc1\n    calc1.rememberFractionalSituationInHoldingPanel()\n\n    calc2 = new WindowWdgt nil, nil, new CalculatingPatchNodeWdgt("# °F → °C formula\\n(in1)->Math.round (in1-32)*5/9"), true\n    calc2.fullRawMoveTo container.position().add new Point 148+xCorrection/2, 365\n    calc2.rawSetExtent new Point 241, 167\n    container.add calc2\n    calc2.rememberFractionalSituationInHoldingPanel()\n\n\n    slider1.setTargetAndActionWithOnesPickedFromMenu nil, nil, cText, "setText"\n    cText.setTargetAndActionWithOnesPickedFromMenu nil, nil, calc1.contents, "setInput1"\n    calc1.contents.setTargetAndActionWithOnesPickedFromMenu nil, nil, fText, "setText"\n    fText.setTargetAndActionWithOnesPickedFromMenu nil, nil, slider2, "setValue"\n    slider2.setTargetAndActionWithOnesPickedFromMenu nil, nil, calc2.contents, "setInput1"\n    calc2.contents.setTargetAndActionWithOnesPickedFromMenu nil, nil, slider1, "setValue"\n\n\n\n    cLabel = new TextMorph2 "°C"\n    cLabel.fullRawMoveTo container.position().add new Point 0+xCorrection, 102+yCorrection\n    cLabel.rawSetExtent new Point 90, 90\n    container.add cLabel\n    cLabel.rememberFractionalSituationInHoldingPanel()\n\n    fLabel = new TextMorph2 "°F"\n    fLabel.fullRawMoveTo container.position().add new Point 422+xCorrection, 102+yCorrection\n    fLabel.rawSetExtent new Point 90, 90\n    container.add fLabel\n    fLabel.rememberFractionalSituationInHoldingPanel()\n\n    #@inform (@position().subtract @parent.position()) + " " +  @extent()\n\n    wm = new WindowWdgt nil, nil, patchProgrammingWdgt\n    wm.fullRawMoveTo new Point 114, 10\n    wm.rawSetExtent new Point 596, 592\n    world.add wm\n    wm.setTitleWithoutPrependedContentName "°C ↔ °F converter"\n    wm.changed()\n\n\n    patchProgrammingWdgt.disableDragsDropsAndEditing()\n    \n    cText.isEditable = true\n    fText.isEditable = true\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just close it instead.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    patchProgrammingWdgt.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.close()\n\n    world.degreesConverterWindow = wm\n\n  createHowToSaveMessageOpener: ->\n    scriptWdgt = new ScriptWdgt """\n\n     menusHelper.createHowToSaveMessageWindowOrBringItUpIfAlreadyCreated()\n\n\n    """\n    # the starting script string above is not\n    # actually saved, it\'s just there as starting\n    # content, so let\'s save it\n    scriptWdgt.saveScript()\n\n    wm = new WindowWdgt nil, nil, scriptWdgt\n    wm.setExtent new Point 460, 400\n    wm.fullRawMoveTo world.hand.position().subtract new Point 50, 100\n    wm.fullRawMoveWithin world\n    wm.changed()\n\n    toolbarsOpenerLauncher = new IconicDesktopSystemScriptShortcutWdgt wm, "How to save?", new FloppyDiskIconWdgt()\n    # this "add" is going to try to position the reference\n    # in some smart way (i.e. according to a grid)\n    world.add toolbarsOpenerLauncher\n    toolbarsOpenerLauncher.setExtent new Point 75, 75\n    toolbarsOpenerLauncher.fullChanged()\n    return wm\n\n\n  createHowToSaveMessageWindowOrBringItUpIfAlreadyCreated: ->\n    if world.howToSaveDocWindow?\n      if !world.howToSaveDocWindow.destroyed and world.howToSaveDocWindow.parent?\n        world.add world.howToSaveDocWindow\n        world.howToSaveDocWindow.bringToForeground()\n        world.howToSaveDocWindow.fullRawMoveTo world.hand.position().add new Point 100, -50\n        world.howToSaveDocWindow.fullRawMoveWithin world\n        world.howToSaveDocWindow.rememberFractionalSituationInHoldingPanel()\n        return\n\n    simpleDocument = new SimpleDocumentWdgt()\n    sdspw = simpleDocument.simpleDocumentScrollPanel\n\n    sdspw.fullRawMoveTo new Point 114, 10\n    sdspw.rawSetExtent new Point 365, 405\n\n    startingContent = new FloppyDiskIconWdgt()\n    startingContent.rawSetExtent new Point 85, 85\n\n    sdspw.setContents startingContent, 5\n    startingContent.layoutSpecDetails.setElasticity 0\n    startingContent.layoutSpecDetails.setAlignmentToCenter()\n\n    startingContent = new SimplePlainTextWdgt(\n      "How to save?",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.alignCenter()\n    startingContent.setFontSize 24\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    sdspw.add startingContent\n\n\n    sdspw.addDivider()\n\n\n    sdspw.addNormalParagraph "There are a couple of ways to save data in Fizzygum.¹\\n\\nHowever, \\"in-house\\" stable saving solutions are only available in private versions.²\\n\\nIn the meantime that these solutions make their way into the public version, the Fizzygum team can consult for you to tailor \'saving\' functionality to your needs (save to file, save to cloud, connect to databases etc. ).\\n\\nPlease enquiry via one of the Fizzygum contacts here:"\n\n    sdspw.addSpacer()\n\n    startingContent = new SimpleLinkWdgt "contacts"\n    startingContent.rawSetExtent new Point 405, 50\n    sdspw.add startingContent\n    startingContent.layoutSpecDetails.setAlignmentToRight()\n\n    sdspw.addSpacer()\n\n    startingContent = new SimplePlainTextWdgt(\n      "Footnotes",nil,nil,nil,nil,nil,WorldMorph.preferencesAndSettings.editableItemBackgroundColor, 1)\n    startingContent.toggleWeight()\n    startingContent.isEditable = true\n    startingContent.enableSelecting()\n    startingContent.toggleHeaderLine()\n    sdspw.add startingContent\n\n    sdspw.addSpacer()\n\n    sdspw.addNormalParagraph "¹ Saving solutions:\\n"+\n     "1) saving data with existing formats (e.g. markdown etc.). Advantages: compatibility. Disadvantages: works only with \\"plain\\" documents (no live documents, no documents within documents etc.)\\n"+\n     "2) serialising objects graph. Advantages: fidelity. Disadvantages: needs some management of versioning of Fizzygum platform and documents\\n"+\n     "3) deducing source code to generate content. Advantages: compactness, inspectability of source code, high-level semantics of source code preserved. Disadvantages: only possible with relatively simple objects.\\n"+\n     "\\n"+\n     "² Why private beta:\\n"+\n     "Proliferation of saving solutions done without our help could be detrimental to the Fizzygum platform (due to degraded experience on third party sites, incompatibilities between sites, migration issues, security issues, etc.), hence the Fizzygum team decided to withhold this functionality from public until we can package an open turn-key solution that minimises misuse and sub-par experiences."\n\n\n    wm = new WindowWdgt nil, nil, simpleDocument\n    wm.fullRawMoveTo new Point 114, 10\n    wm.rawSetExtent new Point 365, 447\n    world.add wm\n    wm.rememberFractionalSituationInHoldingPanel()\n    wm.setTitleWithoutPrependedContentName "How to save?"\n    wm.changed()\n\n    simpleDocument.disableDragsDropsAndEditing()\n\n    # if we don\'t do this, the window would ask to save content\n    # when closed. Just close it instead.\n    # TODO: should be done using a flag, we don\'t like\n    # to inject code like this: the source is not tracked\n    simpleDocument.closeFromContainerWindow = (containerWindow) ->\n      containerWindow.close()\n\n\n    world.howToSaveDocWindow = wm\n\n';
