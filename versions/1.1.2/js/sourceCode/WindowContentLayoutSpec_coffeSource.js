// Generated by CoffeeScript 1.12.7
window.WindowContentLayoutSpec_coffeSource = '# WindowContentLayoutSpec\n# REQUIRES DeepCopierMixin\n\n\nclass WindowContentLayoutSpec extends VerticalStackLayoutSpec\n\n  @augmentWith DeepCopierMixin\n\n  # when you drop something on a window, you\n  # expect a couple of possible behaviours:\n  # 1) the window takes the size of the dropped item\n  # 2) the item takes the size of the window\n  # You normally expect 1) with things that inherently have\n  # a particular size and proportion, for example a slider\n  # (which makes no sense when enlarged and deformed to a\n  # different proportion)\n  # You expect 2) with things that are "small", since you\n  # want to "window" them you probably want to give them\n  # more importance.\n  # These two properties can define which behaviour is\n  # going to take effect.\n  preferredStartingWidth: nil\n  preferredStartingHeight: nil\n  \n  # if this is set, it means that the widget can\n  # meaningfully have its height set to any value,\n  # so the holding window can be stretched\n  # vertically to any extent (if the window itself\n  # is not constrained by a layout, that is)\n  # This is true for example for vertical sliders, or\n  # scrolling panels (scrolling stacks, or scrolling text\n  # panels, or documents).\n  # This is FALSE for icons (since they\'d only show empty\n  # vertical space which would not be meaningful)\n  # or the clock (same reason) or vertical stacks or "naked"\n  # wrapping text (in those cases it\'s the content that dictates\n  # what the height should be, there literally is nothing\n  # boyond the height that they have).\n  #\n  # Note that we\'ll have to override this when we\'ll want\n  # to maximise windows, we\'ll just have to\n  # leave the empty vertical space.\n  canSetHeightFreely: true\n\n  resizerCanOverlapContents: true\n\n  rememberInitialDimensions: (@element, @stack) ->\n    super\n    \n    availableWidthInStack = @stack.availableWidthForContents()\n    if @preferredStartingWidth == PreferredSize.DONT_MIND\n      @widthOfElementWhenAdded = availableWidthInStack\n      @elasticity = 1\n\n  constructor: (@preferredStartingWidth, @preferredStartingHeight, elasticity) ->\n    super elasticity\n';
