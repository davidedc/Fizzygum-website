// Generated by CoffeeScript 1.12.7
window.PatchProgrammingWdgt_coffeSource = 'class PatchProgrammingWdgt extends StretchableEditableWdgt\n\n  colloquialName: ->   \n    "Patch Programming"\n\n  representativeIcon: ->\n    new PatchProgrammingIconWdgt()\n\n\n  createToolsPanel: ->\n    # tools -------------------------------\n    @toolsPanel = new ScrollPanelWdgt new ToolPanelWdgt()\n\n    @toolsPanel.addMany [\n      new TextBoxCreatorButtonWdgt()\n      new SliderNodeCreatorButtonWdgt()\n\n      new ColorPaletteNodeCreatorButtonWdgt()\n      new GrayscalePaletteNodeCreatorButtonWdgt()\n      new CalculatingNodeCreatorButtonWdgt()\n    ]\n\n\n\n    @toolsPanel.disableDragsDropsAndEditing()\n    @add @toolsPanel\n    @dragsDropsAndEditingEnabled = true\n    @invalidateLayout()\n\n  createNewStretchablePanel: ->\n    @stretchableWidgetContainer = new StretchableWidgetContainerWdgt()\n    @add @stretchableWidgetContainer\n\n\n  # TODO this method is the same as in the simple slide widget\n  reLayout: ->\n    # here we are disabling all the broken\n    # rectangles. The reason is that all the\n    # submorphs of the inspector are within the\n    # bounds of the parent Widget. This means that\n    # if only the parent morph breaks its rectangle\n    # then everything is OK.\n    # Also note that if you attach something else to its\n    # boundary in a way that sticks out, that\'s still\n    # going to be painted and moved OK.\n    trackChanges.push false\n\n    # label\n    labelLeft = @left() + @externalPadding\n    labelTop = @top() + @externalPadding\n    labelRight = @right() - @externalPadding\n    labelWidth = labelRight - labelLeft\n    labelBottom = @top() + @externalPadding\n\n    # tools -------------------------------\n\n    b = @bottom() - (2 * @externalPadding)\n\n    if @toolsPanel?.parent == @\n      @toolsPanel.fullRawMoveTo new Point @left() + @externalPadding, labelBottom\n      @toolsPanel.rawSetExtent new Point 95, @height() - 2 * @externalPadding\n\n\n    # stretchableWidgetContainer --------------------------\n\n    stretchableWidgetContainerWidth = @width() - 2*@externalPadding\n    \n    if @dragsDropsAndEditingEnabled\n      stretchableWidgetContainerWidth -= @toolsPanel.width() + @internalPadding\n\n    b = @bottom() - (2 * @externalPadding)\n    stretchableWidgetContainerHeight =  @height() - 2 * @externalPadding\n    stretchableWidgetContainerBottom = labelBottom + stretchableWidgetContainerHeight\n    if @dragsDropsAndEditingEnabled\n      stretchableWidgetContainerLeft = @toolsPanel.right() + @internalPadding\n    else\n      stretchableWidgetContainerLeft = @left() + @externalPadding\n\n    if @stretchableWidgetContainer.parent == @\n      @stretchableWidgetContainer.fullRawMoveTo new Point stretchableWidgetContainerLeft, labelBottom\n      @stretchableWidgetContainer.setExtent new Point stretchableWidgetContainerWidth, stretchableWidgetContainerHeight\n\n    # ----------------------------------------------\n\n\n    trackChanges.pop()\n    if AutomatorRecorderAndPlayer? and AutomatorRecorderAndPlayer.state != AutomatorRecorderAndPlayer.IDLE and AutomatorRecorderAndPlayer.alignmentOfMorphIDsMechanism\n      world.alignIDsOfNextMorphsInSystemTests()\n\n    @layoutIsValid = true\n    @notifyChildrenThatParentHasReLayouted()\n\n\n';
