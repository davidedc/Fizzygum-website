// Generated by CoffeeScript 1.12.7
window.VerticalStackLayoutSpec_coffeSource = '# VerticalStackLayoutSpec\n# REQUIRES DeepCopierMixin\n\nclass VerticalStackLayoutSpec\n\n  @augmentWith DeepCopierMixin\n\n  stack: nil\n  element: nil\n\n  widthOfStackWhenAdded: nil\n  widthOfElementWhenAdded: nil\n  elasticity: 1\n  alignment: \'left\'\n\n  constructor: (@elasticity) ->\n    return nil\n\n  rememberInitialDimensions: (@element, @stack) ->\n    \n    availableWidthInStack = @stack.availableWidthForContents()\n    elementWidthWithoutSpacing = @element.widthWithoutSpacing()\n    \n    if elementWidthWithoutSpacing > availableWidthInStack\n      @widthOfElementWhenAdded = availableWidthInStack\n      @elasticity = 1\n    else\n      @widthOfElementWhenAdded = elementWidthWithoutSpacing\n\n    @widthOfStackWhenAdded = availableWidthInStack\n\n  getWidthInStack: ->\n    availableWidthInStack = @stack.availableWidthForContents()\n    proportionalWidth = availableWidthInStack * @widthOfElementWhenAdded / @widthOfStackWhenAdded\n    differenceWithFixedWidth = proportionalWidth - @widthOfElementWhenAdded\n    \n    width = @widthOfElementWhenAdded + @elasticity * differenceWithFixedWidth\n    width = Math.round width\n\n    return Math.min width, availableWidthInStack\n\n\n  addMorphSpecificMenuEntries: (morphOpeningThePopUp, menu) ->\n    menu.addLine()\n    menu.addMenuItem "layout in stack âžœ", false, @, "vertStackMenu", ""\n\n  vertStackMenu: (morphOpeningThePopUp,targetMorph,a,b,c)->\n    menu = new MenuMorph morphOpeningThePopUp,  false, targetMorph, true, true, nil\n    menu.addMenuItem "base width...", true, @, "baseWidthPopout", ""\n    menu.addMenuItem "elasticity...", true, @, "elasticityPopout", ""\n    menu.addMenuItem "align left", true, @, "setAlignmentToLeft"  if @alignment isnt "left"\n    menu.addMenuItem "align right", true, @, "setAlignmentToRight"  if @alignment isnt "right"\n    menu.addMenuItem "align center", true, @, "setAlignmentToCenter"  if @alignment isnt "center"\n    menu.popUpAtHand()\n\n  setAlignmentToLeft: ->\n    if @alignment isnt "left"\n      @alignment = "left"\n      @element.refreshScrollPanelWdgtOrVerticalStackIfIamInIt()\n\n  setAlignmentToRight: ->\n    if @alignment isnt "right"\n      @alignment = "right"\n      @element.refreshScrollPanelWdgtOrVerticalStackIfIamInIt()\n\n  setAlignmentToCenter: ->\n    if @alignment isnt "enter"\n      @alignment = "center"\n      @element.refreshScrollPanelWdgtOrVerticalStackIfIamInIt()\n\n  elasticityPopout: (menuItem,a,b,c,d,e,f)->\n    @element.prompt menuItem.parent.title + "\\nelasticity:",\n      @,\n      "setElasticity",\n      (@elasticity * 100).toString(),\n      nil,\n      0,\n      100,\n      true\n\n  setElasticity: (elasticityOrMorphGivingElasticity, morphGivingElasticity) ->\n    if morphGivingElasticity?.getValue?\n      elasticity = morphGivingElasticity.getValue()\n    else\n      elasticity = elasticityOrMorphGivingElasticity\n\n    elasticity = Number(elasticity)\n\n    elasticity = elasticity/100\n    unless @elasticity == elasticity\n      @elasticity = elasticity\n      @element.refreshScrollPanelWdgtOrVerticalStackIfIamInIt()\n\n  baseWidthPopout: (menuItem,a,b,c,d,e,f)->\n    @element.prompt menuItem.parent.title + "\\nbase width:",\n      @,\n      "setWidthOfElementWhenAdded",\n      @widthOfElementWhenAdded.toString(),\n      nil,\n      10,\n      1000,\n      true\n\n  setWidthOfElementWhenAdded: (widthOfElementWhenAddedOrMorphGivingWidthOfElementWhenAdded, morphGivingWidthOfElementWhenAdded) ->\n    if morphGivingWidthOfElementWhenAdded?.getValue?\n      widthOfElementWhenAdded = morphGivingWidthOfElementWhenAdded.getValue()\n    else\n      widthOfElementWhenAdded = widthOfElementWhenAddedOrMorphGivingWidthOfElementWhenAdded\n\n    widthOfElementWhenAdded = Math.round(widthOfElementWhenAdded)\n\n    if widthOfElementWhenAdded\n      unless @widthOfElementWhenAdded == widthOfElementWhenAdded\n        @widthOfElementWhenAdded = widthOfElementWhenAdded\n        @element.refreshScrollPanelWdgtOrVerticalStackIfIamInIt()\n\n';
